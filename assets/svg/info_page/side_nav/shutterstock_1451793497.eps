%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Business Training (Education) Line Icons 04-01.eps
%%Creator: Adobe Illustrator(R) 19.0
%%For: Пользователь
%%CreationDate: 7/7/2019
%%BoundingBox: 0 0 2200 2255
%%HiResBoundingBox: 0 0 2200 2254.0984
%%CropBox: 0 0 2200 2254.0984
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.0.1 x52 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
   xmp:ModifyDate="2019-07-07T16:29:14+03:00"
   xmp:CreateDate="2019-07-07T16:29:13+03:00"
   xmp:MetadataDate="2019-07-07T16:39:45+03:00"
   xmp:CreatorTool="Adobe Illustrator CC 2015 (Windows)"
   xmpMM:DocumentID="xmp.did:47fbe14f-6e78-7745-a94f-e45b9b27d4c8"
   xmpMM:InstanceID="xmp.iid:15268015-5229-a94b-bb24-c412739c37e9"
   xmpMM:OriginalDocumentID="uuid:a9d36c65-dab4-4750-85bc-600c325835ce"
   dc:format="application/postscript"
   pdf:Producer="Adobe PDF Library 15.0"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="248"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEA+gD6AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAA+gAAAAEA&#xA;AQD6AAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CAEAAPgDAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;AQAAAAAAAAABAAIDBAUGBwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQy&#xA;kaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW&#xA;01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4&#xA;KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVR&#xA;E2EiBnGBkTKhsfAUwdHhI0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0&#xA;VTfyo7PDKCnT4/OElKS0xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFho&#xA;eIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwD0J52vbm2j&#xA;01Yrma1Se6Ec0lsvOThwY0VQGruPDMDX5DERokXLpzdv2TijMzuMZVGxxcuYQ1vfXEc+ixQ3t3PF&#xA;cXcyTtdoY5GCwlgpUqnwg7jbK45CDACUiDI89ujbPDExykxgDGArhNj6veUf5y1Oa0sILW1uFtby&#xA;/mSGK4YhRGoPKSQk7bKKfTl2uymMQAalI1fd3uN2XpxOZlIcUYRuu/uCR6jqWo3vk8eYLbUp7a5t&#xA;4Vjmt4inpmZJODs2xO9a7HpTMPLllPB4okQQOXnbscGDHj1fgShGUZSsE3dEWGX6XYTWVu0Ut5Ne&#xA;szlhLPxLAEAcRxC7bVzaYcZgKJMve6LUZhklYiIeQQWmXlzL5m1u2kkLQW62hgjPRTIjlqfOmU4p&#xA;k5pg8hw/pcnUYojT4pAeqXHfwIpB6tqN7FruoQRzMsMWjNcRoOglEjjmPegyvNlkMkgDsMd/Gy36&#xA;bBCWGEiNzm4fhQ2SS381ao3lxILqUw6vG1pIJR1mtrh04uPHZuLe+YcdZPwqJqfp+INfguwn2djG&#xA;oMoi8R4x7pRB2/SF93qVzJ5i1a3n1LULeG3kjW3js4jKoDRgtyoj03yU8pOWYMpgCq4RfT3MceCI&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:e54d6709-f4ea-5e4a-a7c9-001b0d196989"
    stRef:documentID="xmp.did:e54d6709-f4ea-5e4a-a7c9-001b0d196989"
    stRef:originalDocumentID="uuid:a9d36c65-dab4-4750-85bc-600c325835ce"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:c9f1ce31-613b-1043-97c5-92223966451f"
      stEvt:when="2019-07-07T16:26:51+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:47fbe14f-6e78-7745-a94f-e45b9b27d4c8"
      stEvt:when="2019-07-07T16:29:14+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2015 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:5479c00e-eebc-9944-81fe-1a35251a61d9"
      stEvt:when="2019-07-07T16:39:27+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:15268015-5229-a94b-bb24-c412739c37e9"
      stEvt:when="2019-07-07T16:39:45+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Set Vector Line Icons of Business Training</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Set of vector line icons of business training for modern concepts, web and apps.</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>business</rdf:li>
     <rdf:li>training</rdf:li>
     <rdf:li>education</rdf:li>
     <rdf:li>icon</rdf:li>
     <rdf:li>line</rdf:li>
     <rdf:li>set</rdf:li>
     <rdf:li>thin</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>flat</rdf:li>
     <rdf:li>infographic</rdf:li>
     <rdf:li>linear</rdf:li>
     <rdf:li>element</rdf:li>
     <rdf:li>logo</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>collection</rdf:li>
     <rdf:li>outline</rdf:li>
     <rdf:li>info</rdf:li>
     <rdf:li>briefing</rdf:li>
     <rdf:li>conference</rdf:li>
     <rdf:li>team</rdf:li>
     <rdf:li>seminar</rdf:li>
     <rdf:li>working</rdf:li>
     <rdf:li>presentation</rdf:li>
     <rdf:li>planning</rdf:li>
     <rdf:li>learning</rdf:li>
     <rdf:li>teaching</rdf:li>
     <rdf:li>brainstorming</rdf:li>
     <rdf:li>study</rdf:li>
     <rdf:li>office</rdf:li>
     <rdf:li>cooperation</rdf:li>
     <rdf:li>university</rdf:li>
     <rdf:li>teamwork</rdf:li>
     <rdf:li>management</rdf:li>
     <rdf:li>computer</rdf:li>
     <rdf:li>speech</rdf:li>
     <rdf:li>information</rdf:li>
     <rdf:li>lecture</rdf:li>
     <rdf:li>speaker</rdf:li>
     <rdf:li>leader</rdf:li>
     <rdf:li>company</rdf:li>
     <rdf:li>technology</rdf:li>
     <rdf:li>communication</rdf:li>
     <rdf:li>workplace</rdf:li>
     <rdf:li>workshop</rdf:li>
     <rdf:li>businessman</rdf:li>
     <rdf:li>career</rdf:li>
     <rdf:li>tutorship</rdf:li>
     <rdf:li>coaching</rdf:li>
     <rdf:li>online</rdf:li>
     <rdf:li>freelance</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmpTPg:MaxPageSize
    stDim:w="2200.000000"
    stDim:h="2254.098361"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=45 G=96 B=134 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="45"
         xmpG:green="96"
         xmpG:blue="134"/>
        <rdf:li
         xmpG:swatchName="R=53 G=180 B=207 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="53"
         xmpG:green="180"
         xmpG:blue="207"/>
        <rdf:li
         xmpG:swatchName="R=255 G=197 B=36 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="197"
         xmpG:blue="36"/>
        <rdf:li
         xmpG:swatchName="R=67 G=174 B=168 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="67"
         xmpG:green="174"
         xmpG:blue="168"/>
        <rdf:li
         xmpG:swatchName="R=52 G=65 B=84 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="52"
         xmpG:green="65"
         xmpG:blue="84"/>
        <rdf:li
         xmpG:swatchName="R=96 G=178 B=204 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="96"
         xmpG:green="178"
         xmpG:blue="204"/>
        <rdf:li
         xmpG:swatchName="R=35 G=37 B=45 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="35"
         xmpG:green="37"
         xmpG:blue="45"/>
        <rdf:li
         xmpG:swatchName="R=219 G=235 B=209 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="219"
         xmpG:green="235"
         xmpG:blue="209"/>
        <rdf:li
         xmpG:swatchName="R=248 G=110 B=90 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="248"
         xmpG:green="110"
         xmpG:blue="90"/>
        <rdf:li
         xmpG:swatchName="R=221 G=166 B=42 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="221"
         xmpG:green="166"
         xmpG:blue="42"/>
        <rdf:li
         xmpG:swatchName="R=255 G=109 B=59"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="109"
         xmpG:blue="59"/>
        <rdf:li
         xmpG:swatchName="R=42 G=68 B=93"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="42"
         xmpG:green="68"
         xmpG:blue="93"/>
        <rdf:li
         xmpG:swatchName="R=23 G=198 B=205"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="23"
         xmpG:green="198"
         xmpG:blue="205"/>
        <rdf:li
         xmpG:swatchName="R=45 G=96 B=134 2"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="45"
         xmpG:green="96"
         xmpG:blue="134"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
              
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2254.1 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2254.1 li
2200 2254.1 li
2200 0 li
cp
clp
5.18272 lw
1 lc
0 lj
10 ml
[] 0 dsh
true sadj
1960.98 2044.19 mo
1874.19 2044.19 li
1874.19 2018.13 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.203922 .254902 .329412 rgb
@
1979.79 2018.01 mo
1848.47 2018.01 li
1848.47 1990.36 li
@
1964.5 1922.26 mo
1964.5 1908.04 li
1820.82 1908.04 li
1820.82 1990.36 li
1956.39 1990.36 li
@
1871.23 1970.63 mo
1859.4 1958.79 1859.4 1939.61 1871.23 1927.77 cv
@
1914.09 1927.77 mo
1925.92 1939.61 1925.92 1958.79 1914.09 1970.63 cv
@
1939.82 1951.25 mo
1939.82 1950.29 1940.6 1949.52 1941.55 1949.52 cv
1942.5 1949.52 1943.27 1950.29 1943.27 1951.25 cv
1943.27 1952.2 1942.5 1952.97 1941.55 1952.97 cv
1940.6 1952.97 1939.82 1952.2 1939.82 1951.25 cv
cp
@
1842.05 1951.25 mo
1842.05 1950.29 1842.82 1949.52 1843.77 1949.52 cv
1844.72 1949.52 1845.49 1950.29 1845.49 1951.25 cv
1845.49 1952.2 1844.72 1952.97 1843.77 1952.97 cv
1842.82 1952.97 1842.05 1952.2 1842.05 1951.25 cv
cp
@
1884.29 1957.54 mo
1884.29 1962.16 1888.04 1965.91 1892.66 1965.91 cv
1897.28 1965.91 1901.03 1962.16 1901.03 1957.54 cv
1901.03 1952.92 1897.6 1950.78 1892.66 1949.17 cv
1888.27 1947.74 1884.29 1945.43 1884.29 1940.8 cv
1884.29 1936.18 1888.04 1932.44 1892.66 1932.44 cv
1897.28 1932.44 1901.03 1936.18 1901.03 1940.8 cv
@
1892.66 1927.77 mo
1892.66 1932.49 li
@
1892.66 1965.91 mo
1892.66 1970.63 li
@
1964.32 2092.45 mo
1964.32 2092.45 1947.72 2057.22 1991.55 2029.52 cv
1991.55 2029.52 1998.34 2025.42 1998.34 2020.8 cv
1998.34 2016.17 1991.55 2012.07 1991.55 2012.07 cv
1947.72 1984.37 1964.32 1949.14 1964.32 1949.14 cv
@
2041.23 2092.45 mo
2041.23 2092.45 2057.84 2057.22 2014.01 2029.52 cv
2014.01 2029.52 2007.22 2025.42 2007.22 2020.8 cv
2007.22 2016.17 2014.01 2012.07 2014.01 2012.07 cv
2057.84 1984.37 2041.23 1949.14 2041.23 1949.14 cv
@
2049.17 1949.14 mo
1956.39 1949.14 li
1956.39 1937.19 li
1956.39 1934.67 1958.43 1932.63 1960.95 1932.63 cv
2044.61 1932.63 li
2047.12 1932.63 2049.17 1934.67 2049.17 1937.19 cv
2049.17 1949.14 li
cp
@
2049.17 2092.45 mo
1956.39 2092.45 li
1956.39 2104.4 li
1956.39 2106.92 1958.43 2108.96 1960.95 2108.96 cv
2044.61 2108.96 li
2047.12 2108.96 2049.17 2106.92 2049.17 2104.4 cv
2049.17 2092.45 li
cp
@
2001.41 1996.86 mo
2001.41 1995.72 2002.34 1994.79 2003.49 1994.79 cv
2004.63 1994.79 2005.56 1995.72 2005.56 1996.86 cv
2005.56 1998.01 2004.63 1998.94 2003.49 1998.94 cv
2002.34 1998.94 2001.41 1998.01 2001.41 1996.86 cv
cp
@
1987.14 1982.6 mo
1987.14 1981.45 1988.07 1980.52 1989.22 1980.52 cv
1990.37 1980.52 1991.3 1981.45 1991.3 1982.6 cv
1991.3 1983.74 1990.37 1984.67 1989.22 1984.67 cv
1988.07 1984.67 1987.14 1983.74 1987.14 1982.6 cv
cp
@
2014.26 1982.6 mo
2014.26 1981.45 2015.19 1980.52 2016.34 1980.52 cv
2017.48 1980.52 2018.41 1981.45 2018.41 1982.6 cv
2018.41 1983.74 2017.48 1984.67 2016.34 1984.67 cv
2015.19 1984.67 2014.26 1983.74 2014.26 1982.6 cv
cp
@
2008.54 2038.33 mo
2007.32 2037.58 2005.02 2036.03 2002.78 2033.76 cv
2000.54 2036.03 1998.24 2037.58 1997.01 2038.33 cv
1974.51 2052.58 1970.94 2068.24 1971.49 2078.11 cv
2034.03 2078.11 li
2034.58 2068.15 2030.97 2052.53 2008.54 2038.33 cv
cp
1 .427451 .231373 rgb
f
5.40984 lw
1 lj
2049.89 1010.63 mo
2049.89 1026.76 li
2049.89 1028.62 2048.39 1030.13 2046.53 1030.13 cv
2026.14 1030.13 li
2024.9 1030.13 2023.76 1029.47 2023.13 1028.4 cv
2022.17 1026.74 li
2021.1 1024.91 2019.14 1023.78 2017.02 1023.78 cv
2017.02 1023.78 li
2017.02 1023.78 li
2014.9 1023.78 2012.94 1024.91 2011.87 1026.74 cv
2010.91 1028.4 li
2010.28 1029.47 2009.14 1030.13 2007.9 1030.13 cv
1987.51 1030.13 li
1985.65 1030.13 1984.15 1028.62 1984.15 1026.76 cv
1984.15 1010.63 li
1984.15 1008.78 1985.65 1007.27 1987.51 1007.27 cv
2046.53 1007.27 li
2048.39 1007.27 2049.89 1008.78 2049.89 1010.63 cv
cp
.203922 .254902 .329412 rgb
@
1996.53 998.829 mo
2001.38 991.136 2008.76 986.224 2017.02 986.224 cv
2025.02 986.224 2032.19 990.834 2037.04 998.116 cv
@
2042.39 1030.13 mo
2039.17 1044.35 2029.03 1054.73 2017.02 1054.73 cv
2005 1054.73 1994.86 1044.35 1991.65 1030.12 cv
@
2030.92 1049.61 mo
2046.6 1063.41 li
2054.17 1069.99 2058.52 1079.54 2058.52 1089.58 cv
2058.52 1114.82 li
@
2003.12 1049.61 mo
1975.52 1073.78 li
@
1818.14 1010.63 mo
1818.14 1026.76 li
1818.14 1028.62 1819.65 1030.13 1821.5 1030.13 cv
1841.89 1030.13 li
1843.13 1030.13 1844.28 1029.47 1844.9 1028.4 cv
1845.86 1026.74 li
1846.93 1024.91 1848.89 1023.78 1851.01 1023.78 cv
1851.01 1023.78 li
1851.01 1023.78 li
1853.14 1023.78 1855.1 1024.91 1856.16 1026.74 cv
1857.13 1028.4 li
1857.75 1029.47 1858.9 1030.13 1860.14 1030.13 cv
1880.52 1030.13 li
1882.38 1030.13 1883.89 1028.62 1883.89 1026.76 cv
1883.89 1010.63 li
1883.89 1008.78 1882.38 1007.27 1880.52 1007.27 cv
1821.5 1007.27 li
1819.65 1007.27 1818.14 1008.78 1818.14 1010.63 cv
cp
@
1871.5 998.829 mo
1866.65 991.136 1859.28 986.224 1851.01 986.224 cv
1843.01 986.224 1835.84 990.834 1830.99 998.116 cv
@
1825.64 1030.13 mo
1828.86 1044.35 1839 1054.73 1851.01 1054.73 cv
1863.03 1054.73 1873.17 1044.35 1876.38 1030.12 cv
@
1837.82 1050.15 mo
1821.44 1063.41 li
1813.86 1069.99 1809.51 1079.54 1809.51 1089.58 cv
1809.51 1114.82 li
@
1864.91 1049.61 mo
1892.52 1073.78 li
@
1901.14 1010.63 mo
1901.14 1026.76 li
1901.14 1028.62 1902.65 1030.13 1904.51 1030.13 cv
1924.89 1030.13 li
1926.13 1030.13 1927.28 1029.47 1927.9 1028.4 cv
1928.87 1026.74 li
1929.93 1024.91 1931.9 1023.78 1934.02 1023.78 cv
1934.02 1023.78 li
1934.02 1023.78 li
1936.14 1023.78 1938.1 1024.91 1939.17 1026.74 cv
1940.13 1028.4 li
1940.75 1029.47 1941.9 1030.13 1943.14 1030.13 cv
1963.53 1030.13 li
1965.38 1030.13 1966.89 1028.62 1966.89 1026.76 cv
1966.89 1010.63 li
1966.89 1008.78 1965.38 1007.27 1963.53 1007.27 cv
1904.51 1007.27 li
1902.65 1007.27 1901.14 1008.78 1901.14 1010.63 cv
cp
@
1954.5 998.829 mo
1949.65 991.136 1942.28 986.224 1934.02 986.224 cv
1926.01 986.224 1918.84 990.834 1913.99 998.116 cv
@
1908.65 1030.13 mo
1911.86 1044.35 1922 1054.73 1934.02 1054.73 cv
1946.03 1054.73 1956.17 1044.35 1959.39 1030.12 cv
@
1920.11 1049.61 mo
1892.52 1073.78 li
@
1947.92 1049.61 mo
1975.52 1073.78 li
1975.52 1114.82 li
@
1892.52 1073.78 mo
1892.52 1115.35 li
@
1895.16 901.986 mo
1934.02 879.55 li
1972.88 901.986 li
@
1972.88 901.986 mo
1972.88 946.858 li
1934.02 969.294 li
1895.16 946.858 li
1895.16 901.986 li
@
1934.02 924.422 mo
1934.02 954.227 li
@
1934.02 924.422 mo
1972.88 901.986 li
@
1916.8 901.987 mo
1934.02 911.93 li
1951.24 901.987 li
1934.02 892.044 li
1916.8 901.987 li
cp
.541176 .627451 .698039 rgb
f
157.232 1611.06 mo
160.987 1616.02 166.938 1619.22 173.637 1619.22 cv
184.993 1619.22 194.2 1610.01 194.2 1598.66 cv
194.2 1587.3 184.993 1578.09 173.637 1578.09 cv
.203922 .254902 .329412 rgb
@
164.654 1566.12 mo
151.073 1569.87 140.772 1581.94 139.946 1596.78 cv
139.689 1601.4 140.374 1605.86 141.835 1609.96 cv
@
175.214 1598.66 mo
175.214 1599.53 174.508 1600.23 173.637 1600.23 cv
172.765 1600.23 172.059 1599.53 172.059 1598.66 cv
172.059 1597.78 172.765 1597.08 173.637 1597.08 cv
174.508 1597.08 175.214 1597.78 175.214 1598.66 cv
cp
@
173.637 1559.9 mo
173.637 1598.66 li
143.03 1621.81 li
@
183.983 1657.73 mo
180.622 1658.31 177.165 1658.62 173.637 1658.62 cv
140.522 1658.62 113.677 1631.77 113.677 1598.66 cv
113.677 1565.54 140.522 1538.7 173.637 1538.7 cv
206.751 1538.7 233.596 1565.54 233.596 1598.66 cv
233.596 1601.34 233.419 1603.99 233.076 1606.58 cv
@
113.677 1598.66 mo
121.79 1598.66 li
@
173.637 1538.7 mo
173.637 1546.81 li
@
370.724 1734.59 mo
391.079 1760.7 li
286.303 1760.7 li
181.526 1760.7 li
201.881 1734.59 li
370.724 1734.59 li
@
391.079 1760.7 mo
391.079 1760.7 li
391.079 1766.88 388.041 1772.66 382.954 1776.16 cv
381.715 1777.01 li
378.584 1779.17 374.873 1780.32 371.071 1780.32 cv
286.303 1780.32 li
285.077 1780.32 li
201.534 1780.32 li
197.733 1780.32 194.021 1779.17 190.891 1777.01 cv
189.651 1776.16 li
184.565 1772.66 181.526 1766.88 181.526 1760.7 cv
181.526 1760.7 li
@
277.352 1770.51 mo
295.254 1770.51 li
@
201.807 1734.59 mo
201.807 1634.31 li
201.807 1627.36 207.443 1621.72 214.396 1621.72 cv
358.209 1621.72 li
365.162 1621.72 370.798 1627.36 370.798 1634.31 cv
370.798 1734.59 li
@
316.721 1689.03 mo
316.721 1705.83 303.102 1719.45 286.303 1719.45 cv
269.503 1719.45 255.884 1705.83 255.884 1689.03 cv
255.884 1672.23 269.503 1658.62 286.303 1658.62 cv
303.102 1658.62 316.721 1672.23 316.721 1689.03 cv
cp
@
303.184 1689.03 mo
278.891 1674.64 li
278.891 1689.03 li
278.891 1703.43 li
303.184 1689.03 li
cp
1 .427451 .231373 rgb
f
308.155 1621.72 mo
308.155 1634.73 li
308.155 1639.99 303.888 1644.26 298.625 1644.26 cv
273.98 1644.26 li
268.717 1644.26 264.45 1639.99 264.45 1634.73 cv
264.45 1621.72 li
.203922 .254902 .329412 rgb
@
287.756 1632.99 mo
287.756 1633.79 287.105 1634.44 286.303 1634.44 cv
285.5 1634.44 284.85 1633.79 284.85 1632.99 cv
284.85 1632.19 285.5 1631.54 286.303 1631.54 cv
287.105 1631.54 287.756 1632.19 287.756 1632.99 cv
cp
@
1548.28 733.029 mo
1548.28 739.342 1553.4 744.46 1559.72 744.46 cv
1566.03 744.46 1571.15 739.342 1571.15 733.029 cv
1571.15 726.716 1566.46 723.8 1559.72 721.599 cv
1553.71 719.64 1548.28 716.481 1548.28 710.168 cv
1548.28 703.855 1553.4 698.738 1559.72 698.738 cv
1566.03 698.738 1571.15 703.855 1571.15 710.168 cv
@
1559.72 692.367 mo
1559.72 698.816 li
@
1559.72 744.46 mo
1559.72 750.909 li
@
1686.05 658.762 mo
1645.16 634.536 li
1645.16 658.762 li
1645.16 682.988 li
1686.05 658.762 li
cp
.541176 .627451 .698039 rgb
f
1599.57 612.89 mo
1722.45 612.89 li
1725.49 612.89 1727.95 615.351 1727.95 618.387 cv
1727.95 702.852 li
1727.95 721.638 li
1710.81 704.465 li
1709.78 703.432 1708.38 702.852 1706.92 702.852 cv
1602.13 702.852 li
1596.24 702.852 1591.48 698.082 1591.48 692.199 cv
1591.48 620.984 li
1591.48 616.514 1595.1 612.89 1599.57 612.89 cv
cp
.203922 .254902 .329412 rgb
@
1625.5 602.07 mo
1625.5 557.375 li
1625.5 553.042 1621.99 549.529 1617.66 549.529 cv
1498.85 549.529 li
1495.91 549.529 1493.53 551.915 1493.53 554.858 cv
1493.53 636.744 li
1493.53 654.956 li
1510.14 638.308 li
1511.14 637.307 1512.5 636.744 1513.92 636.744 cv
1580.65 636.744 li
@
1580.66 679.571 mo
1498.85 679.571 li
1495.91 679.571 1493.53 681.957 1493.53 684.901 cv
1493.53 766.786 li
1493.53 784.999 li
1510.14 768.351 li
1511.14 767.349 1512.5 766.786 1513.92 766.786 cv
1615.18 766.786 li
1620.88 766.786 1625.5 762.162 1625.5 756.459 cv
1625.5 713.672 li
@
1531.04 579.498 mo
1588.39 579.498 li
@
1531.04 604.505 mo
1588.39 604.505 li
@
2018.12 1703.15 mo
1845.25 1703.15 li
1836.9 1703.15 1830.12 1696.37 1830.12 1688.02 cv
1830.12 1567.47 li
1830.12 1559.11 1836.9 1552.34 1845.25 1552.34 cv
2018.12 1552.34 li
2026.48 1552.34 2033.26 1559.11 2033.26 1567.47 cv
2033.26 1688.02 li
2033.26 1696.37 2026.48 1703.15 2018.12 1703.15 cv
cp
@
1879.88 1703.15 mo
1870.65 1726.49 li
1931.69 1726.49 li
1992.73 1726.49 li
1983.5 1703.15 li
@
2017.1 1744.19 mo
2034.77 1776.08 li
2037.43 1780.88 2033.96 1786.76 2028.48 1786.76 cv
1931.69 1786.76 li
1834.9 1786.76 li
1829.41 1786.76 1825.95 1780.88 1828.6 1776.08 cv
1846.28 1744.19 li
2017.1 1744.19 li
cp
@
1999.65 1600.3 mo
1999.65 1612.26 1991.5 1621.95 1981.44 1621.95 cv
1971.39 1621.95 1963.24 1612.26 1963.24 1600.3 cv
1963.24 1588.35 1971.39 1578.66 1981.44 1578.66 cv
1991.5 1578.66 1999.65 1588.35 1999.65 1600.3 cv
cp
@
2022.22 1651.17 mo
2009.15 1639.07 li
2000.66 1631.48 li
@
2003.09 1684.83 mo
2003.09 1659.84 li
2003.04 1652.88 li
2021.08 1668.85 li
@
1964.37 1631.43 mo
1940.74 1612.48 li
1937.65 1610 1933.03 1610.09 1930.4 1613.04 cv
1927.59 1616.19 1928.02 1621.01 1931.27 1623.62 cv
1953.21 1641.22 li
1957.02 1644.27 1959.23 1648.89 1959.23 1653.77 cv
1959.23 1684.83 li
@
1934.99 1639.07 mo
1934.99 1668.47 li
1850.54 1668.47 li
1850.54 1574.9 li
1934.99 1574.9 li
1934.99 1600.07 li
@
1861.36 1637.85 mo
1861.36 1637.85 li
1871.45 1616.98 1887.38 1599.47 1907.21 1587.46 cv
1910.09 1585.72 li
1861.36 1585.72 li
1861.36 1637.85 li
cp
.541176 .627451 .698039 rgb
f
222.132 1948.42 mo
206.512 1963.59 li
206.512 1924.02 li
206.512 1897.9 li
206.512 1888.95 213.761 1881.7 222.704 1881.7 cv
277.972 1881.7 li
286.915 1881.7 294.164 1888.95 294.164 1897.9 cv
294.164 1932.23 li
294.164 1941.17 286.915 1948.42 277.972 1948.42 cv
222.132 1948.42 li
cp
.203922 .254902 .329412 rgb
@
215.781 1992.47 mo
227.447 2002.05 li
231.012 2004.98 233.078 2009.35 233.078 2013.97 cv
233.078 2039.04 li
233.078 2046.69 226.88 2052.89 219.234 2052.89 cv
219.234 2052.89 li
@
173.282 1992.47 mo
161.616 2002.05 li
158.051 2004.98 155.986 2009.35 155.986 2013.97 cv
155.986 2039.04 li
155.986 2046.69 162.184 2052.89 169.829 2052.89 cv
169.829 2052.89 li
@
218.579 2017.7 mo
218.639 2025.92 li
218.639 2107.78 li
218.639 2114.44 213.243 2119.83 206.585 2119.83 cv
202.799 2119.83 li
@
170.484 2017.7 mo
170.424 2025.92 li
170.424 2107.78 li
170.424 2114.44 175.82 2119.83 182.478 2119.83 cv
182.478 2119.83 li
189.135 2119.83 194.532 2114.44 194.532 2107.78 cv
194.532 2060.03 li
@
217.347 1972.36 mo
213.993 1981.72 205.044 1988.42 194.532 1988.42 cv
181.15 1988.42 170.303 1977.57 170.303 1964.19 cv
170.303 1950.81 181.15 1939.96 194.532 1939.96 cv
@
191.488 1952.87 mo
191.488 1952.28 191.525 1951.69 191.576 1951.12 cv
185.601 1952.47 181.122 1957.81 181.122 1964.19 cv
181.122 1971.58 187.137 1977.6 194.532 1977.6 cv
198.986 1977.6 203.058 1975.36 205.525 1971.81 cv
197.41 1969.33 191.488 1961.78 191.488 1952.87 cv
cp
.541176 .627451 .698039 rgb
f
358.685 1992.47 mo
370.351 2002.05 li
373.915 2004.98 375.981 2009.35 375.981 2013.97 cv
375.981 2039.04 li
375.981 2046.69 369.783 2052.89 362.138 2052.89 cv
362.138 2052.89 li
.203922 .254902 .329412 rgb
@
316.186 1992.47 mo
304.52 2002.05 li
300.955 2004.98 298.889 2009.35 298.889 2013.97 cv
298.889 2039.04 li
298.889 2046.69 305.087 2052.89 312.733 2052.89 cv
312.733 2052.89 li
@
361.482 2017.7 mo
361.543 2025.92 li
361.543 2107.78 li
361.543 2114.44 356.147 2119.83 349.489 2119.83 cv
345.703 2119.83 li
@
313.388 2017.7 mo
313.327 2025.92 li
313.327 2107.78 li
313.327 2114.44 318.724 2119.83 325.381 2119.83 cv
325.381 2119.83 li
332.039 2119.83 337.435 2114.44 337.435 2107.78 cv
337.435 2060.03 li
@
361.664 1964.19 mo
361.664 1977.57 350.817 1988.42 337.435 1988.42 cv
324.054 1988.42 313.206 1977.57 313.206 1964.19 cv
313.206 1950.81 324.054 1939.96 337.435 1939.96 cv
350.817 1939.96 361.664 1950.81 361.664 1964.19 cv
cp
@
337.434 1950.78 mo
335.533 1950.78 333.726 1951.18 332.086 1951.9 cv
336.824 1953.97 340.146 1958.7 340.146 1964.19 cv
340.146 1969.68 336.824 1974.41 332.086 1976.48 cv
333.726 1977.19 335.533 1977.6 337.434 1977.6 cv
344.829 1977.6 350.845 1971.58 350.845 1964.19 cv
350.845 1956.79 344.829 1950.78 337.434 1950.78 cv
cp
1 .427451 .231373 rgb
f
968.947 1410.05 mo
968.947 1415.91 973.7 1420.67 979.563 1420.67 cv
985.427 1420.67 990.179 1415.91 990.179 1410.05 cv
990.179 1404.19 985.827 1401.48 979.563 1399.43 cv
973.99 1397.61 968.947 1394.68 968.947 1388.82 cv
968.947 1382.95 973.7 1378.2 979.563 1378.2 cv
985.427 1378.2 990.179 1382.95 990.179 1388.82 cv
.203922 .254902 .329412 rgb
@
979.563 1372.28 mo
979.563 1378.27 li
@
979.563 1420.67 mo
979.563 1426.66 li
@
1020.95 1399.47 mo
1020.95 1376.61 1002.42 1358.09 979.563 1358.09 cv
956.708 1358.09 938.181 1376.61 938.181 1399.47 cv
938.181 1422.32 956.708 1440.85 979.563 1440.85 cv
1002.42 1440.85 1020.95 1422.32 1020.95 1399.47 cv
cp
@
896.156 1286.13 mo
910.328 1297.78 li
914.658 1301.33 917.168 1306.64 917.168 1312.25 cv
917.168 1342.71 li
917.168 1352 909.639 1359.53 900.351 1359.53 cv
900.351 1359.53 li
@
844.53 1286.13 mo
830.358 1297.78 li
826.028 1301.33 823.519 1306.64 823.519 1312.25 cv
823.519 1342.71 li
823.519 1352 831.048 1359.53 840.336 1359.53 cv
840.336 1359.53 li
@
899.555 1316.79 mo
899.629 1326.77 li
899.629 1426.21 li
899.629 1434.3 893.073 1440.85 884.986 1440.85 cv
880.386 1440.85 li
@
841.131 1316.79 mo
841.058 1326.77 li
841.058 1426.21 li
841.058 1434.3 847.614 1440.85 855.701 1440.85 cv
855.701 1440.85 li
863.787 1440.85 870.343 1434.3 870.343 1426.21 cv
870.343 1368.2 li
@
899.776 1251.78 mo
899.776 1268.03 886.599 1281.21 870.343 1281.21 cv
854.088 1281.21 840.911 1268.03 840.911 1251.78 cv
840.911 1235.52 854.088 1222.34 870.343 1222.34 cv
886.599 1222.34 899.776 1235.52 899.776 1251.78 cv
cp
@
870.343 1233.16 mo
868.033 1233.16 865.829 1233.6 863.786 1234.38 cv
870.819 1237.04 875.843 1243.82 875.843 1251.78 cv
875.843 1259.73 870.819 1266.51 863.786 1269.17 cv
865.829 1269.95 868.033 1270.39 870.343 1270.39 cv
880.606 1270.39 888.957 1262.04 888.957 1251.78 cv
888.957 1241.51 880.606 1233.16 870.343 1233.16 cv
cp
.541176 .627451 .698039 rgb
f
1019.9 1282.49 mo
1019.9 1260.21 1001.84 1242.15 979.562 1242.15 cv
957.285 1242.15 939.225 1260.21 939.225 1282.49 cv
939.225 1304.77 957.285 1322.83 979.562 1322.83 cv
1001.84 1322.83 1019.9 1304.77 1019.9 1282.49 cv
cp
.203922 .254902 .329412 rgb
@
971.14 1235.09 mo
971.14 1230.77 li
971.14 1226.11 974.911 1222.34 979.563 1222.34 cv
979.563 1222.34 li
984.215 1222.34 987.986 1226.11 987.986 1230.77 cv
987.986 1235.09 li
@
1008.85 1253.2 mo
1020.46 1241.59 li
@
1016.03 1237.17 mo
1024.89 1246.02 li
@
951.076 1254 mo
939.224 1242.15 li
@
943.65 1237.73 mo
934.799 1246.58 li
@
1000.83 1261.85 mo
1000.83 1261.5 1000.55 1261.22 1000.2 1261.22 cv
999.857 1261.22 999.575 1261.5 999.575 1261.85 cv
999.575 1262.2 999.857 1262.48 1000.2 1262.48 cv
1000.55 1262.48 1000.83 1262.2 1000.83 1261.85 cv
cp
@
1010.11 1282.49 mo
1010.11 1282.14 1009.83 1281.86 1009.48 1281.86 cv
1009.13 1281.86 1008.85 1282.14 1008.85 1282.49 cv
1008.85 1282.84 1009.13 1283.12 1009.48 1283.12 cv
1009.83 1283.12 1010.11 1282.84 1010.11 1282.49 cv
cp
@
1000.83 1303.13 mo
1000.83 1302.79 1000.55 1302.5 1000.2 1302.5 cv
999.857 1302.5 999.575 1302.79 999.575 1303.13 cv
999.575 1303.48 999.857 1303.76 1000.2 1303.76 cv
1000.55 1303.76 1000.83 1303.48 1000.83 1303.13 cv
cp
@
958.292 1261.85 mo
958.292 1261.5 958.574 1261.22 958.922 1261.22 cv
959.27 1261.22 959.552 1261.5 959.552 1261.85 cv
959.552 1262.2 959.27 1262.48 958.922 1262.48 cv
958.574 1262.48 958.292 1262.2 958.292 1261.85 cv
cp
@
949.017 1282.49 mo
949.017 1282.14 949.299 1281.86 949.647 1281.86 cv
949.995 1281.86 950.277 1282.14 950.277 1282.49 cv
950.277 1282.84 949.995 1283.12 949.647 1283.12 cv
949.299 1283.12 949.017 1282.84 949.017 1282.49 cv
cp
@
958.292 1303.13 mo
958.292 1302.79 958.574 1302.5 958.922 1302.5 cv
959.27 1302.5 959.552 1302.79 959.552 1303.13 cv
959.552 1303.48 959.27 1303.76 958.922 1303.76 cv
958.574 1303.76 958.292 1303.48 958.292 1303.13 cv
cp
@
980.192 1312.41 mo
980.192 1312.06 979.91 1311.78 979.562 1311.78 cv
979.214 1311.78 978.932 1312.06 978.932 1312.41 cv
978.932 1312.76 979.214 1313.04 979.562 1313.04 cv
979.91 1313.04 980.192 1312.76 980.192 1312.41 cv
cp
@
980.192 1252.57 mo
980.192 1252.23 979.91 1251.94 979.562 1251.94 cv
979.214 1251.94 978.932 1252.23 978.932 1252.57 cv
978.932 1252.92 979.214 1253.2 979.562 1253.2 cv
979.91 1253.2 980.192 1252.92 980.192 1252.57 cv
cp
@
979.562 1282.49 mo
979.562 1266.84 li
@
566.716 1647.19 mo
560.988 1650.98 554.394 1653.14 547.377 1653.14 cv
525.353 1653.14 507.498 1631.85 507.498 1605.59 cv
507.498 1579.33 525.353 1558.05 547.377 1558.05 cv
569.402 1558.05 587.256 1579.33 587.256 1605.59 cv
587.256 1608.65 587.015 1611.63 586.555 1614.52 cv
@
521.368 1641.62 mo
497.096 1663.41 li
485.863 1673.49 479.447 1687.88 479.447 1702.97 cv
479.447 1723.01 li
479.447 1734.41 488.692 1743.66 500.097 1743.66 cv
567.025 1743.66 li
614.496 1662.11 li
709.816 1662.11 li
666.978 1743.66 li
623.109 1743.66 li
@
676.722 1725.11 mo
699.297 1725.11 li
719.734 1782.49 li
479.447 1782.49 li
@
493.725 1583.5 mo
493.725 1553.87 517.747 1529.84 547.38 1529.84 cv
577.012 1529.84 601.033 1553.87 601.033 1583.5 cv
@
582.549 1583.17 mo
599.993 1583.17 li
606.813 1583.17 612.341 1588.7 612.341 1595.52 cv
612.341 1602.17 li
612.341 1608.99 606.813 1614.52 599.993 1614.52 cv
588.322 1614.52 li
@
512.206 1583.17 mo
494.761 1583.17 li
487.942 1583.17 482.413 1588.7 482.413 1595.52 cv
482.413 1602.17 li
482.413 1608.99 487.942 1614.52 494.761 1614.52 cv
507.107 1614.52 li
@
599.993 1614.52 mo
599.993 1617.68 li
599.993 1628.01 591.616 1636.39 581.283 1636.39 cv
547.379 1636.39 li
@
691.91 1672.93 mo
620.717 1672.93 li
613.691 1685 li
616.931 1685 li
641.488 1685 657.185 1711.18 645.621 1732.84 cv
645.621 1732.84 li
660.441 1732.84 li
691.91 1672.93 li
cp
.541176 .627451 .698039 rgb
f
1258.93 1323.45 mo
1276.74 1340.75 li
1276.74 1295.62 li
1276.74 1265.83 li
1276.74 1255.63 1268.47 1247.36 1258.28 1247.36 cv
1195.25 1247.36 li
1185.05 1247.36 1176.79 1255.63 1176.79 1265.83 cv
1176.79 1304.98 li
1176.79 1315.18 1185.05 1323.45 1195.25 1323.45 cv
1258.93 1323.45 li
cp
.203922 .254902 .329412 rgb
@
1243.92 1333.23 mo
1243.92 1348.45 li
1243.92 1358.64 1235.65 1366.91 1225.45 1366.91 cv
1161.77 1366.91 li
1143.96 1384.21 li
1143.96 1339.08 li
1143.96 1309.29 li
1143.96 1299.09 1152.23 1290.83 1162.43 1290.83 cv
1166.49 1290.83 li
@
1378.39 1241.92 mo
1333.68 1241.77 1310.93 1268.45 1307.47 1291.36 cv
1301.41 1331.42 1304.96 1323.93 1287.5 1352.36 cv
1286.17 1354.52 1286.44 1357.33 1288.22 1359.14 cv
1290.26 1361.22 1293.54 1362.85 1297.35 1363.25 cv
1299.98 1363.53 1302.12 1365.63 1302.07 1368.28 cv
1301.96 1374.21 1295 1376.12 1299.74 1384.63 cv
1301.35 1387.51 1303.68 1390.74 1301.47 1395.79 cv
1297.23 1406.28 1303.38 1413.02 1313.38 1413.94 cv
1317.73 1414.34 1322.11 1413.68 1326.48 1413.61 cv
1330.71 1413.54 1334.94 1414.03 1339.05 1415.05 cv
1343.48 1416.16 1346.92 1419.72 1347.83 1424.2 cv
1347.83 1459.06 li
@
1154.78 1309.29 mo
1154.78 1339.08 li
1154.78 1356.06 li
1157.38 1356.09 li
1161.77 1356.09 li
1211.63 1356.09 li
1208.61 1355.49 1205.61 1354.8 1202.65 1353.95 cv
1193.2 1351.26 1184.04 1347.03 1176.74 1340.46 cv
1169.84 1334.24 1164.82 1326.08 1161.71 1317.33 cv
1160.05 1312.66 1158.93 1307.82 1158.22 1302.92 cv
1156.15 1304.28 1154.78 1306.63 1154.78 1309.29 cv
cp
1 .427451 .231373 rgb
f
685.107 652.863 mo
705.632 669.909 li
709.197 672.837 711.263 677.208 711.263 681.821 cv
711.263 706.9 li
711.263 714.545 705.064 720.743 697.419 720.743 cv
697.419 720.743 li
.203922 .254902 .329412 rgb
@
660.322 652.863 mo
639.801 669.909 li
636.236 672.837 634.171 677.208 634.171 681.821 cv
634.171 714.641 li
583.674 642.359 li
@
696.764 685.559 mo
696.824 693.775 li
696.824 775.636 li
696.824 782.293 691.428 787.69 684.771 787.69 cv
680.984 787.69 li
@
648.669 685.559 mo
648.609 693.775 li
648.609 775.636 li
648.609 782.293 654.005 787.69 660.663 787.69 cv
660.663 787.69 li
667.32 787.69 672.717 782.293 672.717 775.636 cv
672.717 727.881 li
@
696.946 632.042 mo
696.946 645.423 686.098 656.271 672.717 656.271 cv
659.335 656.271 648.488 645.423 648.488 632.042 cv
648.488 618.661 659.335 607.813 672.717 607.813 cv
686.098 607.813 696.946 618.661 696.946 632.042 cv
cp
@
535.123 647.163 mo
535.123 605.925 li
524.184 605.925 li
524.184 647.163 li
535.123 647.163 li
cp
1 .427451 .231373 rgb
f
564.868 647.163 mo
564.868 628.761 li
553.929 628.761 li
553.929 647.163 li
564.868 647.163 li
cp
.541176 .627451 .698039 rgb
f
594.613 631.6 mo
594.613 605.925 li
583.674 605.925 li
583.674 623.333 li
594.613 631.6 li
cp
1 .427451 .231373 rgb
f
529.653 587.836 mo
559.399 610.673 li
589.144 587.836 li
618.889 606.835 li
.203922 .254902 .329412 rgb
@
583.663 663.547 mo
503.433 663.547 li
503.433 571.453 li
628.761 571.453 li
628.761 663.547 li
@
628.761 663.547 mo
612.838 663.547 li
@
568.802 663.547 mo
568.802 748.474 li
529.653 787.69 li
@
568.802 748.474 mo
607.972 787.69 li
@
344.252 1431.15 mo
359.544 1379.71 li
361.219 1374.08 356.997 1368.42 351.117 1368.42 cv
280.172 1368.42 li
209.226 1368.42 li
203.346 1368.42 199.124 1374.08 200.799 1379.71 cv
216.092 1431.15 li
280.456 1431.15 li
@
199.876 1420.37 mo
191.726 1435.73 li
189.352 1440.2 192.593 1445.59 197.657 1445.59 cv
280.172 1445.59 li
362.687 1445.59 li
367.75 1445.59 370.991 1440.2 368.618 1435.73 cv
360.467 1420.37 li
@
349.803 1249.87 mo
349.803 1264.88 339.865 1277.06 327.605 1277.06 cv
315.347 1277.06 305.408 1264.88 305.408 1249.87 cv
305.408 1234.86 315.347 1222.68 327.605 1222.68 cv
339.865 1222.68 349.803 1234.86 349.803 1249.87 cv
cp
@
354 1353.72 mo
354 1323.26 li
353.937 1314.77 li
379.633 1337.56 li
383.217 1340.74 388.648 1340.61 392.075 1337.26 cv
392.075 1337.26 li
395.912 1333.51 395.705 1327.28 391.627 1323.79 cv
361.387 1297.93 li
351.044 1288.67 li
@
306.789 1288.62 mo
277.973 1265.5 li
274.209 1262.48 268.573 1262.6 265.361 1266.2 cv
261.934 1270.04 262.462 1275.91 266.425 1279.09 cv
293.179 1300.55 li
297.821 1304.28 300.522 1309.91 300.522 1315.86 cv
300.522 1353.72 li
@
284.939 1316.42 mo
162.959 1316.42 li
162.959 1217.6 li
301.51 1217.6 li
@
179.489 1298.88 mo
212.248 1266.12 li
227.185 1281.05 li
267.758 1240.48 li
@
260.336 1316.42 mo
260.336 1339.15 li
@
271.456 1339.15 mo
271.456 1345.29 266.477 1350.27 260.336 1350.27 cv
254.194 1350.27 249.215 1345.29 249.215 1339.15 cv
@
280.172 1379.24 mo
211.945 1379.24 li
215.664 1391.75 li
344.679 1391.75 li
348.399 1379.24 li
280.172 1379.24 li
cp
.541176 .627451 .698039 rgb
f
868.27 1069.99 mo
846.552 1069.99 li
828.733 1026.33 li
827.768 1023.97 829.507 1021.38 832.062 1021.38 cv
1015.59 1021.38 li
1018.14 1021.38 1019.88 1023.97 1018.92 1026.33 cv
1001.1 1069.99 li
979.381 1069.99 li
.203922 .254902 .329412 rgb
@
979.38 1116.29 mo
979.38 1052.58 li
979.38 1051.24 978.289 1050.15 976.943 1050.15 cv
870.706 1050.15 li
869.36 1050.15 868.268 1051.24 868.268 1052.58 cv
868.268 1116.29 li
@
947.172 955.622 mo
974.37 978.896 li
982.186 985.584 986.685 995.356 986.685 1005.64 cv
986.685 1021.38 li
@
901.221 955.622 mo
873.526 978.883 li
865.562 985.572 860.964 995.44 860.964 1005.84 cv
860.964 1021.38 li
@
961.326 920.862 mo
961.326 945.308 944.705 965.126 924.202 965.126 cv
903.699 965.126 887.078 945.308 887.078 920.862 cv
887.078 896.416 903.699 876.599 924.202 876.599 cv
944.705 876.599 961.326 896.416 961.326 920.862 cv
cp
@
924.202 887.418 mo
921.262 887.418 918.442 888.062 915.8 889.199 cv
926.191 893.67 933.702 906.16 933.702 920.863 cv
933.702 935.564 926.191 948.054 915.8 952.525 cv
918.442 953.662 921.262 954.306 924.202 954.306 cv
938.707 954.306 950.507 939.303 950.507 920.863 cv
950.507 902.421 938.707 887.418 924.202 887.418 cv
cp
1 .427451 .231373 rgb
f
1639.97 1432.15 mo
1656.92 1375.11 li
1658.78 1368.86 1654.1 1362.58 1647.58 1362.58 cv
1568.91 1362.58 li
1490.24 1362.58 li
1483.72 1362.58 1479.04 1368.86 1480.9 1375.11 cv
1497.85 1432.15 li
1569.22 1432.15 li
.203922 .254902 .329412 rgb
@
1485.87 1420.2 mo
1476.83 1437.22 li
1474.2 1442.18 1477.79 1448.16 1483.41 1448.16 cv
1568.91 1448.16 li
1654.41 1448.16 li
1660.02 1448.16 1663.62 1442.18 1660.99 1437.22 cv
1651.95 1420.2 li
@
1631.76 1290.48 mo
1617.6 1304.23 li
1617.6 1268.36 li
1617.6 1244.67 li
1617.6 1236.57 1624.17 1229.99 1632.28 1229.99 cv
1682.39 1229.99 li
1690.49 1229.99 1697.07 1236.57 1697.07 1244.67 cv
1697.07 1275.8 li
1697.07 1283.91 1690.49 1290.48 1682.39 1290.48 cv
1631.76 1290.48 li
cp
@
1568.91 1373.4 mo
1491.68 1373.4 li
1496.17 1388.52 li
1641.65 1388.52 li
1646.14 1373.4 li
1568.91 1373.4 li
cp
.541176 .627451 .698039 rgb
f
1587.96 1308.3 mo
1610.16 1327.3 li
1616.53 1332.75 1620.21 1340.73 1620.21 1349.12 cv
1620.21 1361.96 li
.203922 .254902 .329412 rgb
@
1550.46 1308.3 mo
1527.86 1327.29 li
1521.37 1332.74 1517.61 1340.8 1517.61 1349.28 cv
1517.61 1361.96 li
@
1599.51 1279.94 mo
1599.51 1299.89 1585.95 1316.06 1569.22 1316.06 cv
1552.49 1316.06 1538.92 1299.89 1538.92 1279.94 cv
1538.92 1259.99 1552.49 1243.82 1569.22 1243.82 cv
1585.95 1243.82 1599.51 1259.99 1599.51 1279.94 cv
cp
@
1547.67 1673.74 mo
1534.95 1673.74 li
1524.52 1648.18 li
1523.95 1646.79 1524.97 1645.27 1526.47 1645.27 cv
1633.95 1645.27 li
1635.45 1645.27 1636.47 1646.79 1635.9 1648.18 cv
1625.47 1673.74 li
1612.75 1673.74 li
@
1612.75 1700.86 mo
1612.75 1663.55 li
1612.75 1662.76 1612.11 1662.12 1611.32 1662.12 cv
1549.1 1662.12 li
1548.31 1662.12 1547.67 1662.76 1547.67 1663.55 cv
1547.67 1700.86 li
@
1593.88 1606.76 mo
1609.81 1620.39 li
1614.39 1624.31 1617.03 1630.03 1617.03 1636.06 cv
1617.03 1645.27 li
@
1566.97 1606.76 mo
1550.75 1620.39 li
1546.09 1624.3 1543.39 1630.08 1543.39 1636.17 cv
1543.39 1645.27 li
@
1602.17 1586.4 mo
1602.17 1600.72 1592.44 1612.33 1580.43 1612.33 cv
1568.42 1612.33 1558.69 1600.72 1558.69 1586.4 cv
1558.69 1572.09 1568.42 1560.48 1580.43 1560.48 cv
1592.44 1560.48 1602.17 1572.09 1602.17 1586.4 cv
cp
@
1525.38 1737.25 mo
1539.95 1749.71 li
1544.14 1753.3 1546.54 1758.53 1546.54 1764.04 cv
1546.54 1772.46 li
@
1500.78 1737.25 mo
1485.94 1749.71 li
1481.68 1753.29 1479.22 1758.57 1479.22 1764.14 cv
1479.22 1772.46 li
@
1532.96 1718.63 mo
1532.96 1731.73 1524.06 1742.34 1513.08 1742.34 cv
1502.1 1742.34 1493.2 1731.73 1493.2 1718.63 cv
1493.2 1705.54 1502.1 1694.93 1513.08 1694.93 cv
1524.06 1694.93 1532.96 1705.54 1532.96 1718.63 cv
cp
@
1513.08 1731.52 mo
1508.17 1731.52 1504.02 1725.62 1504.02 1718.63 cv
1504.02 1711.65 1508.17 1705.75 1513.08 1705.75 cv
1517.99 1705.75 1522.15 1711.65 1522.15 1718.63 cv
1522.15 1725.62 1517.99 1731.52 1513.08 1731.52 cv
cp
1 .427451 .231373 rgb
f
1592.71 1737.25 mo
1607.28 1749.71 li
1611.46 1753.3 1613.87 1758.53 1613.87 1764.04 cv
1613.87 1772.46 li
.203922 .254902 .329412 rgb
@
1568.1 1737.25 mo
1553.27 1749.71 li
1549.01 1753.29 1546.54 1758.57 1546.54 1764.14 cv
@
1600.29 1718.63 mo
1600.29 1731.73 1591.39 1742.34 1580.41 1742.34 cv
1569.43 1742.34 1560.53 1731.73 1560.53 1718.63 cv
1560.53 1705.54 1569.43 1694.93 1580.41 1694.93 cv
1591.39 1694.93 1600.29 1705.54 1600.29 1718.63 cv
cp
@
1580.41 1731.52 mo
1575.5 1731.52 1571.35 1725.62 1571.35 1718.63 cv
1571.35 1711.65 1575.5 1705.75 1580.41 1705.75 cv
1585.32 1705.75 1589.47 1711.65 1589.47 1718.63 cv
1589.47 1725.62 1585.32 1731.52 1580.41 1731.52 cv
cp
1 .427451 .231373 rgb
f
1660.04 1737.25 mo
1674.61 1749.71 li
1678.79 1753.3 1681.2 1758.53 1681.2 1764.04 cv
1681.2 1772.46 li
.203922 .254902 .329412 rgb
@
1635.43 1737.25 mo
1620.6 1749.71 li
1616.34 1753.29 1613.87 1758.57 1613.87 1764.14 cv
@
1667.62 1718.63 mo
1667.62 1731.73 1658.72 1742.34 1647.74 1742.34 cv
1636.76 1742.34 1627.86 1731.73 1627.86 1718.63 cv
1627.86 1705.54 1636.76 1694.93 1647.74 1694.93 cv
1658.72 1694.93 1667.62 1705.54 1667.62 1718.63 cv
cp
@
1647.74 1731.52 mo
1642.83 1731.52 1638.68 1725.62 1638.68 1718.63 cv
1638.68 1711.65 1642.83 1705.75 1647.74 1705.75 cv
1652.65 1705.75 1656.8 1711.65 1656.8 1718.63 cv
1656.8 1725.62 1652.65 1731.52 1647.74 1731.52 cv
cp
1 .427451 .231373 rgb
f
1358.79 699.942 mo
1185.92 699.942 li
1177.56 699.942 1170.79 693.167 1170.79 684.81 cv
1170.79 564.262 li
1170.79 555.905 1177.56 549.13 1185.92 549.13 cv
1358.79 549.13 li
1367.15 549.13 1373.92 555.905 1373.92 564.262 cv
1373.92 684.81 li
1373.92 693.167 1367.15 699.942 1358.79 699.942 cv
cp
.203922 .254902 .329412 rgb
@
1220.54 699.942 mo
1211.31 723.282 li
1272.35 723.282 li
1333.4 723.282 li
1324.16 699.942 li
@
1357.76 740.98 mo
1375.44 772.874 li
1378.1 777.669 1374.63 783.556 1369.15 783.556 cv
1272.35 783.556 li
1175.56 783.556 li
1170.08 783.556 1166.61 777.669 1169.27 772.874 cv
1186.94 740.98 li
1357.76 740.98 li
cp
@
1181.71 772.737 mo
1193.32 751.799 li
1351.39 751.799 li
1362.99 772.737 li
1181.71 772.737 li
cp
1 .427451 .231373 rgb
f
1290.54 549.13 mo
1290.54 568.496 li
1290.54 572.812 1287.04 576.31 1282.72 576.31 cv
1259.28 576.31 li
1254.96 576.31 1251.46 572.812 1251.46 568.496 cv
1251.46 549.13 li
.203922 .254902 .329412 rgb
@
1272.35 562.72 mo
1272.35 563.468 1271.75 564.074 1271 564.074 cv
1270.25 564.074 1269.65 563.468 1269.65 562.72 cv
1269.65 561.972 1270.25 561.366 1271 561.366 cv
1271.75 561.366 1272.35 561.972 1272.35 562.72 cv
cp
@
1230.03 644.085 mo
1241.27 653.707 li
1244.5 656.472 1246.36 660.512 1246.36 664.765 cv
1246.36 671.27 li
@
1211.03 644.085 mo
1199.58 653.702 li
1196.29 656.467 1194.39 660.547 1194.39 664.847 cv
1194.39 671.271 li
@
1235.88 629.714 mo
1235.88 639.821 1229.01 648.014 1220.53 648.014 cv
1212.06 648.014 1205.18 639.821 1205.18 629.714 cv
1205.18 619.607 1212.06 611.414 1220.53 611.414 cv
1229.01 611.414 1235.88 619.607 1235.88 629.714 cv
cp
@
1282.01 644.085 mo
1293.25 653.707 li
1296.48 656.472 1298.34 660.512 1298.34 664.765 cv
1298.34 671.27 li
@
1263.01 644.085 mo
1251.56 653.702 li
1248.27 656.467 1246.36 660.547 1246.36 664.847 cv
@
1287.86 629.714 mo
1287.86 639.821 1280.99 648.014 1272.51 648.014 cv
1264.03 648.014 1257.16 639.821 1257.16 629.714 cv
1257.16 619.607 1264.03 611.414 1272.51 611.414 cv
1280.99 611.414 1287.86 619.607 1287.86 629.714 cv
cp
@
1333.98 644.085 mo
1345.23 653.707 li
1348.46 656.472 1350.32 660.512 1350.32 664.765 cv
1350.32 671.27 li
@
1314.99 644.085 mo
1303.54 653.702 li
1300.24 656.467 1298.34 660.547 1298.34 664.847 cv
@
1339.84 629.714 mo
1339.84 639.821 1332.96 648.014 1324.49 648.014 cv
1316.01 648.014 1309.14 639.821 1309.14 629.714 cv
1309.14 619.607 1316.01 611.414 1324.49 611.414 cv
1332.96 611.414 1339.84 619.607 1339.84 629.714 cv
cp
@
1001.07 606.341 mo
988.215 618.821 li
988.215 586.264 li
988.215 564.771 li
988.215 557.413 994.18 551.449 1001.54 551.449 cv
1047.01 551.449 li
1054.36 551.449 1060.33 557.413 1060.33 564.771 cv
1060.33 593.019 li
1060.33 600.376 1054.36 606.341 1047.01 606.341 cv
1001.07 606.341 li
cp
@
958.151 628.157 mo
977.707 644.892 li
983.327 649.701 986.562 656.728 986.562 664.124 cv
986.562 675.438 li
@
925.11 628.157 mo
905.196 644.883 li
899.47 649.692 896.163 656.788 896.163 664.266 cv
896.163 675.438 li
@
968.328 603.163 mo
968.328 620.741 956.377 634.99 941.634 634.99 cv
926.892 634.99 914.94 620.741 914.94 603.163 cv
914.94 585.585 926.892 571.335 941.634 571.335 cv
956.377 571.335 968.328 585.585 968.328 603.163 cv
cp
@
941.635 582.155 mo
938.764 582.155 936.05 583.244 933.697 585.094 cv
938.398 588.789 941.635 595.575 941.635 603.163 cv
941.635 610.751 938.398 617.536 933.697 621.232 cv
936.05 623.081 938.764 624.17 941.635 624.17 cv
950.24 624.17 957.509 614.55 957.509 603.163 cv
957.509 591.776 950.24 582.155 941.635 582.155 cv
cp
.541176 .627451 .698039 rgb
f
874.053 730.132 mo
891.935 745.434 li
897.074 749.832 900.033 756.257 900.033 763.02 cv
900.033 773.366 li
.203922 .254902 .329412 rgb
@
843.84 730.132 mo
825.631 745.426 li
820.395 749.824 817.372 756.312 817.372 763.15 cv
817.372 773.366 li
@
883.359 707.278 mo
883.359 723.351 872.431 736.381 858.95 736.381 cv
845.47 736.381 834.542 723.351 834.542 707.278 cv
834.542 691.205 845.47 678.175 858.95 678.175 cv
872.431 678.175 883.359 691.205 883.359 707.278 cv
cp
@
956.714 730.132 mo
974.596 745.434 li
979.735 749.832 982.693 756.257 982.693 763.02 cv
982.693 773.366 li
@
926.501 730.132 mo
908.292 745.426 li
903.056 749.824 900.033 756.312 900.033 763.15 cv
@
966.02 707.278 mo
966.02 723.351 955.092 736.381 941.611 736.381 cv
928.13 736.381 917.202 723.351 917.202 707.278 cv
917.202 691.205 928.13 678.175 941.611 678.175 cv
955.092 678.175 966.02 691.205 966.02 707.278 cv
cp
@
1039.37 730.132 mo
1057.26 745.434 li
1062.4 749.832 1065.35 756.257 1065.35 763.02 cv
1065.35 773.366 li
@
1009.16 730.132 mo
990.953 745.426 li
985.717 749.824 982.693 756.312 982.693 763.15 cv
@
1048.68 707.278 mo
1048.68 723.351 1037.75 736.381 1024.27 736.381 cv
1010.79 736.381 999.863 723.351 999.863 707.278 cv
999.863 691.205 1010.79 678.175 1024.27 678.175 cv
1037.75 678.175 1048.68 691.205 1048.68 707.278 cv
cp
@
1344.66 1930.89 mo
1344.66 1943.38 1336.39 1953.51 1326.19 1953.51 cv
1316 1953.51 1307.73 1943.38 1307.73 1930.89 cv
1307.73 1918.4 1316 1908.28 1326.19 1908.28 cv
1336.39 1908.28 1344.66 1918.4 1344.66 1930.89 cv
cp
@
1348.15 2017.29 mo
1348.15 1991.95 li
1348.1 1984.88 li
1369.48 2003.85 li
1372.46 2006.49 1376.98 2006.38 1379.83 2003.6 cv
1379.83 2003.6 li
1383.02 2000.48 1382.85 1995.29 1379.46 1992.39 cv
1354.3 1970.88 li
1345.69 1963.18 li
@
1308.88 1963.13 mo
1284.9 1943.9 li
1281.77 1941.39 1277.08 1941.48 1274.41 1944.48 cv
1271.56 1947.67 1272 1952.56 1275.3 1955.2 cv
1297.55 1973.06 li
1301.42 1976.16 1303.66 1980.84 1303.66 1985.79 cv
1303.66 2017.29 li
@
1290.7 1986.26 mo
1189.22 1986.26 li
1189.22 1904.05 li
1304.48 1904.05 li
@
1202.97 1971.66 mo
1230.22 1944.41 li
1242.65 1956.84 li
1276.41 1923.08 li
@
1203.34 2067.52 mo
1217.91 2079.99 li
1222.1 2083.57 1224.51 2088.8 1224.51 2094.31 cv
1224.51 2102.74 li
@
1178.74 2067.52 mo
1163.9 2079.98 li
1159.64 2083.56 1157.18 2088.85 1157.18 2094.42 cv
1157.18 2102.74 li
@
1210.93 2048.91 mo
1210.93 2062 1202.02 2072.61 1191.04 2072.61 cv
1180.06 2072.61 1171.16 2062 1171.16 2048.91 cv
1171.16 2035.82 1180.06 2025.2 1191.04 2025.2 cv
1202.02 2025.2 1210.93 2035.82 1210.93 2048.91 cv
cp
@
1191.04 2061.79 mo
1186.13 2061.79 1181.98 2055.89 1181.98 2048.91 cv
1181.98 2041.92 1186.13 2036.02 1191.04 2036.02 cv
1195.96 2036.02 1200.11 2041.92 1200.11 2048.91 cv
1200.11 2055.89 1195.96 2061.79 1191.04 2061.79 cv
cp
1 .427451 .231373 rgb
f
1270.67 2067.52 mo
1285.24 2079.99 li
1289.43 2083.57 1291.83 2088.8 1291.83 2094.31 cv
1291.83 2102.74 li
.203922 .254902 .329412 rgb
@
1246.07 2067.52 mo
1231.23 2079.98 li
1226.97 2083.56 1224.51 2088.85 1224.51 2094.42 cv
@
1278.25 2048.91 mo
1278.25 2062 1269.35 2072.61 1258.37 2072.61 cv
1247.39 2072.61 1238.49 2062 1238.49 2048.91 cv
1238.49 2035.82 1247.39 2025.2 1258.37 2025.2 cv
1269.35 2025.2 1278.25 2035.82 1278.25 2048.91 cv
cp
@
1258.37 2061.79 mo
1253.46 2061.79 1249.31 2055.89 1249.31 2048.91 cv
1249.31 2041.92 1253.46 2036.02 1258.37 2036.02 cv
1263.28 2036.02 1267.44 2041.92 1267.44 2048.91 cv
1267.44 2055.89 1263.28 2061.79 1258.37 2061.79 cv
cp
1 .427451 .231373 rgb
f
1338 2067.52 mo
1352.57 2079.99 li
1356.75 2083.57 1359.16 2088.8 1359.16 2094.31 cv
1359.16 2102.74 li
.203922 .254902 .329412 rgb
@
1313.39 2067.52 mo
1298.56 2079.98 li
1294.3 2083.56 1291.83 2088.85 1291.83 2094.42 cv
@
1345.58 2048.91 mo
1345.58 2062 1336.68 2072.61 1325.7 2072.61 cv
1314.72 2072.61 1305.82 2062 1305.82 2048.91 cv
1305.82 2035.82 1314.72 2025.2 1325.7 2025.2 cv
1336.68 2025.2 1345.58 2035.82 1345.58 2048.91 cv
cp
@
1325.7 2061.79 mo
1320.79 2061.79 1316.64 2055.89 1316.64 2048.91 cv
1316.64 2041.92 1320.79 2036.02 1325.7 2036.02 cv
1330.61 2036.02 1334.76 2041.92 1334.76 2048.91 cv
1334.76 2055.89 1330.61 2061.79 1325.7 2061.79 cv
cp
1 .427451 .231373 rgb
f
1865.92 737.459 mo
1884.01 752.94 li
1889.21 757.388 1892.21 763.888 1892.21 770.73 cv
1892.21 781.196 li
.203922 .254902 .329412 rgb
@
1835.36 737.459 mo
1816.94 752.931 li
1811.64 757.38 1808.58 763.944 1808.58 770.861 cv
1808.58 781.196 li
@
1875.34 714.339 mo
1875.34 730.599 1864.28 743.78 1850.65 743.78 cv
1837.01 743.78 1825.95 730.599 1825.95 714.339 cv
1825.95 698.079 1837.01 684.898 1850.65 684.898 cv
1864.28 684.898 1875.34 698.079 1875.34 714.339 cv
cp
@
1949.55 737.459 mo
1967.64 752.94 li
1972.83 757.388 1975.83 763.888 1975.83 770.73 cv
1975.83 781.196 li
@
1918.98 737.459 mo
1900.56 752.931 li
1895.26 757.38 1892.21 763.944 1892.21 770.861 cv
@
1958.96 714.339 mo
1958.96 730.599 1947.91 743.78 1934.27 743.78 cv
1920.63 743.78 1909.57 730.599 1909.57 714.339 cv
1909.57 698.079 1920.63 684.898 1934.27 684.898 cv
1947.91 684.898 1958.96 698.079 1958.96 714.339 cv
cp
@
2033.17 737.459 mo
2051.26 752.94 li
2056.46 757.388 2059.45 763.888 2059.45 770.73 cv
2059.45 781.196 li
@
2002.6 737.459 mo
1984.18 752.931 li
1978.89 757.38 1975.83 763.944 1975.83 770.861 cv
@
2042.58 714.339 mo
2042.58 730.599 2031.53 743.78 2017.89 743.78 cv
2004.25 743.78 1993.2 730.599 1993.2 714.339 cv
1993.2 698.079 2004.25 684.898 2017.89 684.898 cv
2031.53 684.898 2042.58 698.079 2042.58 714.339 cv
cp
@
1913.73 634.355 mo
1913.73 637.096 li
1913.73 646.441 1921.3 654.015 1930.65 654.015 cv
1937.89 654.015 li
1947.23 654.015 1954.81 646.441 1954.81 637.096 cv
1954.81 634.355 li
1954.57 625.05 li
1954.57 624.911 li
1954.57 619.111 1956.81 613.503 1960.93 609.421 cv
1967.85 602.56 1972.14 593.051 1972.14 582.533 cv
1972.14 560.727 1953.71 543.225 1931.58 544.752 cv
1913.1 546.027 1898.05 560.864 1896.53 579.326 cv
1895.57 590.936 1899.86 601.556 1907.28 609.089 cv
1911.46 613.338 1913.97 618.952 1913.97 624.915 cv
1913.97 625.05 li
1934.27 625.05 li
@
1924.73 654.369 mo
1924.73 657.723 li
1924.73 662.993 1929 667.264 1934.27 667.264 cv
1934.27 667.264 li
1939.54 667.264 1943.81 662.993 1943.81 657.723 cv
1943.81 654.338 li
@
1934.27 535.787 mo
1934.27 527.096 li
@
1918.27 538.953 mo
1915.3 530.786 li
@
1904.32 547.399 mo
1898.73 540.742 li
@
1894.1 560.107 mo
1886.58 555.762 li
@
1950.26 538.953 mo
1953.24 530.786 li
@
1964.21 547.399 mo
1969.8 540.742 li
@
1974.43 560.107 mo
1981.96 555.762 li
@
1955.88 598.752 mo
1959.39 594.096 1961.32 588.472 1961.32 582.534 cv
1961.32 574.953 1958.27 567.927 1952.72 562.749 cv
1947.66 558.023 1941.17 555.478 1934.27 555.478 cv
1933.63 555.478 1932.98 555.501 1932.32 555.545 cv
1920.27 556.378 1910.26 565.335 1907.81 576.926 cv
1912.71 573.809 1918.5 571.979 1924.73 571.979 cv
1940.52 571.979 1953.57 583.601 1955.88 598.752 cv
cp
1 .427451 .231373 rgb
f
1904.17 1442.11 mo
1906.63 1434.51 1906.46 1425.08 1904.75 1416.62 cv
1903.75 1411.67 1899.94 1407.73 1895.04 1406.51 cv
1890.5 1405.38 1885.81 1404.84 1881.13 1404.91 cv
1876.29 1404.99 1871.45 1405.72 1866.64 1405.28 cv
1855.57 1404.26 1848.77 1396.8 1853.46 1385.2 cv
1855.91 1379.61 1853.33 1376.04 1851.55 1372.85 cv
1846.3 1363.44 1854.01 1361.32 1854.13 1354.76 cv
1854.18 1351.83 1851.81 1349.51 1848.9 1349.2 cv
1844.69 1348.75 1841.06 1346.95 1838.8 1344.64 cv
1836.84 1342.65 1836.54 1339.54 1838 1337.15 cv
1857.33 1305.7 1853.4 1313.98 1860.1 1269.67 cv
1864.48 1240.69 1896.72 1206.28 1961.26 1216.96 cv
1974.79 1219.2 1988.31 1223.16 1999.64 1230.9 cv
2025.94 1248.86 2040.07 1286.7 2026.31 1330.72 cv
2018.58 1355.45 2001.35 1381.98 2006.63 1409.54 cv
2014.13 1440.35 li
.203922 .254902 .329412 rgb
@
1812.79 1397.46 mo
1804.58 1392.38 1798.93 1381.73 1798.93 1369.4 cv
1798.93 1357.08 1804.58 1346.43 1812.78 1341.35 cv
@
1826.46 1384.66 mo
1821.99 1381.9 1818.91 1376.11 1818.91 1369.4 cv
1818.91 1362.7 1821.99 1356.91 1826.45 1354.15 cv
@
1922.95 1313.72 mo
1922.95 1320.03 1928.06 1325.15 1934.38 1325.15 cv
1940.69 1325.15 1945.81 1320.03 1945.81 1313.72 cv
1945.81 1307.41 1941.12 1304.49 1934.38 1302.29 cv
1928.37 1300.33 1922.95 1297.17 1922.95 1290.86 cv
1922.95 1284.54 1928.06 1279.43 1934.38 1279.43 cv
1940.69 1279.43 1945.81 1284.54 1945.81 1290.86 cv
@
1934.38 1273.06 mo
1934.38 1279.5 li
@
1934.38 1325.15 mo
1934.38 1331.6 li
@
1993.11 1302.29 mo
1993.11 1329.9 1970.73 1352.28 1943.12 1352.28 cv
1915.51 1352.28 1893.13 1329.9 1893.13 1302.29 cv
1893.13 1274.68 1915.51 1252.3 1943.12 1252.3 cv
1970.73 1252.3 1993.11 1274.68 1993.11 1302.29 cv
cp
@
1943.12 1263.12 mo
1939.99 1263.12 1936.94 1263.5 1934.02 1264.2 cv
1951.25 1268.31 1964.09 1283.82 1964.09 1302.29 cv
1964.09 1320.75 1951.25 1336.27 1934.02 1340.38 cv
1936.94 1341.08 1939.99 1341.46 1943.12 1341.46 cv
1964.72 1341.46 1982.29 1323.89 1982.29 1302.29 cv
1982.29 1280.69 1964.72 1263.12 1943.12 1263.12 cv
cp
1 .427451 .231373 rgb
f
866.024 2073.09 mo
883.87 2088.37 li
888.998 2092.75 891.951 2099.17 891.951 2105.92 cv
891.951 2116.24 li
.203922 .254902 .329412 rgb
@
835.873 2073.09 mo
817.701 2088.36 li
812.476 2092.75 809.458 2099.22 809.458 2106.05 cv
809.458 2116.24 li
@
875.312 2050.29 mo
875.312 2066.33 864.406 2079.33 850.952 2079.33 cv
837.499 2079.33 826.593 2066.33 826.593 2050.29 cv
826.593 2034.25 837.499 2021.24 850.952 2021.24 cv
864.406 2021.24 875.312 2034.25 875.312 2050.29 cv
cp
@
948.516 2073.09 mo
966.362 2088.37 li
971.49 2092.75 974.443 2099.17 974.443 2105.92 cv
974.443 2116.24 li
@
918.365 2073.09 mo
900.193 2088.36 li
894.968 2092.75 891.951 2099.22 891.951 2106.05 cv
@
957.804 2050.29 mo
957.804 2066.33 946.898 2079.33 933.444 2079.33 cv
919.991 2079.33 909.085 2066.33 909.085 2050.29 cv
909.085 2034.25 919.991 2021.24 933.444 2021.24 cv
946.898 2021.24 957.804 2034.25 957.804 2050.29 cv
cp
@
933.444 2032.06 mo
931.787 2032.06 930.194 2032.51 928.711 2033.28 cv
933.794 2035.93 937.516 2042.64 937.516 2050.29 cv
937.516 2057.93 933.794 2064.64 928.711 2067.29 cv
930.194 2068.07 931.787 2068.51 933.444 2068.51 cv
940.783 2068.51 946.984 2060.16 946.984 2050.29 cv
946.984 2040.41 940.783 2032.06 933.444 2032.06 cv
cp
.541176 .627451 .698039 rgb
f
1017.47 2032.06 mo
1015.81 2032.06 1014.22 2032.51 1012.74 2033.28 cv
1017.82 2035.93 1021.54 2042.64 1021.54 2050.29 cv
1021.54 2057.93 1017.82 2064.64 1012.74 2067.29 cv
1014.22 2068.07 1015.81 2068.51 1017.47 2068.51 cv
1024.81 2068.51 1031.01 2060.16 1031.01 2050.29 cv
1031.01 2040.41 1024.81 2032.06 1017.47 2032.06 cv
cp
f
853.054 2032.06 mo
851.396 2032.06 849.803 2032.51 848.32 2033.28 cv
853.404 2035.93 857.126 2042.64 857.126 2050.29 cv
857.126 2057.93 853.404 2064.64 848.32 2067.29 cv
849.803 2068.07 851.396 2068.51 853.054 2068.51 cv
860.393 2068.51 866.593 2060.16 866.593 2050.29 cv
866.593 2040.41 860.393 2032.06 853.054 2032.06 cv
cp
f
1031.01 2073.09 mo
1048.85 2088.37 li
1053.98 2092.75 1056.94 2099.17 1056.94 2105.92 cv
1056.94 2116.24 li
.203922 .254902 .329412 rgb
@
1000.86 2073.09 mo
982.686 2088.36 li
977.46 2092.75 974.443 2099.22 974.443 2106.05 cv
@
1040.3 2050.29 mo
1040.3 2066.33 1029.39 2079.33 1015.94 2079.33 cv
1002.48 2079.33 991.578 2066.33 991.578 2050.29 cv
991.578 2034.25 1002.48 2021.24 1015.94 2021.24 cv
1029.39 2021.24 1040.3 2034.25 1040.3 2050.29 cv
cp
@
848.32 2005.08 mo
848.32 1917.54 li
848.32 1910.55 853.982 1904.89 860.966 1904.89 cv
1005.43 1904.89 li
1012.41 1904.89 1018.07 1910.55 1018.07 1917.54 cv
1018.07 2005.08 li
@
877.404 1986.85 mo
913.764 1950.49 li
943.22 1979.94 li
988.443 1934.72 li
@
945.15 1711.08 mo
1043.38 1711.08 li
1043.38 1568.58 li
867.973 1568.58 li
867.973 1599.45 li
@
962.838 1711.08 mo
962.838 1747.02 li
934.587 1778.91 li
@
962.838 1747.02 mo
989.512 1778.91 li
@
835.436 1713.05 mo
822.717 1713.05 li
812.28 1687.48 li
811.715 1686.09 812.734 1684.58 814.23 1684.58 cv
921.717 1684.58 li
923.213 1684.58 924.232 1686.09 923.666 1687.48 cv
913.23 1713.05 li
900.511 1713.05 li
@
900.511 1778.91 mo
900.511 1702.85 li
900.511 1702.07 899.872 1701.43 899.083 1701.43 cv
836.863 1701.43 li
836.074 1701.43 835.435 1702.07 835.435 1702.85 cv
835.435 1778.91 li
@
881.647 1646.07 mo
897.576 1659.7 li
902.154 1663.61 904.789 1669.34 904.789 1675.36 cv
904.789 1684.58 li
@
854.735 1646.07 mo
838.515 1659.69 li
833.85 1663.61 831.157 1669.39 831.157 1675.48 cv
831.157 1684.58 li
@
889.937 1625.71 mo
889.937 1640.02 880.203 1651.63 868.194 1651.63 cv
856.186 1651.63 846.452 1640.02 846.452 1625.71 cv
846.452 1611.39 856.186 1599.78 868.194 1599.78 cv
880.203 1599.78 889.937 1611.39 889.937 1625.71 cv
cp
@
868.194 1640.81 mo
862.274 1640.81 857.271 1633.89 857.271 1625.71 cv
857.271 1617.52 862.274 1610.6 868.194 1610.6 cv
874.116 1610.6 879.118 1617.52 879.118 1625.71 cv
879.118 1633.89 874.116 1640.81 868.194 1640.81 cv
cp
1 .427451 .231373 rgb
f
929.371 1655.47 mo
961.306 1623.53 li
980.988 1643.21 li
1016.39 1607.81 li
.203922 .254902 .329412 rgb
@
1680.98 1929.87 mo
1680.98 2050.93 li
1586.51 2050.93 li
@
1516.96 1964.18 mo
1516.96 1929.87 li
@
1515.17 1929.87 mo
1682.77 1929.87 li
1691.91 1929.87 1699.31 1922.47 1699.31 1913.33 cv
1699.31 1906.31 li
1498.63 1906.31 li
1498.63 1913.33 li
1498.63 1922.47 1506.03 1929.87 1515.17 1929.87 cv
cp
@
1484.42 2077.45 mo
1471.7 2077.45 li
1461.26 2051.88 li
1460.7 2050.49 1461.72 2048.97 1463.21 2048.97 cv
1570.7 2048.97 li
1572.2 2048.97 1573.22 2050.49 1572.65 2051.88 cv
1562.21 2077.45 li
1549.5 2077.45 li
@
1549.5 2111.67 mo
1549.5 2067.25 li
1549.5 2066.46 1548.86 2065.82 1548.07 2065.82 cv
1485.85 2065.82 li
1485.06 2065.82 1484.42 2066.46 1484.42 2067.25 cv
1484.42 2111.67 li
@
1530.63 2010.46 mo
1546.56 2024.09 li
1551.14 2028.01 1553.77 2033.74 1553.77 2039.76 cv
1553.77 2048.98 li
@
1503.72 2010.46 mo
1487.5 2024.09 li
1482.83 2028 1480.14 2033.78 1480.14 2039.88 cv
1480.14 2048.98 li
@
1538.92 1990.11 mo
1538.92 2004.42 1529.19 2016.03 1517.18 2016.03 cv
1505.17 2016.03 1495.44 2004.42 1495.44 1990.11 cv
1495.44 1975.79 1505.17 1964.18 1517.18 1964.18 cv
1529.19 1964.18 1538.92 1975.79 1538.92 1990.11 cv
cp
@
1517.18 2005.21 mo
1511.26 2005.21 1506.26 1998.29 1506.26 1990.11 cv
1506.26 1981.92 1511.26 1975 1517.18 1975 cv
1523.1 1975 1528.1 1981.92 1528.1 1990.11 cv
1528.1 1998.29 1523.1 2005.21 1517.18 2005.21 cv
cp
.541176 .627451 .698039 rgb
f
1560.47 2007.53 mo
1593.68 1974.32 li
1618.17 1998.81 li
1661 1955.98 li
.203922 .254902 .329412 rgb
@
506.583 1343.39 mo
506.583 1236.05 li
506.583 1228.81 512.457 1222.93 519.702 1222.93 cv
669.561 1222.93 li
676.806 1222.93 682.679 1228.81 682.679 1236.05 cv
682.679 1343.39 li
@
647.542 1259.17 mo
647.542 1269.92 640.426 1278.63 631.648 1278.63 cv
622.87 1278.63 615.753 1269.92 615.753 1259.17 cv
615.753 1248.42 622.87 1239.7 631.648 1239.7 cv
640.426 1239.7 647.542 1248.42 647.542 1259.17 cv
cp
@
667.255 1304.14 mo
655.837 1293.58 li
648.431 1286.95 li
@
650.548 1343.39 mo
650.548 1311.72 li
650.503 1305.64 li
666.259 1319.59 li
@
616.742 1286.91 mo
596.108 1270.36 li
593.412 1268.2 589.377 1268.28 587.077 1270.86 cv
584.623 1273.61 585.001 1277.82 587.839 1280.09 cv
606.996 1295.46 li
610.32 1298.13 612.254 1302.16 612.254 1306.42 cv
612.254 1343.39 li
@
539.806 1401.45 mo
554.371 1413.92 li
558.557 1417.5 560.967 1422.73 560.967 1428.24 cv
560.967 1436.67 li
@
515.197 1401.45 mo
500.365 1413.91 li
496.1 1417.49 493.638 1422.78 493.638 1428.35 cv
493.638 1436.67 li
@
547.386 1382.84 mo
547.386 1395.93 538.485 1406.54 527.504 1406.54 cv
516.524 1406.54 507.623 1395.93 507.623 1382.84 cv
507.623 1369.74 516.524 1359.13 527.504 1359.13 cv
538.485 1359.13 547.386 1369.74 547.386 1382.84 cv
cp
@
527.505 1395.72 mo
522.592 1395.72 518.443 1389.82 518.443 1382.84 cv
518.443 1375.85 522.592 1369.95 527.505 1369.95 cv
532.416 1369.95 536.566 1375.85 536.566 1382.84 cv
536.566 1389.82 532.416 1395.72 527.505 1395.72 cv
cp
1 .427451 .231373 rgb
f
607.135 1401.45 mo
621.7 1413.92 li
625.886 1417.5 628.296 1422.73 628.296 1428.24 cv
628.296 1436.67 li
.203922 .254902 .329412 rgb
@
582.526 1401.45 mo
567.694 1413.91 li
563.429 1417.49 560.967 1422.78 560.967 1428.35 cv
@
614.715 1382.84 mo
614.715 1395.93 605.814 1406.54 594.833 1406.54 cv
583.853 1406.54 574.952 1395.93 574.952 1382.84 cv
574.952 1369.74 583.853 1359.13 594.833 1359.13 cv
605.814 1359.13 614.715 1369.74 614.715 1382.84 cv
cp
@
594.834 1395.72 mo
589.921 1395.72 585.771 1389.82 585.771 1382.84 cv
585.771 1375.85 589.921 1369.95 594.834 1369.95 cv
599.745 1369.95 603.895 1375.85 603.895 1382.84 cv
603.895 1389.82 599.745 1395.72 594.834 1395.72 cv
cp
1 .427451 .231373 rgb
f
674.464 1401.45 mo
689.029 1413.92 li
693.215 1417.5 695.625 1422.73 695.625 1428.24 cv
695.625 1436.67 li
.203922 .254902 .329412 rgb
@
649.855 1401.45 mo
635.023 1413.91 li
630.758 1417.49 628.296 1422.78 628.296 1428.35 cv
@
682.044 1382.84 mo
682.044 1395.93 673.143 1406.54 662.162 1406.54 cv
651.182 1406.54 642.281 1395.93 642.281 1382.84 cv
642.281 1369.74 651.182 1359.13 662.162 1359.13 cv
673.143 1359.13 682.044 1369.74 682.044 1382.84 cv
cp
@
662.163 1395.72 mo
657.25 1395.72 653.1 1389.82 653.1 1382.84 cv
653.1 1375.85 657.25 1369.95 662.163 1369.95 cv
667.075 1369.95 671.225 1375.85 671.225 1382.84 cv
671.225 1389.82 667.075 1395.72 662.163 1395.72 cv
cp
@
662.163 1395.72 mo
657.25 1395.72 653.1 1389.82 653.1 1382.84 cv
653.1 1375.85 657.25 1369.95 662.163 1369.95 cv
667.075 1369.95 671.225 1375.85 671.225 1382.84 cv
671.225 1389.82 667.075 1395.72 662.163 1395.72 cv
cp
1 .427451 .231373 rgb
f
566.859 1343.39 mo
566.859 1268.83 li
547.699 1268.83 li
547.699 1343.39 li
.203922 .254902 .329412 rgb
@
566.859 1311.16 mo
586.695 1311.16 li
586.695 1343.39 li
@
547.699 1294.03 mo
525.722 1294.03 li
525.722 1343.39 li
@
711.039 1975.36 mo
711.039 1951.43 691.633 1932.02 667.694 1932.02 cv
643.757 1932.02 624.352 1951.43 624.352 1975.36 cv
624.352 1999.3 643.757 2018.71 667.694 2018.71 cv
691.633 2018.71 711.039 1999.3 711.039 1975.36 cv
cp
@
658.644 1924.43 mo
658.644 1919.79 li
658.644 1914.79 662.696 1910.74 667.695 1910.74 cv
667.695 1910.74 li
672.693 1910.74 676.745 1914.79 676.745 1919.79 cv
676.745 1924.43 li
@
699.163 1943.9 mo
711.637 1931.42 li
@
706.883 1926.67 mo
716.393 1936.18 li
@
637.085 1944.76 mo
624.351 1932.02 li
@
629.107 1927.27 mo
619.596 1936.78 li
@
690.551 1953.19 mo
690.551 1952.81 690.248 1952.51 689.874 1952.51 cv
689.5 1952.51 689.197 1952.81 689.197 1953.19 cv
689.197 1953.56 689.5 1953.86 689.874 1953.86 cv
690.248 1953.86 690.551 1953.56 690.551 1953.19 cv
cp
@
700.517 1975.36 mo
700.517 1974.99 700.214 1974.69 699.84 1974.69 cv
699.466 1974.69 699.163 1974.99 699.163 1975.36 cv
699.163 1975.74 699.466 1976.04 699.84 1976.04 cv
700.214 1976.04 700.517 1975.74 700.517 1975.36 cv
cp
@
690.551 1997.55 mo
690.551 1997.17 690.248 1996.87 689.874 1996.87 cv
689.5 1996.87 689.197 1997.17 689.197 1997.55 cv
689.197 1997.92 689.5 1998.22 689.874 1998.22 cv
690.248 1998.22 690.551 1997.92 690.551 1997.55 cv
cp
@
644.839 1953.19 mo
644.839 1952.81 645.142 1952.51 645.516 1952.51 cv
645.89 1952.51 646.193 1952.81 646.193 1953.19 cv
646.193 1953.56 645.89 1953.86 645.516 1953.86 cv
645.142 1953.86 644.839 1953.56 644.839 1953.19 cv
cp
@
634.873 1975.36 mo
634.873 1974.99 635.176 1974.69 635.551 1974.69 cv
635.924 1974.69 636.227 1974.99 636.227 1975.36 cv
636.227 1975.74 635.924 1976.04 635.551 1976.04 cv
635.176 1976.04 634.873 1975.74 634.873 1975.36 cv
cp
@
644.839 1997.55 mo
644.839 1997.17 645.142 1996.87 645.516 1996.87 cv
645.89 1996.87 646.193 1997.17 646.193 1997.55 cv
646.193 1997.92 645.89 1998.22 645.516 1998.22 cv
645.142 1998.22 644.839 1997.92 644.839 1997.55 cv
cp
@
668.371 2007.51 mo
668.371 2007.14 668.068 2006.83 667.694 2006.83 cv
667.32 2006.83 667.017 2007.14 667.017 2007.51 cv
667.017 2007.88 667.32 2008.19 667.694 2008.19 cv
668.068 2008.19 668.371 2007.88 668.371 2007.51 cv
cp
@
668.371 1943.22 mo
668.371 1942.85 668.068 1942.54 667.694 1942.54 cv
667.32 1942.54 667.017 1942.85 667.017 1943.22 cv
667.017 1943.59 667.32 1943.9 667.694 1943.9 cv
668.068 1943.9 668.371 1943.59 668.371 1943.22 cv
cp
@
667.694 1975.36 mo
667.694 1958.55 li
@
585.193 2007.42 mo
617.501 2035.07 li
626.785 2043.01 632.13 2054.62 632.13 2066.84 cv
632.13 2085.53 li
@
530.608 2007.42 mo
497.71 2035.05 li
488.25 2043 482.787 2054.72 482.787 2067.07 cv
482.787 2085.53 li
@
602.007 1966.13 mo
602.007 1995.17 582.263 2018.71 557.907 2018.71 cv
533.552 2018.71 513.808 1995.17 513.808 1966.13 cv
513.808 1937.09 533.552 1913.55 557.907 1913.55 cv
582.263 1913.55 602.007 1937.09 602.007 1966.13 cv
cp
@
557.907 1924.37 mo
554.497 1924.37 551.206 1925.02 548.107 1926.22 cv
561.689 1931.48 571.587 1947.38 571.587 1966.13 cv
571.587 1984.88 561.689 2000.78 548.107 2006.04 cv
551.206 2007.24 554.497 2007.89 557.907 2007.89 cv
576.258 2007.89 591.188 1989.16 591.188 1966.13 cv
591.188 1943.1 576.258 1924.37 557.907 1924.37 cv
cp
1 .427451 .231373 rgb
f
548.107 2031.51 mo
538.307 2087.57 li
557.907 2110.19 li
557.907 2110.19 li
557.907 2110.19 li
557.907 2110.19 li
557.907 2110.19 li
577.507 2087.57 li
567.707 2031.51 li
.203922 .254902 .329412 rgb
@
1299.51 983.857 mo
1299.51 986.598 li
1299.51 995.943 1307.08 1003.52 1316.42 1003.52 cv
1323.67 1003.52 li
1333.01 1003.52 1340.59 995.943 1340.59 986.598 cv
1340.59 983.857 li
1340.35 974.552 li
1340.35 974.413 li
1340.35 968.613 1342.59 963.005 1346.71 958.923 cv
1353.63 952.063 1357.92 942.553 1357.92 932.036 cv
1357.92 910.229 1339.49 892.727 1317.36 894.254 cv
1298.88 895.529 1283.82 910.366 1282.3 928.828 cv
1281.35 940.438 1285.64 951.058 1293.05 958.591 cv
1297.24 962.84 1299.75 968.454 1299.75 974.417 cv
1299.75 974.552 li
1320.05 974.552 li
@
1310.51 1003.87 mo
1310.51 1007.23 li
1310.51 1012.49 1314.78 1016.77 1320.05 1016.77 cv
1320.05 1016.77 li
1325.31 1016.77 1329.59 1012.49 1329.59 1007.23 cv
1329.59 1003.84 li
@
1320.05 885.289 mo
1320.05 876.599 li
@
1304.05 888.455 mo
1301.08 880.288 li
@
1290.1 896.901 mo
1284.51 890.244 li
@
1279.88 909.609 mo
1272.35 905.264 li
@
1336.04 888.455 mo
1339.01 880.288 li
@
1349.99 896.901 mo
1355.58 890.244 li
@
1360.21 909.609 mo
1367.74 905.264 li
@
1341.66 948.255 mo
1345.17 943.598 1347.1 937.975 1347.1 932.037 cv
1347.1 924.455 1344.04 917.429 1338.5 912.252 cv
1333.43 907.525 1326.94 904.98 1320.05 904.98 cv
1319.4 904.98 1318.76 905.003 1318.1 905.047 cv
1306.05 905.88 1296.04 914.837 1293.59 926.428 cv
1298.48 923.312 1304.28 921.481 1310.51 921.481 cv
1326.3 921.481 1339.35 933.103 1341.66 948.255 cv
cp
.541176 .627451 .698039 rgb
f
1261.18 1034.05 mo
1291.24 1059.78 li
1299.88 1067.17 1304.86 1077.97 1304.86 1089.35 cv
1304.86 1106.74 li
.203922 .254902 .329412 rgb
@
1210.37 1034.05 mo
1179.76 1059.76 li
1170.95 1067.16 1165.87 1078.07 1165.87 1089.56 cv
1165.87 1106.74 li
@
1276.82 995.618 mo
1276.82 1022.64 1258.45 1044.55 1235.78 1044.55 cv
1213.11 1044.55 1194.74 1022.64 1194.74 995.618 cv
1194.74 968.591 1213.11 946.682 1235.78 946.682 cv
1258.45 946.682 1276.82 968.591 1276.82 995.618 cv
cp
@
1226.66 1056.46 mo
1217.54 1108.64 li
1235.78 1129.69 li
1235.78 1129.69 li
1235.78 1129.69 li
1235.78 1129.69 li
1235.78 1129.69 li
1254.02 1108.64 li
1244.9 1056.46 li
@
653.118 1088.85 mo
506.201 1088.85 li
499.326 1088.85 493.754 1083.28 493.754 1076.4 cv
493.754 915.906 li
493.754 909.031 499.326 903.458 506.201 903.458 cv
708.068 903.458 li
714.943 903.458 720.516 909.031 720.516 915.906 cv
720.516 1046.69 li
@
524.232 927.952 mo
524.232 926.774 523.277 925.819 522.099 925.819 cv
520.921 925.819 519.966 926.774 519.966 927.952 cv
519.966 929.13 520.921 930.085 522.099 930.085 cv
523.277 930.085 524.232 929.13 524.232 927.952 cv
cp
@
548.553 927.952 mo
548.553 926.774 547.598 925.819 546.42 925.819 cv
545.242 925.819 544.287 926.774 544.287 927.952 cv
544.287 929.13 545.242 930.085 546.42 930.085 cv
547.598 930.085 548.553 929.13 548.553 927.952 cv
cp
@
572.875 927.952 mo
572.875 926.774 571.92 925.819 570.742 925.819 cv
569.564 925.819 568.609 926.774 568.609 927.952 cv
568.609 929.13 569.564 930.085 570.742 930.085 cv
571.92 930.085 572.875 929.13 572.875 927.952 cv
cp
@
493.754 952.933 mo
720.516 952.933 li
@
515.538 1064.23 mo
515.538 1073.57 li
@
526.893 1064.23 mo
526.893 1073.57 li
@
542.79 1068.9 mo
646.873 1068.9 li
@
705.439 1079.02 mo
720.516 1063.95 li
656.129 1046.69 li
673.381 1111.08 li
688.458 1096 li
@
700.931 1091.5 mo
719.766 1110.33 li
@
620.304 1014.16 mo
635.646 1027.29 li
640.054 1031.06 642.592 1036.57 642.592 1042.38 cv
642.592 1051.25 li
@
594.385 1014.16 mo
578.764 1027.28 li
574.272 1031.05 571.678 1036.62 571.678 1042.49 cv
571.678 1051.25 li
@
628.288 994.555 mo
628.288 1008.34 618.913 1019.52 607.348 1019.52 cv
595.783 1019.52 586.408 1008.34 586.408 994.555 cv
586.408 980.766 595.783 969.587 607.348 969.587 cv
618.913 969.587 628.288 980.766 628.288 994.555 cv
cp
@
607.348 1008.7 mo
601.863 1008.7 597.228 1002.22 597.228 994.555 cv
597.228 986.886 601.863 980.407 607.348 980.407 cv
612.834 980.407 617.469 986.886 617.469 994.555 cv
617.469 1002.22 612.834 1008.7 607.348 1008.7 cv
cp
.541176 .627451 .698039 rgb
f
182.282 734.981 mo
169.745 734.981 li
159.459 709.779 li
158.902 708.415 159.906 706.919 161.38 706.919 cv
359.29 706.919 li
360.765 706.919 361.769 708.415 361.212 709.779 cv
350.926 734.981 li
338.39 734.981 li
.203922 .254902 .329412 rgb
@
338.39 787.668 mo
338.39 724.936 li
338.39 724.157 337.761 723.529 336.982 723.529 cv
183.688 723.529 li
182.912 723.529 182.281 724.157 182.281 724.936 cv
182.281 787.668 li
@
260.687 706.919 mo
260.687 685.089 li
@
267.918 685.089 mo
252.753 685.089 li
250.792 685.089 249.203 683.499 249.203 681.539 cv
249.203 663.432 li
249.203 661.472 250.792 659.882 252.753 659.882 cv
267.918 659.882 li
269.878 659.882 271.468 661.472 271.468 663.432 cv
271.468 681.538 li
271.468 683.499 269.878 685.089 267.918 685.089 cv
cp
@
193.1 734.349 mo
193.1 752.09 li
327.572 752.09 li
327.572 734.349 li
193.1 734.349 li
cp
.541176 .627451 .698039 rgb
f
286.147 634.224 mo
316.215 659.954 li
324.856 667.348 329.831 678.151 329.831 689.524 cv
329.831 706.919 li
.203922 .254902 .329412 rgb
@
235.346 634.224 mo
204.728 659.94 li
195.924 667.334 190.84 678.243 190.84 689.741 cv
190.84 706.919 li
@
301.796 595.795 mo
301.796 622.821 283.42 644.73 260.753 644.73 cv
238.086 644.73 219.711 622.821 219.711 595.795 cv
219.711 568.768 238.086 546.859 260.753 546.859 cv
283.42 546.859 301.796 568.768 301.796 595.795 cv
cp
@
351.309 1104.25 mo
370.367 1040.15 li
372.454 1033.13 367.193 1026.07 359.865 1026.07 cv
271.456 1026.07 li
183.046 1026.07 li
175.719 1026.07 170.458 1033.13 172.545 1040.15 cv
191.603 1104.25 li
271.81 1104.25 li
@
178.136 1090.82 mo
167.98 1109.96 li
165.022 1115.53 169.061 1122.25 175.371 1122.25 cv
271.456 1122.25 li
367.541 1122.25 li
373.851 1122.25 377.89 1115.53 374.932 1109.96 cv
364.776 1090.82 li
@
225.518 908.744 mo
225.518 883.373 246.086 862.805 271.458 862.805 cv
296.829 862.805 317.397 883.373 317.397 908.744 cv
@
300.81 908.464 mo
316.506 908.464 li
322.345 908.464 327.079 913.198 327.079 919.037 cv
327.079 924.734 li
327.079 930.573 322.345 935.306 316.506 935.306 cv
307.008 935.306 li
@
241.624 908.464 mo
226.406 908.464 li
220.566 908.464 215.833 913.198 215.833 919.037 cv
215.833 924.734 li
215.833 930.573 220.566 935.306 226.406 935.306 cv
236.583 935.306 li
@
183.046 1036.89 mo
187.664 1053.03 li
355.25 1053.03 li
359.996 1037.07 li
359.922 1036.9 li
271.455 1036.89 li
183.046 1036.89 li
cp
1 .427451 .231373 rgb
f
293.613 966.392 mo
319.424 988.479 li
326.841 994.826 331.111 1004.1 331.111 1013.86 cv
331.111 1026.07 li
.203922 .254902 .329412 rgb
@
250.005 966.392 mo
223.722 988.467 li
216.165 994.815 211.801 1004.18 211.801 1014.05 cv
211.801 1026.07 li
@
307.046 933.405 mo
307.046 956.604 291.272 975.411 271.814 975.411 cv
252.357 975.411 236.583 956.604 236.583 933.405 cv
236.583 910.205 252.357 891.398 271.814 891.398 cv
291.272 891.398 307.046 910.205 307.046 933.405 cv
cp
@
1215.26 1610.55 mo
1219.02 1615.5 1224.97 1618.71 1231.67 1618.71 cv
1243.02 1618.71 1252.23 1609.5 1252.23 1598.14 cv
1252.23 1586.79 1243.02 1577.58 1231.67 1577.58 cv
@
1222.68 1565.61 mo
1209.1 1569.36 1198.8 1581.42 1197.98 1596.27 cv
1197.72 1600.89 1198.4 1605.34 1199.86 1609.45 cv
@
1233.24 1598.14 mo
1233.24 1599.01 1232.54 1599.72 1231.67 1599.72 cv
1230.79 1599.72 1230.09 1599.01 1230.09 1598.14 cv
1230.09 1597.27 1230.79 1596.57 1231.67 1596.57 cv
1232.54 1596.57 1233.24 1597.27 1233.24 1598.14 cv
cp
@
1231.67 1559.39 mo
1231.67 1598.14 li
1201.06 1621.3 li
@
1242.01 1657.21 mo
1238.65 1657.8 1235.19 1658.1 1231.67 1658.1 cv
1198.55 1658.1 1171.71 1631.26 1171.71 1598.14 cv
1171.71 1565.03 1198.55 1538.18 1231.67 1538.18 cv
1264.78 1538.18 1291.63 1565.03 1291.63 1598.14 cv
1291.63 1600.83 1291.45 1603.48 1291.11 1606.07 cv
@
1171.71 1598.14 mo
1179.82 1598.14 li
@
1231.67 1538.18 mo
1231.67 1546.3 li
@
1318.22 1705.27 mo
1348.28 1731 li
1356.93 1738.39 1361.9 1749.2 1361.9 1760.57 cv
1361.9 1777.96 li
@
1267.41 1705.27 mo
1236.8 1730.98 li
1227.99 1738.38 1222.91 1749.29 1222.91 1760.79 cv
1222.91 1777.96 li
@
1333.86 1666.84 mo
1333.86 1693.86 1315.49 1715.77 1292.82 1715.77 cv
1270.15 1715.77 1251.78 1693.86 1251.78 1666.84 cv
1251.78 1639.81 1270.15 1617.9 1292.82 1617.9 cv
1315.49 1617.9 1333.86 1639.81 1333.86 1666.84 cv
cp
@
1292.82 1628.72 mo
1289.64 1628.72 1286.58 1629.35 1283.7 1630.51 cv
1295.92 1635.4 1304.8 1649.83 1304.8 1666.84 cv
1304.8 1683.85 1295.92 1698.28 1283.7 1703.17 cv
1286.58 1704.32 1289.64 1704.95 1292.82 1704.95 cv
1309.49 1704.95 1323.04 1687.86 1323.04 1666.84 cv
1323.04 1645.82 1309.49 1628.72 1292.82 1628.72 cv
cp
.541176 .627451 .698039 rgb
f
1283.7 1727.69 mo
1274.58 1779.86 li
1292.82 1800.91 li
1292.82 1800.91 li
1292.82 1800.91 li
1292.82 1800.91 li
1292.82 1800.91 li
1311.06 1779.86 li
1301.94 1727.69 li
.203922 .254902 .329412 rgb
@
1628.8 972.59 mo
1663.55 1002.33 li
1673.54 1010.87 1679.28 1023.36 1679.28 1036.5 cv
1679.28 1056.6 li
1654.04 1056.6 li
@
1570.09 972.59 mo
1534.71 1002.31 li
1524.53 1010.86 1518.66 1023.46 1518.66 1036.75 cv
1518.66 1056.6 li
1544.37 1056.6 li
@
1646.88 928.179 mo
1646.88 959.413 1625.65 984.732 1599.45 984.732 cv
1573.26 984.732 1552.02 959.413 1552.02 928.179 cv
1552.02 896.945 1573.26 871.626 1599.45 871.626 cv
1625.65 871.626 1646.88 896.945 1646.88 928.179 cv
cp
@
1599.45 882.445 mo
1596.26 882.445 1593.17 882.96 1590.22 883.921 cv
1605.95 889.046 1617.6 906.944 1617.6 928.179 cv
1617.6 949.413 1605.95 967.311 1590.22 972.436 cv
1593.17 973.398 1596.26 973.912 1599.45 973.912 cv
1619.64 973.912 1636.07 953.396 1636.07 928.179 cv
1636.07 902.961 1619.64 882.445 1599.45 882.445 cv
cp
1 .427451 .231373 rgb
f
1599.45 1056.6 mo
1654.04 1031.19 li
1654.04 1093.28 li
1599.45 1118.69 li
1599.45 1056.6 li
.203922 .254902 .329412 rgb
@
1599.45 1056.6 mo
1544.86 1031.19 li
1544.86 1093.28 li
1599.45 1118.69 li
@
1145.54 146.274 mo
1143.05 146.274 1141.04 144.265 1141.04 141.774 cv
1141.04 141.757 li
1141.04 139.267 1143.05 137.249 1145.54 137.249 cv
1148.03 137.249 1150.05 139.267 1150.05 141.757 cv
1150.05 144.247 1148.03 146.274 1145.54 146.274 cv
cp
1145.54 173.439 mo
1143.05 173.439 1141.04 171.43 1141.04 168.94 cv
1141.04 168.922 li
1141.04 166.432 1143.05 164.414 1145.54 164.414 cv
1148.03 164.414 1150.05 166.432 1150.05 168.922 cv
1150.05 171.412 1148.03 173.439 1145.54 173.439 cv
cp
1145.54 200.605 mo
1143.05 200.605 1141.04 198.595 1141.04 196.105 cv
1141.04 196.087 li
1141.04 193.597 1143.05 191.579 1145.54 191.579 cv
1148.03 191.579 1150.05 193.597 1150.05 196.087 cv
1150.05 198.577 1148.03 200.605 1145.54 200.605 cv
cp
1145.54 227.769 mo
1143.05 227.769 1141.04 225.761 1141.04 223.271 cv
1141.04 223.252 li
1141.04 220.762 1143.05 218.744 1145.54 218.744 cv
1148.03 218.744 1150.05 220.762 1150.05 223.252 cv
1150.05 225.742 1148.03 227.769 1145.54 227.769 cv
cp
1145.54 254.935 mo
1143.05 254.935 1141.04 252.925 1141.04 250.435 cv
1141.04 250.418 li
1141.04 247.928 1143.05 245.91 1145.54 245.91 cv
1148.03 245.91 1150.05 247.928 1150.05 250.418 cv
1150.05 252.908 1148.03 254.935 1145.54 254.935 cv
cp
1145.54 282.1 mo
1143.05 282.1 1141.04 280.091 1141.04 277.601 cv
1141.04 277.583 li
1141.04 275.093 1143.05 273.075 1145.54 273.075 cv
1148.03 273.075 1150.05 275.093 1150.05 277.583 cv
1150.05 280.073 1148.03 282.1 1145.54 282.1 cv
cp
1145.54 309.265 mo
1143.05 309.265 1141.04 307.256 1141.04 304.766 cv
1141.04 304.748 li
1141.04 302.257 1143.05 300.239 1145.54 300.239 cv
1148.03 300.239 1150.05 302.257 1150.05 304.748 cv
1150.05 307.238 1148.03 309.265 1145.54 309.265 cv
cp
1145.54 336.43 mo
1143.05 336.43 1141.04 334.421 1141.04 331.931 cv
1141.04 331.913 li
1141.04 329.423 1143.05 327.405 1145.54 327.405 cv
1148.03 327.405 1150.05 329.423 1150.05 331.913 cv
1150.05 334.403 1148.03 336.43 1145.54 336.43 cv
cp
1145.54 363.595 mo
1143.05 363.595 1141.04 361.586 1141.04 359.096 cv
1141.04 359.078 li
1141.04 356.588 1143.05 354.57 1145.54 354.57 cv
1148.03 354.57 1150.05 356.588 1150.05 359.078 cv
1150.05 361.568 1148.03 363.595 1145.54 363.595 cv
cp
1145.54 390.76 mo
1143.05 390.76 1141.04 388.752 1141.04 386.261 cv
1141.04 386.243 li
1141.04 383.753 1143.05 381.735 1145.54 381.735 cv
1148.03 381.735 1150.05 383.753 1150.05 386.243 cv
1150.05 388.733 1148.03 390.76 1145.54 390.76 cv
cp
f
1145.55 119.1 mo
1144.36 119.1 1143.21 118.613 1142.36 117.783 cv
1141.51 116.935 1141.04 115.781 1141.04 114.592 cv
1141.04 113.401 1141.51 112.247 1142.36 111.4 cv
1144.04 109.722 1147.06 109.722 1148.74 111.4 cv
1149.57 112.247 1150.06 113.401 1150.06 114.592 cv
1150.06 115.781 1149.57 116.935 1148.74 117.783 cv
1147.89 118.613 1146.72 119.1 1145.55 119.1 cv
cp
f
470.605 390.784 mo
445.411 390.784 li
445.411 255.168 li
470.605 255.168 li
470.605 390.784 li
cp
.407843 .470588 .521569 rgb
f
589.336 301.892 mo
589.037 297.842 588.07 294.194 586.432 290.948 cv
584.793 287.702 582.635 284.933 579.955 282.639 cv
577.275 280.347 574.133 278.59 570.53 277.369 cv
566.926 276.148 563.07 275.537 558.96 275.537 cv
553.123 275.537 547.882 276.564 543.237 278.619 cv
538.591 280.674 534.616 283.711 531.31 287.732 cv
528.005 291.752 525.473 296.71 523.716 302.607 cv
521.958 308.503 521.081 315.263 521.081 322.887 cv
521.081 330.511 521.974 337.27 523.761 343.166 cv
525.547 349.063 528.063 354.021 531.31 358.042 cv
534.556 362.062 538.486 365.13 543.103 367.243 cv
547.718 369.358 552.885 370.415 558.603 370.415 cv
562.95 370.415 566.926 369.805 570.53 368.583 cv
574.133 367.364 577.275 365.546 579.955 363.134 cv
582.635 360.722 584.779 357.773 586.388 354.289 cv
587.996 350.805 589.007 346.771 589.425 342.184 cv
615.244 342.184 li
614.53 350.284 612.637 357.476 609.571 363.759 cv
606.503 370.044 602.483 375.344 597.51 379.662 cv
592.536 383.981 586.774 387.271 580.223 389.534 cv
573.671 391.796 566.554 392.928 558.871 392.928 cv
549.103 392.928 540.303 391.276 532.472 387.97 cv
524.639 384.665 517.968 379.974 512.46 373.899 cv
506.949 367.824 502.706 360.469 499.728 351.832 cv
496.75 343.197 495.262 333.549 495.262 322.887 cv
495.262 312.226 496.765 302.578 499.773 293.941 cv
502.78 285.306 507.054 277.935 512.593 271.829 cv
518.133 265.725 524.817 261.02 532.651 257.714 cv
540.481 254.409 549.222 252.755 558.871 252.755 cv
566.197 252.755 573.105 253.932 579.597 256.284 cv
586.089 258.638 591.851 261.957 596.885 266.245 cv
601.917 270.534 606.056 275.702 609.303 281.746 cv
612.549 287.791 614.53 294.508 615.244 301.892 cv
589.336 301.892 li
cp
f
701.456 370.415 mo
707.232 370.415 712.548 369.329 717.403 367.154 cv
722.256 364.981 726.426 361.853 729.91 357.773 cv
733.395 353.695 736.104 348.721 738.04 342.854 cv
739.975 336.988 740.944 330.332 740.944 322.887 cv
740.944 315.382 739.961 308.697 737.995 302.83 cv
736.03 296.964 733.305 292.02 729.821 288 cv
726.336 283.98 722.196 280.913 717.403 278.798 cv
712.608 276.685 707.411 275.626 701.814 275.626 cv
696.096 275.626 690.809 276.699 685.956 278.843 cv
681.101 280.987 676.901 284.084 673.359 288.134 cv
669.814 292.185 667.061 297.143 665.095 303.008 cv
663.129 308.876 662.147 315.502 662.147 322.887 cv
662.147 330.332 663.129 336.988 665.095 342.854 cv
667.061 348.721 669.785 353.695 673.269 357.773 cv
676.753 361.853 680.893 364.981 685.688 367.154 cv
690.481 369.329 695.738 370.415 701.456 370.415 cv
cp
701.545 253.024 mo
711.015 253.024 719.74 254.691 727.722 258.027 cv
735.702 261.363 742.581 266.082 748.359 272.187 cv
754.135 278.292 758.647 285.647 761.894 294.253 cv
765.14 302.86 766.762 312.405 766.762 322.887 cv
766.762 333.25 765.169 342.72 761.983 351.296 cv
758.796 359.873 754.314 367.243 748.538 373.407 cv
742.76 379.572 735.88 384.367 727.9 387.791 cv
719.918 391.216 711.134 392.928 701.545 392.928 cv
691.955 392.928 683.171 391.231 675.19 387.836 cv
667.209 384.441 660.329 379.677 654.553 373.542 cv
648.775 367.408 644.293 360.038 641.107 351.43 cv
637.92 342.825 636.327 333.31 636.327 322.887 cv
636.327 312.344 637.95 302.771 641.197 294.164 cv
644.442 285.558 648.969 278.204 654.776 272.097 cv
660.583 265.993 667.476 261.287 675.458 257.982 cv
683.439 254.676 692.134 253.024 701.545 253.024 cv
cp
f
902.201 390.784 mo
878.347 390.784 li
817.865 300.105 li
817.865 390.784 li
793.475 390.784 li
793.475 255.168 li
817.418 255.168 li
877.633 346.025 li
877.633 255.168 li
902.201 255.168 li
902.201 390.784 li
cp
f
986.628 392.928 mo
976.919 392.928 968.447 391.662 961.211 389.131 cv
953.973 386.601 947.912 383.072 943.03 378.545 cv
938.145 374.019 934.438 368.614 931.908 362.33 cv
929.375 356.046 927.989 349.152 927.753 341.648 cv
952.321 341.648 li
952.737 346.472 953.913 350.657 955.85 354.2 cv
957.784 357.744 960.241 360.677 963.22 363 cv
966.198 365.323 969.607 367.035 973.45 368.137 cv
977.291 369.24 981.385 369.789 985.733 369.789 cv
989.843 369.789 993.596 369.374 996.991 368.539 cv
1000.38 367.705 1003.29 366.529 1005.7 365.01 cv
1008.11 363.491 1009.97 361.631 1011.29 359.426 cv
1012.59 357.224 1013.25 354.751 1013.25 352.011 cv
1013.25 349.212 1012.61 346.829 1011.33 344.864 cv
1010.05 342.899 1007.98 341.142 1005.12 339.593 cv
1002.26 338.044 998.509 336.63 993.864 335.349 cv
989.218 334.069 983.5 332.745 976.71 331.374 cv
968.966 329.647 962.296 327.637 956.699 325.343 cv
951.099 323.051 946.498 320.34 942.896 317.213 cv
939.292 314.087 936.627 310.484 934.9 306.404 cv
933.172 302.325 932.309 297.635 932.309 292.333 cv
932.309 286.615 933.5 281.359 935.882 276.564 cv
938.263 271.771 941.644 267.63 946.022 264.146 cv
950.4 260.662 955.627 257.937 961.702 255.972 cv
967.776 254.006 974.535 253.024 981.982 253.024 cv
989.724 253.024 996.796 254.082 1003.2 256.195 cv
1009.6 258.31 1015.13 261.347 1019.77 265.308 cv
1024.42 269.269 1028.06 274.123 1030.72 279.87 cv
1033.36 285.618 1034.78 292.124 1034.96 299.39 cv
1010.66 299.39 li
1008.87 283.966 999.55 276.251 982.695 276.251 cv
974.477 276.251 968.193 277.636 963.845 280.406 cv
959.497 283.176 957.324 286.973 957.324 291.797 cv
957.324 293.762 957.8 295.475 958.753 296.934 cv
959.705 298.394 961.223 299.734 963.31 300.954 cv
965.393 302.175 968.074 303.292 971.351 304.304 cv
974.625 305.318 978.587 306.3 983.232 307.252 cv
987.281 308.087 991.435 309.01 995.695 310.021 cv
999.953 311.035 1004.12 312.255 1008.2 313.684 cv
1012.28 315.114 1016.12 316.856 1019.73 318.911 cv
1023.33 320.966 1026.5 323.454 1029.24 326.371 cv
1031.98 329.29 1034.14 332.729 1035.72 336.689 cv
1037.3 340.651 1038.09 345.281 1038.09 350.582 cv
1038.09 356.835 1036.8 362.553 1034.25 367.735 cv
1031.68 372.916 1028.12 377.37 1023.57 381.091 cv
1019.01 384.814 1013.58 387.717 1007.26 389.802 cv
1000.95 391.886 994.071 392.928 986.628 392.928 cv
cp
f
456.562 123.328 mo
444.51 123.328 li
444.51 202.581 li
494.706 202.581 li
494.706 191.638 li
456.562 191.638 li
456.562 123.328 li
cp
1 .427451 .231373 rgb
f
512.26 202.581 mo
524.312 202.581 li
524.312 123.328 li
512.26 123.328 li
512.26 202.581 li
cp
f
597.074 182.069 mo
557.778 123.328 li
545.881 123.328 li
545.881 202.581 li
557.511 202.581 li
557.511 143.791 li
596.807 202.581 li
608.703 202.581 li
608.703 123.328 li
597.074 123.328 li
597.074 182.069 li
cp
f
641.796 191.638 mo
641.796 167.079 li
684.642 167.079 li
684.642 156.189 li
641.796 156.189 li
641.796 134.271 li
687.548 134.271 li
687.548 123.328 li
629.744 123.328 li
629.744 202.581 li
689.344 202.581 li
689.344 191.638 li
641.796 191.638 li
cp
f
283.605 168.674 mo
291.263 147.155 li
292.566 143.419 293.657 139.618 294.52 135.814 cv
295.6 139.384 297.018 143.611 298.752 148.43 cv
306.002 168.674 li
283.605 168.674 li
cp
288.727 123.028 mo
259.8 202.281 li
272.075 202.281 li
280.159 178.824 li
309.665 178.824 li
318.251 202.281 li
331.296 202.281 li
300.468 123.028 li
288.727 123.028 li
cp
f
324.831 133.971 mo
349.082 133.971 li
349.082 202.281 li
360.627 202.281 li
360.627 133.971 li
384.979 133.971 li
384.979 123.028 li
324.831 123.028 li
324.831 133.971 li
cp
f
252.378 191.338 mo
222.224 191.338 li
222.224 123.028 li
210.681 123.028 li
210.681 202.281 li
248.441 202.281 li
252.378 191.338 li
cp
f
160.315 133.971 mo
194.86 133.971 li
194.86 123.028 li
148.771 123.028 li
148.771 202.281 li
160.315 202.281 li
160.315 167.096 li
194.86 167.096 li
194.86 156.153 li
160.315 156.153 li
160.315 133.971 li
cp
f
234.976 329.012 mo
231.82 323.38 227.233 319.028 221.216 315.96 cv
225.345 312.776 228.412 308.985 230.419 304.59 cv
232.424 300.196 233.428 295.64 233.428 290.919 cv
233.428 285.669 232.483 280.848 230.596 276.452 cv
228.707 272.059 226.009 268.267 222.5 265.081 cv
218.99 261.897 214.771 259.419 209.847 257.649 cv
205.386 256.046 200.429 255.209 195.026 255.058 cv
170.541 255.058 li
150.341 255.058 li
150.341 275.257 li
150.341 288.469 li
170.541 288.469 li
170.541 275.257 li
195.026 275.257 li
195.026 275.303 li
199.274 275.525 202.599 276.816 204.98 279.195 cv
207.604 281.821 208.918 285.64 208.918 290.653 cv
208.918 302.157 202.576 307.909 189.894 307.909 cv
182.196 307.909 li
182.196 328.083 li
192.371 328.083 li
199.861 328.083 205.525 329.808 209.36 333.258 cv
213.194 336.71 215.111 341.739 215.111 348.345 cv
215.111 351.53 214.638 354.466 213.695 357.15 cv
212.751 359.834 211.395 362.135 209.625 364.051 cv
207.856 365.969 205.717 367.473 203.21 368.564 cv
200.702 369.656 197.915 370.2 194.849 370.2 cv
191.663 370.2 188.861 369.612 186.443 368.432 cv
184.023 367.253 181.974 365.644 180.293 363.609 cv
178.612 361.573 177.342 359.199 176.488 356.485 cv
175.632 353.773 175.205 350.911 175.205 347.903 cv
150.341 347.903 li
150.695 354.333 152.007 360.158 154.279 365.379 cv
156.549 370.599 159.632 375.067 163.525 378.784 cv
167.419 382.5 172.02 385.376 177.329 387.411 cv
182.638 389.447 188.478 390.464 194.849 390.464 cv
201.16 390.464 207.044 389.432 212.501 387.366 cv
217.957 385.303 222.706 382.397 226.747 378.65 cv
230.787 374.906 233.959 370.437 236.259 365.246 cv
238.559 360.056 239.71 354.333 239.71 348.08 cv
239.71 341.001 238.131 334.645 234.976 329.012 cv
cp
.541176 .627451 .698039 rgb
f
308.656 370.105 mo
311.914 370.105 314.774 369.305 317.234 367.705 cv
319.693 366.105 321.769 363.453 323.458 359.748 cv
325.147 356.045 326.42 351.155 327.281 345.079 cv
328.139 339.004 328.57 331.493 328.57 322.543 cv
328.57 313.594 328.139 306.067 327.281 299.962 cv
326.42 293.858 325.147 288.938 323.458 285.204 cv
321.769 281.47 319.693 278.789 317.234 277.158 cv
314.774 275.529 311.914 274.713 308.656 274.713 cv
305.455 274.713 302.639 275.513 300.209 277.114 cv
297.779 278.714 295.721 281.367 294.031 285.07 cv
292.342 288.775 291.067 293.68 290.209 299.784 cv
289.348 305.889 288.92 313.474 288.92 322.543 cv
288.92 331.552 289.348 339.094 290.209 345.168 cv
291.067 351.244 292.342 356.119 294.031 359.793 cv
295.721 363.468 297.779 366.105 300.209 367.705 cv
302.639 369.305 305.455 370.105 308.656 370.105 cv
cp
308.656 254.355 mo
338.407 254.355 353.284 277.084 353.284 322.543 cv
353.284 367.824 338.407 390.464 308.656 390.464 cv
279.02 390.464 264.204 367.824 264.204 322.543 cv
264.204 277.084 279.02 254.355 308.656 254.355 cv
cp
f
1323.82 171.816 mo
1323.82 210.661 li
1344.61 210.661 li
1350.03 210.661 1354.23 209.021 1357.19 205.74 cv
1360.15 202.46 1361.63 197.762 1361.63 191.645 cv
1361.63 185.726 1360.18 180.991 1357.3 177.439 cv
1354.41 173.887 1350.35 172.013 1345.13 171.816 cv
1344.31 171.816 li
1323.82 171.816 li
cp
1323.82 161.013 mo
1340.91 161.013 li
1345.74 160.865 1349.53 159.3 1352.27 156.315 cv
1355 153.331 1356.37 149.101 1356.37 143.626 cv
1356.37 137.706 1354.87 133.267 1351.86 130.307 cv
1348.85 127.348 1344.44 125.868 1338.62 125.868 cv
1323.82 125.868 li
1323.82 161.013 li
cp
1308.8 222.055 mo
1308.8 114.325 li
1338.62 114.325 li
1348.92 114.325 1356.98 116.743 1362.77 121.576 cv
1368.57 126.411 1371.47 133.662 1371.47 143.33 cv
1371.47 148.361 1370.21 152.825 1367.69 156.722 cv
1365.18 160.619 1361.67 163.48 1357.19 165.305 cv
1363.45 166.34 1368.27 169.313 1371.65 174.22 cv
1375.03 179.129 1376.72 184.912 1376.72 191.571 cv
1376.72 201.486 1373.87 209.045 1368.17 214.249 cv
1362.48 219.454 1354.62 222.055 1344.61 222.055 cv
1308.8 222.055 li
cp
f
1473.53 114.325 mo
1473.53 185.578 li
1473.53 197.515 1470.17 206.838 1463.46 213.546 cv
1456.75 220.255 1448.05 223.609 1437.34 223.609 cv
1426.84 223.609 1418.29 220.242 1411.71 213.509 cv
1405.12 206.776 1401.83 197.466 1401.83 185.578 cv
1401.83 114.325 li
1416.85 114.325 li
1416.85 185.578 li
1416.85 193.914 1418.74 200.438 1422.51 205.148 cv
1426.28 209.859 1431.23 212.214 1437.34 212.214 cv
1443.66 212.214 1448.75 209.872 1452.62 205.185 cv
1456.49 200.5 1458.43 193.964 1458.43 185.578 cv
1458.43 114.325 li
1473.53 114.325 li
cp
f
1552.5 194.975 mo
1552.5 190.042 1551.09 185.985 1548.28 182.803 cv
1545.47 179.622 1540.51 176.724 1533.41 174.109 cv
1523.3 170.953 1515.53 166.884 1510.1 161.901 cv
1504.68 156.919 1501.96 150.285 1501.96 141.998 cv
1501.96 133.514 1504.96 126.522 1510.95 121.022 cv
1516.95 115.522 1524.63 112.772 1534 112.772 cv
1543.97 112.772 1551.96 115.83 1557.98 121.946 cv
1563.99 128.063 1566.9 135.734 1566.71 144.957 cv
1566.56 145.401 li
1552.13 145.401 li
1552.13 139.088 1550.45 133.982 1547.1 130.085 cv
1543.74 126.189 1539.33 124.24 1533.85 124.24 cv
1528.53 124.24 1524.4 125.917 1521.46 129.271 cv
1518.53 132.626 1517.06 136.818 1517.06 141.85 cv
1517.06 146.536 1518.61 150.408 1521.72 153.466 cv
1524.83 156.525 1530.06 159.411 1537.41 162.123 cv
1547.22 165.33 1554.69 169.522 1559.82 174.701 cv
1564.95 179.881 1567.52 186.589 1567.52 194.827 cv
1567.52 203.607 1564.5 210.599 1558.46 215.803 cv
1552.41 221.007 1544.48 223.609 1534.67 223.609 cv
1525.2 223.609 1516.96 220.797 1509.96 215.174 cv
1502.95 209.551 1499.57 201.486 1499.82 190.979 cv
1499.97 190.535 li
1514.47 190.535 li
1514.47 197.836 1516.4 203.287 1520.28 206.887 cv
1524.15 210.488 1528.95 212.288 1534.67 212.288 cv
1540.24 212.288 1544.61 210.723 1547.76 207.59 cv
1550.92 204.458 1552.5 200.253 1552.5 194.975 cv
cp
f
1611.27 222.055 mo
1596.25 222.055 li
1596.25 114.325 li
1611.27 114.325 li
1611.27 222.055 li
cp
f
1716.15 222.055 mo
1701.05 222.055 li
1659.32 142.59 li
1658.88 142.738 li
1658.88 222.055 li
1643.86 222.055 li
1643.86 114.325 li
1658.88 114.325 li
1700.61 193.569 li
1701.05 193.495 li
1701.05 114.325 li
1716.15 114.325 li
1716.15 222.055 li
cp
f
1798.89 172.038 mo
1762.34 172.038 li
1762.34 210.661 li
1805.4 210.661 li
1805.4 222.055 li
1747.32 222.055 li
1747.32 114.325 li
1805.03 114.325 li
1805.03 125.868 li
1762.34 125.868 li
1762.34 160.569 li
1798.89 160.569 li
1798.89 172.038 li
cp
f
1880.23 194.975 mo
1880.23 190.042 1878.83 185.985 1876.02 182.803 cv
1873.21 179.622 1868.25 176.724 1861.15 174.109 cv
1851.03 170.953 1843.26 166.884 1837.84 161.901 cv
1832.41 156.919 1829.7 150.285 1829.7 141.998 cv
1829.7 133.514 1832.7 126.522 1838.69 121.022 cv
1844.68 115.522 1852.36 112.772 1861.74 112.772 cv
1871.7 112.772 1879.69 115.83 1885.71 121.946 cv
1891.73 128.063 1894.64 135.734 1894.44 144.957 cv
1894.29 145.401 li
1879.86 145.401 li
1879.86 139.088 1878.19 133.982 1874.83 130.085 cv
1871.48 126.189 1867.06 124.24 1861.59 124.24 cv
1856.26 124.24 1852.13 125.917 1849.2 129.271 cv
1846.26 132.626 1844.79 136.818 1844.79 141.85 cv
1844.79 146.536 1846.35 150.408 1849.45 153.466 cv
1852.56 156.525 1857.79 159.411 1865.14 162.123 cv
1874.96 165.33 1882.43 169.522 1887.56 174.701 cv
1892.69 179.881 1895.25 186.589 1895.25 194.827 cv
1895.25 203.607 1892.23 210.599 1886.19 215.803 cv
1880.15 221.007 1872.22 223.609 1862.4 223.609 cv
1852.93 223.609 1844.69 220.797 1837.69 215.174 cv
1830.69 209.551 1827.31 201.486 1827.55 190.979 cv
1827.7 190.535 li
1842.2 190.535 li
1842.2 197.836 1844.14 203.287 1848.01 206.887 cv
1851.88 210.488 1856.68 212.288 1862.4 212.288 cv
1867.98 212.288 1872.34 210.723 1875.5 207.59 cv
1878.66 204.458 1880.23 200.253 1880.23 194.975 cv
cp
f
1971.79 194.975 mo
1971.79 190.042 1970.38 185.985 1967.57 182.803 cv
1964.76 179.622 1959.8 176.724 1952.7 174.109 cv
1942.58 170.953 1934.82 166.884 1929.39 161.901 cv
1923.96 156.919 1921.25 150.285 1921.25 141.998 cv
1921.25 133.514 1924.25 126.522 1930.24 121.022 cv
1936.24 115.522 1943.92 112.772 1953.29 112.772 cv
1963.25 112.772 1971.24 115.83 1977.26 121.946 cv
1983.28 128.063 1986.19 135.734 1985.99 144.957 cv
1985.85 145.401 li
1971.42 145.401 li
1971.42 139.088 1969.74 133.982 1966.39 130.085 cv
1963.03 126.189 1958.62 124.24 1953.14 124.24 cv
1947.81 124.24 1943.68 125.917 1940.75 129.271 cv
1937.81 132.626 1936.35 136.818 1936.35 141.85 cv
1936.35 146.536 1937.9 150.408 1941.01 153.466 cv
1944.11 156.525 1949.34 159.411 1956.69 162.123 cv
1966.51 165.33 1973.98 169.522 1979.11 174.701 cv
1984.24 179.881 1986.81 186.589 1986.81 194.827 cv
1986.81 203.607 1983.79 210.599 1977.74 215.803 cv
1971.7 221.007 1963.77 223.609 1953.96 223.609 cv
1944.48 223.609 1936.25 220.797 1929.24 215.174 cv
1922.24 209.551 1918.86 201.486 1919.11 190.979 cv
1919.25 190.535 li
1933.76 190.535 li
1933.76 197.836 1935.69 203.287 1939.56 206.887 cv
1943.44 210.488 1948.23 212.288 1953.96 212.288 cv
1959.53 212.288 1963.89 210.723 1967.05 207.59 cv
1970.21 204.458 1971.79 200.253 1971.79 194.975 cv
cp
f
1390.89 295.187 mo
1362.33 295.187 li
1362.33 391.374 li
1347.23 391.374 li
1347.23 295.187 li
1318.9 295.187 li
1318.9 283.645 li
1390.89 283.645 li
1390.89 295.187 li
cp
1 .427451 .231373 rgb
f
1429.32 333.514 mo
1445.3 333.514 li
1451.51 333.514 1456.1 331.875 1459.06 328.594 cv
1462.02 325.314 1463.5 320.665 1463.5 314.647 cv
1463.5 308.481 1462.06 303.696 1459.17 300.293 cv
1456.29 296.889 1451.91 295.187 1446.04 295.187 cv
1429.32 295.187 li
1429.32 333.514 li
cp
1429.32 344.983 mo
1429.32 391.374 li
1414.3 391.374 li
1414.3 283.719 li
1446.04 283.719 li
1456.4 283.719 1464.4 286.358 1470.05 291.636 cv
1475.7 296.914 1478.52 304.486 1478.52 314.351 cv
1478.52 319.974 1477.2 324.894 1474.56 329.112 cv
1471.92 333.329 1468.14 336.597 1463.2 338.915 cv
1468.73 340.79 1472.71 343.898 1475.15 348.238 cv
1477.6 352.579 1478.82 357.956 1478.82 364.368 cv
1478.82 373.765 li
1478.82 377.07 1479.14 380.153 1479.78 383.014 cv
1480.42 385.875 1481.55 388.095 1483.18 389.673 cv
1483.18 391.374 li
1467.72 391.374 li
1466.04 389.747 1464.94 387.268 1464.43 383.938 cv
1463.91 380.609 1463.65 377.168 1463.65 373.617 cv
1463.65 364.516 li
1463.65 358.498 1462.25 353.739 1459.47 350.236 cv
1456.68 346.734 1452.82 344.983 1447.89 344.983 cv
1429.32 344.983 li
cp
f
1528.05 352.234 mo
1553.5 352.234 li
1541.07 308.432 li
1540.62 308.432 li
1528.05 352.234 li
cp
1556.83 364.146 mo
1524.64 364.146 li
1516.87 391.374 li
1501.26 391.374 li
1533.6 283.645 li
1548.17 283.645 li
1580.21 391.374 li
1564.6 391.374 li
1556.83 364.146 li
cp
f
1619.52 391.374 mo
1604.5 391.374 li
1604.5 283.645 li
1619.52 283.645 li
1619.52 391.374 li
cp
f
1724.4 391.374 mo
1709.3 391.374 li
1667.57 311.909 li
1667.13 312.057 li
1667.13 391.374 li
1652.11 391.374 li
1652.11 283.645 li
1667.13 283.645 li
1708.86 362.888 li
1709.3 362.814 li
1709.3 283.645 li
1724.4 283.645 li
1724.4 391.374 li
cp
f
1771.92 391.374 mo
1756.9 391.374 li
1756.9 283.645 li
1771.92 283.645 li
1771.92 391.374 li
cp
f
1876.79 391.374 mo
1861.7 391.374 li
1819.97 311.909 li
1819.53 312.057 li
1819.53 391.374 li
1804.51 391.374 li
1804.51 283.645 li
1819.53 283.645 li
1861.26 362.888 li
1861.7 362.814 li
1861.7 283.645 li
1876.79 283.645 li
1876.79 391.374 li
cp
f
1976.71 377.316 mo
1974.14 381.411 1970.06 385.036 1964.46 388.193 cv
1958.86 391.35 1951.65 392.928 1942.82 392.928 cv
1931.57 392.928 1922.51 389.5 1915.63 382.644 cv
1908.75 375.788 1905.31 366.021 1905.31 353.344 cv
1905.31 321.38 li
1905.31 308.901 1908.64 299.232 1915.3 292.376 cv
1921.95 285.52 1930.81 282.091 1941.86 282.091 cv
1952.76 282.091 1961.17 284.903 1967.09 290.526 cv
1973.01 296.149 1975.87 303.844 1975.67 313.611 cv
1975.52 314.055 li
1961.39 314.055 li
1961.39 307.593 1959.75 302.574 1956.47 298.998 cv
1953.19 295.422 1948.42 293.634 1942.15 293.634 cv
1935.4 293.634 1930.08 295.989 1926.21 300.7 cv
1922.34 305.411 1920.4 312.255 1920.4 321.232 cv
1920.4 353.344 li
1920.4 362.518 1922.41 369.51 1926.43 374.32 cv
1930.45 379.129 1935.91 381.534 1942.82 381.534 cv
1947.9 381.534 1951.96 380.745 1954.99 379.166 cv
1958.03 377.588 1960.23 375.664 1961.61 373.395 cv
1961.61 348.312 li
1941.78 348.312 li
1941.78 337.362 li
1976.71 337.362 li
1976.71 377.316 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.0.1
%%For: (\717\756\753\774\747\756\742\740\762\745\753\774) ()
%%Title: (Business Training \(Education\) Line Icons 04-01.eps)
%%CreationDate: 7/7/2019 4:29 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2N<de<Q`Y3YujB-Dg+:@ARP"<1i;!eC=XfnlsC3-ZTQE[LD:q<`+V-$?]NCQej1j7/X"3M]JEW`#fSPtH+=fg_lGWmoA$
%NIS.-Q7Yg,/aJGUV0#M^;Y7k6s-fF(=ZIn>\f5Bu:%NaMmA;ba2c@6Qqe=s>oi(q.a14[E;_-JSqoqU8ghL[_Wf:V+-+39T:f$Ho
%cKR9AeAlU;gA!apXVQe\oM&rP506m+ja<h+/$r5M>%=4N_B6O.d9"fuIV-*:Z<\^%@Cb3kq,-$_5'O5r<JMhJs"j]NMehN`>hf)6
%=pFrWUArqS>ZVaA[ILGTT>*"OS'8;cL-7(p'q0i"V,=.A<`2!W1JbbZjiV4i::2\9PDWPkO6qW8\l_Yn>liC5Y8j!acMqSK+7V;G
%$N\(.b?,1L=mo/]fgqM[98p3lT>MM#B]*PQbGJVcncQR<!'o[lP"a\Dj/Q-n?FI#C^A.2r>e@!Og1=k*QbKiRB\CC$[c[5`"Wu/:
%o1,*YUeMLSHp^R(:<N=eZss3rqD=FQ+7W8)=/Gih9'Tuu:b"CMb@I(/_odIb2%5+^f._"kXneP7Is]PAQCI@.Pr>?!0[(=@]A"a!
%X$jCpQ[H3VCnsmes-,*q$I/0_S$k_[g;1A'UhHsQhnA:(Fpc"-i,Ds3Z?K<O+#VpHI$]!!1B_,,b=W@$FHG$Iq1]W'J4lA-%n:+o
%OaWuLF;#)@@aXq,oCn]=o1FE7gnJMog_3o:8h&I,Y*&:n+5Cqk;uZHBJ)u=irH>eX%ku@iPDrjZF(smp6]AZ\05WO\=H40rROuu.
%BZF*lkOQ+0?heip7H[:;_LRh/%Jl_q8&p,Xl](\1GHtTCcnDksNR$'trN,P@^ZI>K`b@I+^0GJ5R^Bl,eDBF#qTD3?rekJ-?VEue
%@TrE-UPjV=9u(G'S$^41gVE8ViYRn2J"]@S>55^(E*K\h?0XKk03tM]/W?&:dB$JGM;Qajr7BlA8\QQ$6GbA?i/=QP@Qp0GX$q*9
%FWb-b,j<"'8O(\=Y*BWJD:X3%X,SWg0=jk5Jc0>W?>-52(]SIPqt)TTf/;ZI-nFAi.BrsL$U3Pb$('j>NJr^YgE.'QRC9pHX]"7^
%5l,I!,9&&G8i"mkV;B\?(K1jK!;]GD\rIHn'6c_!CmW:u8@9`]q=(]F/meINYsfIY2#;ZpI6i1i>VEMa3EPFIplMD0s4Tbc/Gou0
%Kbu8\`&7tQC?<*2\@SUQ;qYc\Fce_"1o`Jg8OMI^J4!%bY*KbU!A\u:]op)!(L)e5`+A;bq=8V^gOq*(/iW*CFg2W>LoFfPda/:S
%d_qqO?pdOa9^$s@Q11iDjZTT0>XRd$6d1cVS=qZpYu7'f$E<@m\mT3@_nQR),'PN7M1j46n(MKN>%uM28SlEn0U'J5XGVN?fdm_W
%'OB+IbdT%?)UTiU1\pMJ4V\hmgoDT%JFJkXfc%5$U"QR_X6%7VX`c^ehENPH?+SWp%lTW''E?l'pcu@t?3mE;"dhhmOg^Sq9\U*a
%K@XMQCT[*E:D5j;<iM9AOuhr/g1=]_lLF+AJ[H`#-<A_rP`/QuXr0tZlM*'%JUKlY[;%oZ09<KAF\Vf)nGO-U!,]5?:W&f'/+g:]
%]/srP)<.90Pp1UF6M'r-?`g3fs';\Vl'KR]Y@cn'dk6idYXApVc"<Z]:%=rU/N(^oDIK?4DV*Xj0C_R02_8&,jZGOZEsntFLX^&:
%4Po:'U"YX20$9INMtV[Eog2A0UDX1DQR3WA^FQ/S707:9]5]"C?k5qf$&uskN#@U<n-&O*>)s'7,RZL9Ett*m:GrQp';4iAHmiO6
%:WO[+!]rb?9M7Ip7q5RK,sVp!QBECFBd0k=BqBLhB.B3;dmAF>Or@cl@mS0QNCUZ\gFK]?^WK-dLt[)Y37St'm0Yr5UJP`G4%)N$
%i"g)k2YiNem*UW[(0]gIZi%-sXI;Q2FL<2,EnF]nO_^7eSSAcF,\WQAfF44T5&AN>eSt=tPgE7h4IksU]I9'A+AiabrFe&@mQ,0+
%R`4i`L^>BD-kSf+_e7m1'dO]!j^s)Amf]RW9ujnR2B'!(7Z2]+"P`%(B#3X!kQsArQ-W@/1XBq?d@#9'1XBt$fenq;G1OmD4)5VQ
%DlLHb<*Ic1gEftPR;Y#e^0Q=%bKRA`\TTd\DW]Zt>e?D>8(cHt$7F6CO?Q42$^J.VVs*j!nZGOh/')T^:?9g5-8R])RGJK#8Hh+5
%1@`S[S^=SE;/?)%@)3KY<0QiDFe!3><'IA4#Kt;Xl#]oXZu_c`qESaV0%=PAeO#F/ZpL`k6.T]N[%aGX_J5=&<UgDcI`!"]7P<PH
%>Sua0!o-D)\?Iebri8!C8XQ\`m*n)+CQW.]PfD`MX*%FE,XJM6W"s@b,6:tFe$8_f$!?W&I%JEZQgMeH8tl**iHG?FaM2R.RL),c
%d;j%9+f2@\>"Z8*q&5?lXjYPfhc8I.)3$*FR)EMC)NN@%.F]lU7+,HE^&?FF5dC4t6SN$Bq(pR%Mo$0Qr,.[RAgpg\<T2\mM*dYG
%o5W`SN9P66/%MeW`E&\]C/kW6lsQnA>6\=o:c@j;^L@aPg?T01>'EiT-/:GC0%OWcbXn$#$0"@>8N-S0)#&H1T]bDZ4C^A7PE!JQ
%;qr3"eel[3"?;c?E%pa>.=%h5@Y49`1J71`\piY(A"d%>?e!6c,aR*_[$&([#8,SCK@aP_EN\PD\TqKc0unQk.qULt6_9hlcd%Vj
%q@#C#NNh(REl]l>1Z[4,o'?e\RMa>qO9_u9"IpXq"M'U:pc(?&St.%^U]lWSA4'QqBT:<_N@4$?im%[hB'71?F5tranT@R7"9r)l
%m&\YcD`$aT9^51p6-gA-@^b0!%sp-j<SVqu#0TFL1/<@.pBP37\<G)(6aG4)(j*%6A$['daM(F@N*O;sBZ6I%$ST%DVF]lF8N&rq
%KpbBN_H=f/68ja`h0=GoJJt,30UY'3PKgsTZS:&`9G[A$<mR8sEda3hWq%Y(Y0)$"oiIte/[nfNjjIn==f;in)kY*q`is2QJnSc,
%8q0JNTMaF'9f72&E%:d`;X5SX_%jBuF-n:UiBY=VZ8uYl[lG%D1j5[gF!oY4K[DVH<2MPJJ6.'<Z>.[f;bUR!6;J_IK*AnW+L_$.
%M;D9R[[[<2,1#7P#Y(H1!\^mqb:N.'9rqrXQW`6X(3l5N?N0*h0/C`q!\Z;9_ss'ri+7L'cro;g3e<Xf=VT>Kk;+gnUdOD9h!#*m
%ZsCkGcHs_AYaY=mbH,*j,YEY6Kb>`G?q$5F$+#3uPC^WI(T^0!Lc5'4Z!(l1(FfO)\9Cdr:0TaT=eU^E<fXM$:,CukX60&p%`t8=
%OOI1N.Cmm!.E?."Nd($+r>L$$<l&KN_.d^4TKQQk]I#sXp;!`ED^+IC/aH@)`+q+Rm_g?R`Y[*IA>(YH'`UKg0\`:.>*^QOL.Yj>
%+o[DB@(%U*jpn]ds+bJO:1_h2l%qqWGh[CBp1!Bck++/POat\K8T\-MN(PZ.%S9W'BoG*TEH]n_\%tPYE[bE`^n$V4;fXf_XO6YG
%YJ"B>9X`S7X#:kBOef[2=tLFA=&T1M\1/1CmGBEt3fsLBSa>3rBK%QX9:1WdB>d)&I.#-8b(K6Pj=^9BV/lm%';es"-J^eJY"Wai
%%;e4_EYjF-j6qulP&4-i2fOOfqYbi)k[*6(]mu\RC<oNK9u*n-=\6@7<OB)qIM+kX$85&?$,jqk].>gopK;CWI%$GW;U\H[BA2aD
%BseAHo2=5*=9f.km(6P@k8O#HrYNcFb`&:.@2-t&U)T`Glj!8.FYp]r5.a*E]0Und,f/gOq<X:"lj!:P#5K9:M:7co41casai\UH
%K7'O9B/do0rs&95.EL0Go)Cl/GS_UGJ!NKkS7BUMYh-KY5%uNg3tgWBXN.Hgi_FO4=gLq@(TMBlPpDBpphh?aK\]Gj!FNN=gEX@\
%,q;Nh2BEZ4ou:FPdOl"jSr-f^6+`ma2%a`2f&K(LXX,s!4"[h^q.BG8Vd(l%\\$JDIU'B'Fdf5!.a9-Qp:<&GkV^\RmY32/\PeVC
%a_M(F/jZ1j]-5'jRf')@:Ea7*[X[l=^fW;IU9@cgZFK=sR(/1C].6d2YOh)jgM<!)-DpDJgoY:d8Zc@h:J6+pEt@+&)B$`I:aBO2
%J^HXN<AO9Fq.B);L=#@-Obl<][QAG/JnR$'K"X'2gZKJ%ou(&;ZOFH;PR$Kn8T78gcKq(e$&"/m4F0'19raUI4l21jiN1hY=.7SP
%!4aBbF;GIAgP+*%A@N<#8L'MYLku^mT/?H_CHZ9DP4-nY#Bs()9G<Vdh3=4oFuJ*DZ.ZY?9V6cBQ5sa]#eN(+&q&1[e6?QW?=9-c
%T"fGlrgejk#csoIlF`]C4n7C`/G(ZRnpjZq1=b[Wm$kWNiETHUgm*-_>t_H8V&;tWj%97i&+o@t0Y/d,K<aL<06e*VJ]U"@`U@E,
%^U)/AZ"O&N8L!bM2"S199d`9H)h&6:@TR*o`I>-uC]$dIn4A0AZL,9rI!(s^@B"WTW@+\IfdpKq$gh2^"#@:O6qbP+AttZ&Ogs*>
%0Q@cY(QB]k7:U^I&5,t18J7F!V,F-q)7[XpL#g+Jj2*:&C/o6]7Xr<XN(,MXIU$"/KBsa=dkQtm.#h.Ne/S'+r)YFmC7T)_8R*^q
%G[+o^/+mp+606U*Tj$5g,RHgd9uhreU&&ulG652t]<5FQ-F<bAbCkVjm=[b4oh$eJCY`;>k,r(@R^N9WM6,u6G7A/>%(E`VV^cf2
%5t(lO8`O/Z";Y;7Ms2)<3GH[VA(7Ahi0`MpC&Da\-OK4#9Y1Bf]A#0sF8scRQb`Kgp-"am"LC6MgN/#A*4D$2M7r%biZQLS_nA"-
%\D@23(/$oEAt`2g,WV;")NMuXT!h7mV94m=a;m5/G8nf-Mak*oT&=-q-M_Oani8MJQ[f2paZ#E21W_TOP#&Qo\^AWA;,6g_:Y9Vk
%gn,"G^FQ-KcT]Hoj$IA28:jNuU*J^"3KaZ),Y:109^EAb!SIXb+]8\ReLn([h;Gjl,!6J8_R3.%jNpT2Z&n=7`&j.u2(LaGc!d><
%gH<q]FXd\-P?r>\.W@R?U?q$7Y8ue4^V`L;iic.],^e[aec)-+"_c;$>[023:KgQG$^J']XG8OdloFAnic(""8cK`(U]2S^b(%Fp
%389:oQur(0:UV+^!s%Ag1%lQOfrNZ0Ur`QJHQY%4'5nN-E]kdI!mD_H<,e3faEd*a1alc[L4ab!jR'm$_^TtlF4rAQAhS0O</u1M
%$,00MqQ<52B.n8]jn6.6=j6GfAn@^>S^0#`ebGmAJ3.AI9hVKUJigHJ</k%\`[k,"Rbn@>V//hpHT$;U^"mNam1uHZG@scb^=ll^
%eT>kUG@MaRA%oSF^Yq[9lZRk+S+m\_,Y6^I)_1B6`iSmu/>=l@&WHqFLh@<Z0lA%N$6gB[E0s'NAeC#*6t7"[Qpij/G>VraNB7a"
%d&&=fOU.L\6t:fm)H0IP@qt:G(p^@nC2N1oBA8@h*0)7YEk1V>)WAHngS7B:X&!['=!O[VG!;msg[&LT0^^Y-07.E^qm70JfBmh=
%j0YLmmjdsCJ8nna8B,0R+4m(>[[[)>1Oj?*n'1dDM*YRmr4N5Vk-Y#4;tu`$K'_Nca#@-B?\0Sn3IEW<Ds$Q6*57iY2fnbkY2$ZR
%F850j_m_`;)9[k[d@Ke&Cf*tMINJK(=Yb=AJ"PQ<StDlR5<YP[+oRG7)`0.GfXLfod%kQNS!G/*AVjabjeGB\A%1Mjcc"IcAWP&g
%f48ceRIL&+=kckoLZC:C0n!\&n2/)-Ot=[[g#.)Ll'3\[7S@\[3]ffp\4t%!=osWQNZOsd-8ChTN8@,MZR9)LN1hf<lo;??;C&c\
%cq=-]ep&:S9#O\mIi`s*?q"\UC=6/D3mqao8/rm7ES@oNeEc5]@C]Po-AtanIPNPR1'nGcY)crY-Y(^c\Ou1f=t#\Pja)9_E-3O.
%:9?e;,rjSk':t5M$N<Wir2@Yb*/uZPR)EPA)NIN9-4!,t*?CD5]MH2#9!BL``M25)$adO`KZ%EE\'kK-O1V_[OtbI_muA[>Z2VWj
%?PCUse"3.Oeh!0fP9=ah<iK,`-&>PKRShD"NEQrW\CnC]8ALSZ7M=IY0g6SGA[\s9@o=_?.dbB^,dqI;FBhooOE2md_;K5KM:)+;
%gQ.?m"rYhREG:SnLn`G0d&8ng8_C4Km*n'`dLTdpUbj,/>1H6Y>Y%\1Y?7_=G8j,2CFMuujp*5@\^U+p,#_(A)]'uXlJI<Q$.'jE
%Zs@>l1h&nsZ$I1>HDQp@QRptD%&T[?lgcl31G-m-;'sIP9<o[a-%%Gj7%'kGXI^R&3_MmJUDaf.MDE..]Sb1&MipVG:V>t\je>G+
%qFP'uhN;'-6qfK6\L>F2b!h^.Bf4(&)2-Bg(ZiE5D.^=,'B\V>83iTg>a45)je="5mh;n"B"9<',N"C-P`(]\YpOmC9PZ7Q&l-%h
%]Da-QC$oG*9qo&.`^Up1>2JY%ZP$hobuWil<N3Ji$ZW5R)!;=)Wi@5/1,EcE\sgg0\[/2jY'&"ZcIC%J`Q&\5Jkrp;=;9T]lE/Yh
%4#7Ols%LccGg1Th"^M0BbQQ`qd*2\6$+d[k[]Z0;ek;^PA!d_PadYbJT6b3M8'B'gSjd+kqO>8!p#_-]kDA*`=$-';*`k(NX=?)&
%bGf<ae%/*;(@$Tp&ug6&'$YFG02pl>)hi%7E\98#CjOTE<1hU2S`3)1?U%geV<*@9M>211!OVt"!sXBiLu7GGh;J<K)ZQl9F7]"t
%`U>S,p0miB[G7MDn@IKO]?YoDSs]QU`RWctY3i%!\;j-F=SN:&90YN1$VR7eD>KUulT/C0_/R)=2qDE6G#^,L?"p9$r"5I*i1CM`
%5S!"=1j*3i.4sqs^>kXZK4Yr)rSVJ&A'*%\AFP-kr9ZHBp54=q6*S+\>cHQ/kHA'hoG@Js!*b2t.+)#f$\ULl>30ZE"B/,=9uHor
%[G5Yd"WI99ala*g)S2T3AI'bh6oA$^rs^AifgJ+Kpu+Ghp.7LFlX0NX9ZQlIgVW0_kBZ\A_f\Zi5A74e3VYma*QuE\c/8i]YUuL!
%@fG;RAZ)u.q+`F:9K0)<*d6oGT&mRL-E[0JiV<>GTt-`uXBgei`42C6"5#nX[Rn0sSjqO5e#5?UC?q=BiI0&G1gccdV-TE86\AM)
%.-S^U0eF<23\m8YZufZ]GqPCk:etP(N^6X\@X*WAo;Z2E<m[DtU,U[*Q:)F`43,r1:s&56&bKJaVQMYa*6f0CeP)SO(c0_3K5()r
%mFVDOK/t@mA=n,s!F<QD_c/INcujl5j8#".E4?Z?/p.[c#2N-Tbgg29`]E`tRo#b"FN;bUZVBXEgl(@Mpl01&TH'nECVI+NZ>UCU
%2*k39<n&qqX_10sl9mY;m%,=C/XW6d%aS#H*A*e[U&3=Yd@4e6`tk.T#dGI`VWjBkf#nSig+mB6R(m?fOC<W,)o>hboD"b04jDPP
%L["5ANb\o?5YFWIF*X`2We@>eE=hM8lHK?BdftY)c?FR"OoVgB9BJVM/;,)R0tfOo&q8MH[NFlu,*Tk?^h%Lnkn^I^iL:<uU7;[;
%;pNjNc-Kk%_(,=oe>kkj6r;(rM)G)VN<BX\NuKd4-TElK+n%Eu0T:EaP/35#mq3l])2cK#Bq:eeX8N9lVH8M1NrDiiP-r3B4T&JH
%D,ep5s&6%m0'Jr?,\jkZZ%LPe>bOm1Rlbm6!2'Vff9fQ4!6+$eoBX6D.l@h(fDel12`/Z"4*U+'W2D=n1B4<03r)ch[T5op$e-$.
%)!TD$ZY@DYHKRkB>2e("7N\^0>9`<?\Xhe>/'gb'^,-GC-Fsj_mAc0*AU.gfK4bfR]h,*rkCa];$I51f>O+o?1r7EA9I%[ENd^H$
%0,.H9,o6r&3uL^%4H#b2]2>$tnTV#b]$`(DJV4LZ6'Ig;ru:jtE:b`js7Ui;CFcm>rgj,h^&sP2<NQt57uWYLA#)hk4QiUIj[+(q
%hT6h4j/FHQd#B,7h7*'amMY^h$kp<Ia"rQYVAhaKbD,2X23U/F;>?-p)ATTG'YJP2\'pX=T)U4W7`P7L)S[X&0bQe*7Um9!Vi<U&
%)a!/fp0P(gTM,SdVY?jBYq0!fM?>\a:2r$_$ds850ooMK>pti[FT[its7'V@P[r\t&^Mo.)5IF?2-VZ!9Ame`9'9BnpmGu):BdAf
%.]ini!2[c:@c(=s[LLFL,X.W55?2C*:E,"".9/bSI*/,U@F%*+f[MbRC$DX\QE;\EU(3XJ;lUR9Qeel4[F4?sZ`U8tJ?7u<fNo:b
%MT_IA:1ZKR7d?YnC6tETs,95CZ;*#jUXMu/2]J<ghR7muWc1sUVHO_;Pn`:Z7q)Zsg<DstF]E,76900f.8f^:Pe1&)Q\r)"A)!kD
%R+-G^)7nlR=67(t%bYi4^WI1Llo:HOaDTNgk`4nq@H/I]\5B4).^T[q1f>*%^KGH>S%m+FU[l1SWQe>;>r\rc/+#TUb^]V$)S/K:
%YjCSA:B&pAa^8^*+!bO\b5\30bs-\X2AqPp7P2`qkZjtT[,11jSJIhFe4qI/+5IDc)ecH[DI%o8a'=cg.+?3$-k+"_,5PiRe%R$7
%)tB%+d]ReC4,*NVVf5s;m5M1Iel?7r!A)&>+e\c0W,\[5;I'GXFV^]YXB)K;FlAnjRi(+SVAJSm2r]MC-V['Gq%mC69Uus!"hogW
%FI9+:fc.]KbprpcHhK[PiMI)H=(p;[*FDc:E:!h2"'5+^,koL,eeLoQnuKDl]CH(KEV&)TEg!k)\l`H8@=$$7i17?J!dHN/;uTe"
%N^/^0%8*4g>4#q^1,K-rFYY,hC=)N,Z^pPaX20D&Vn!Del*l(o=hjsjZuPrFGa?U=6#+55\gl4aPn[Y-#gJVUkG]CSYGGsfH%oqr
%L97F6$Pc6#N?$!J9[i]0f2`iiEe@Qk[V,Drf%m@*`[B"iDr,#0gH"&.ZHhG!_&N-ahTmUmTO)QDH#'hE*uZ;m-rOk<9BB%nbYh6o
%1tqKWl[c.p+g0*]EOVM)8!cDH7oOmUR=J(_1euMNj<X,4?LHP:h/,`nL8F_N[qZNd2I#8IkDfshg:F@jS^OsZN**N,45O.pC;AMT
%Z+33TMLrsK%Kl'_+GH'Z87$Pk38La02,YRb/W9SPrPP>7rcZ:=;Ila8)`GDb@FegVB!<L)1JJT@guATLonJ^]#;KB;drnMZMo1o=
%dKVQjMM-j:p:6/Z@o(tiH(XJipT_/Rh;USX.@+HXWaa?gi[Pk-7Q0+@!4JV!6?He"6e%NrW]),MQ`AP<cSeslG$j:@O*DPL^J?BI
%=oirTa.O"/5])!n?Frn'69d<PcI0Rp*O:U`br`$_kpb19!J8V46#),9AZKGTlnBHj]+/ut*a?+JLY*VKm&j_DM6s=4;@#%`bf!C2
%[6=l'g=:;EHrfH1gJ%?<=SD2"c"/uU!?9J\W`13UX]eLaMlY:I?H"?ae?[uKP@5`k%9l#2,f^A<+Q#q`7c-Y0[VE=sZh1UhY[oBV
%fUpWk<M`0R,$cL!/6U/>j!rG=7I-g+L#K?QmGj-rHjI0%j3jM&\Z#jV#^ESQSe;J6%:GBgYRJo584p@n!UP\(e78'`GFleA"W6$0
%2"="I%9\p7<-R0cHME;cZ0OKge0pSdQ1K;dkIId5E%6K>6i5r1NO)6"PY!.ENKt-2,E8)cHM!q:D5OSG7l2YQl6Og4LfOr%"&2/9
%:UXBqE`h@6.G\Z<a;ZQ"nIN69Srmd#BJf`&Cn(ON=OW4*%V"AfoPb;)NIl4]>oVFTlZ%WlNGSB*"K&<\<OMUKLq"+XMY5Os?D^3Z
%8i<n4#%L44<\7Q&+GXbm$j"q9jZ8DYLPg42CE_kV-j+NH+o[ad0r-C@I(Rge[ST"GVWhef)?Y.[QRj%a)iSN2Cc8Fc[=M+N+ZEe.
%3s6kNV]N6%`4-(OSJIZr@1*o2ECT5n=R1.*-Q"YLZ)Xr>Qqb^s'"![2P+]'@PCEDmXPQ^=W["=3BQVceCXe,s5.#*J:;]5/p04X7
%Tc8ohoP8JNJS@5_d9Gj]q7I9Q[4ng"/8rIl7dps-P3T$-kcLk[^I!`aIlU".>8IJ6f#tt0Ki[:n@P`.q?UTshrH0u=qoShe?_ud;
%\L:qEeZ@Ha6#c%o?dnUqc:5R';EZKqWd\_&2&+HD&PYjU%3H;cX[:g>*72!2<?*?*\4(2cnoK^eB8Ef[/Qsogq)>%8iC:M7?piPU
%,>=V>WS'n:P.91JVd:@_NM;PoEJ,=bIqIKEJ9]o6Ag:TO@SJ`/ju4342YkPl]rcpGl)28>D]eDDFMkB=ARi^+2!`?%+IBB'#,H!G
%p014*"QqHG5nB>\&E#1lILijYU6^f47Hg5\j("LM]c&%mUD\5s>d.T2GIb:lDP!-2QEg#h&XM+e*D\LFe4]?tA*=MZphC&=P"\f%
%`TK*A?cC%u0p-5^-9b'Vg9j^MP\A9LiE(;kgu?IV[2d,1>FDLmZ`*;ITjL45,k#82Ce?[KXsJ#XmH=&E^)C'i&[[Ec#%'5_;g[M*
%C.-GA4BIN=WQg[FZp0Ba<U,q$<gs50-Y24ehmVj;.GP&&)(hXepSl8C4`n!$Ah1\315?h'gRat2BpACugmn%Hn'U=;[Gtn\<sp+9
%?C?lJQF#o%XkLb:H2ZU#r4Ss&`uC:1](OEqpN"`.Yd47GlhR^V@V+`Gj5'B?Vs*8%NEpHt\#]h'f#ms4SM+[ff2o_`T<,4J?+&6f
%YDoG:bkgVM]k5XV<BGR,o'Oa!RT2Q,W'#E5bb`dLc[3[c.=Iumh->DH`Vm0ocMdO,[6?/qASR3q(+je.@e%##TTd])&!+%]WfN3T
%R,",'lEkJJ%pf4ZIK0$4Qd!iHqYf>LeTNHMf@MYH?e8@_l.TTaBs*Ylh^Y2E0MJ\JpQN9cmd08ES#rhp5HLAd0A7?]mO(.eOme?O
%7=F@^qV$kJa.afIFDKpkq6pS,o]Tq*]<lu>]BoK@QoSE#:`#>j:agI")#qYS@WA_f^Ra8lYYJ6N13;TQ`U'(jmu-KNO5K%Xb+0p+
%hnOJVZ!&[o0(DkOEV"#064Bu3:CD'Ho'lNKjkHh6[Q=0BnT&^@9..&epuj(:=BJpYF^`]PcKb;1l^<(hEGb7!mcm`[p>oGrFe?+f
%bY5@QXY4"`k[BgsgoK"QU7D+jllMX"Br/-*Zp9PNmlm4J?7KTgmX@mgn8W)YI:IWk_=?ZNDr[-nDYpd3i46JIppR^+^@Z]i3.::]
%qgDeC,F"c]:EEnH5!-g1gH%mu4F=Ws/5$1q?eWp"Y7Get:CCs!o(Nna2)1&B?[Um?\-WV>S_i84pb.QOo5!op[H#N`UA`*[k',4B
%n^5u9%fW+Q5(C;WAE7'e5Ed*.5?h>DrHRpn=#6@$os^9qK41]Yp/O)+YL+'Vq.BqG<ON`Vhok.WR,#5ml\4GJEde]Y8%B_"\[/3;
%Ir6#/Nuqu)ds#a/rOEI-14'tnrS6(7jlcKdY:Jcm9\0&bF<V"eaXMYl4OFu&B<;]4]mT7gn]=8^L\#W\X>Y9oh`,tW'+LR`GMRmL
%,9"ojr)nB;g"UfC3hKV)]b]*(BJ$Xm=J1)-I_5C7IGq(hl+,ghelRpdpG5=Cg7;R2\qmC`,$9d7c$M`XLU;^-2K2#uo2BAkh"\VW
%,,aP;XIIE=CZ!b73T?/K98hJXs/gX]il"h52cpL)4teNl*MsLS;+^FqB.J&o8nYk@>J+/<StA5oS^(na8"Y`oLYp\$9]?b+3X:*o
%5QBq^@H53b\D1?E8`q=IV1%j<_8>>RZNNa'Vqk@"7*%MnfJpXuCq6UcG6]#[PB#Bk%f7o[mphpGhqD=A3q`A%MgnlY]g9PHNcn'R
%,]'(L\a7V^bC9'EVFnJ&O7!m&SkVR.[]J:kp1a!Y(\Xo1q4.E*=F@jU*I#RKe-N8;=ai/>]3/clmlejc[/TXp&s&K.qYf\Np.)_o
%b?!rt)k!IZ%hGY#f8F&B=.;jB2b*eoZMQY'E-Cc=55Y1)lR_I/8C=u04+$nRU%pT!KLjmGs5@N3d:n9c?]WG/qY@H.OS@XRVq/h,
%k1s:I'lWgpF)^c^lM[Y6YH`2-oE'c()Dkc7CY?o,X%IhX9:o9RrMP8q"dLX7>85JeCT!`Jq.DpQ,L+^1>;5\sgHDG@Q4J<\Gi'<=
%[p*Jj^P`WhXPTq*c5_:_[3:%cB>1RQ^"c.WPOIs3*pc#3lCU*bRD[=4(&aF;6`(Hk[b`R<4;(;aDUeEgeZX,/lFO/,&+n>/QNqhV
%\b8?Cc999bY<G/Al*"1So[gR-H85@X-\)$_r&MUM:uf*5)uL?Y_]PjbVB9[Y9p`?QO-fbA=8o>qlEZZ'?8)*Nndk]>#5qEAcl_FR
%qP19t]q58n>lJjhHcRmK,<C<V>??U=$&Y.cIOdooDIn'E_14U_e7BdJH^k'5K)R00j_rn#CXhG$$i8n)-5qV9&gTFtP/Astl*nJ-
%nL"3V02$d7+3=PoEVe.rTEA"^9F&<D9mE7J%gC@J2Of%Cjas`=$o%hDV2W0ZO0&NH8X%M-I<tf\I!0hmb42E>R%`!l8]9g]S[Yo0
%&b&<ec!.SI$oo@UL0kI3TC2(L?\32!>qqlUF]qifVMG$irX`lpL5EF%4-DB1W;lQ6p,Pp@q`s<F$O64@B*tf//G0f6FG*BX\K!:A
%VO,bY\<Q6]FEJnn`5@BaH$s$Mo_lZj&gK4$aHuc)2SjdGPJrhrat]@TeQ;N7c:R-Uk_k6&e3m[He0=#q8V/#]M'H#4&4<3u0YY?"
%+'40oW/S\@LiB<+LqX-Cr8L!.I?k+i_Xgje2#?[%TKtDn_Ef;1`&D`JF"nRC@e,mO&I]]Co4S4O&3sO6WQ9]g$5%n?SCSpEA&=c#
%Kmjd%7gguH!9D@j\;C&-F7fHSSVG7i5;"%?B6%U_)U6UX8Y;XDjM1/4>fklMP.o;cV^l(]O=WUAo."spIf/-[q*sK#anfW>o&h6k
%C))rQDXXpj!X#Hp"/]6lMoYc90V3%II!O\)0N%SR(VW9u39D8sd%9Rl+4'g'(S-1S\_"$7AlY)$-frQ<4h%nLpoSg6DHons&$s?K
%cH7*.HEt!W4l>K&mF1q?T?2##O/r2J`MK?-=_GiY<h*GYH[;865M:F`(kG2\3dsI9Be4`'p(Ub36\jH2pu?f\hgk/UTT9U!IC\-X
%\pNomK=NRtCLM_h6XP`<Zn?Fs(4<)hQtuRsN1BD/@h/CFbK-CJWp/ZhaFJRqG:=!3&$N9TF2piuHi"%s:leO7fG461ISdee);kk,
%q]@eJ0>HRSB:[("_SU$\mJ>unfsc$0gMFE9YI8OSnnUK<p-%H]'5rEacKfRiqhJD>U7>J?9`:gb^:JBMfmEI^Gb2?XpIsR!&.K:u
%6%Z,_*Tp#('t1DJkPTCf\'d-6RV-n![rj]4VG6c-%FLOerNt)2]"3CVqhqN+)rVAWrU(*`Wn&6_W0tQgqBC?:r_kHk]\#$khqdn#
%GCB+Z9_>p'qSaqYGT(LX:R;SM0#$+FTh1lH">'%"9aIY(B.nHFa`#ltZbh^-!]T7Gp<n2/0D\,Yo@cg9<n4ERY95l+hqlK;f/CC>
%_iEOM\$&RKj>ZCqn&Cl)o)sOp4ad+ZF,N,`Z>]KhpPjlf[5W,tSW@i[[r2c6,=2t>iqS9H3JEG_RX<^Jh:HhQdabJN?Fb?66c6n1
%1O@rPK,pIhD`09*=Y%,)06i.MmD\@7pnJe^RD6#/i3dcoI@7K(=Uj)+l!<U]C`P]hbP8-AQc!/M=[1B#%/k?jBt\fle][lSKdDXF
%f.m)29;O]6We5]uADuAKE&H8!:;>?2O5DQR>.I`tXH5@4J']mnnLUgJ"CGIfk?^$<I.&SPNI./@7D!LXa1@Gg)#@k>:,\Wd,H2DJ
%D.>@/Rs&XYXA+'i/!IeE-NCJn[S^a=SD;fgB<nd#Ir9@NR34J?=D-.PgO#aBK:QiD>8scHghK:Pm_-^qI,&XQ?@UHt@NhAWIT+CS
%CAq,HK(J_XB9-D5\W)pdKV2Rfgj>XTp][IDcrnE8m$7/97qG8lQhsRbeb"Dfr>sN7>@cj?47DLtag\h,2#[#mlT_`5k!Kl,&TSs"
%@-?Jg;8V4F%RN9poCV:F9&-^\&cS2N%T8#LS.fE"?6.%N\S10/R@E<_DgSB0A?N"#p7*^N()OA3)/J)Y9;:q._qM>O+K&U2=C6FF
%mSRl6<r&8nhg\10hEKUWcQ!oVk-sK]^:Muj^!p!j(nk?/4j@hnhK]/1jFE_]XBmuIjt7NT9ZoMDo^FPao&.p9g_l5*>P0$ij^-1b
%bXX"@1b[/;/r;1Xql=??%kmd<C6;[_BPf@cER%\D7CE2^m-5knD>jFNFup[iLK=9LT$uQ<+(Xc6oQ':7O7-f;T=<B^#GJln0_=^n
%Za5q>j0uX2kUjX@aQGb$I*uqM@SQ7/eZXtY?\UF`s29=a>i"^\Z<I79E!`q,8DqX[o@;"G;WEs9@a`g`LN`[_<iu>]0q/(Q_PW*T
%*jeJIls9sMjG!26CZE[Zq\NNH_FH=;bguCJ^!C4hs#cs>?N7!,Nj:Sq9gh1Zio?Oml]A!'qV#q\jaY!Lb>icQa?#Upq<c!]&aTAO
%fVmSTBG6;.H^Xa%m7'<H&ra<O-sl_]B2A3EhTG!Hp!rDoC6m&"Xj+%.Qi.C>oQnOU>'e*(ptq]]IO_fKF]$]hd<p=0[_TA5RE!5&
%'@fLf/-@D[s8"%150`?2[_aN?T/gN%Be`*I0/K(f):q)\PO]uCp9sWt6p9XZ?TuPLAA4Yu2qH:c?9Wb6DeK!GQ^RhI1/EA'j)MG3
%aKO^Zb)AkD5IeJBEa1e8pTBr48oQZQA(+P)_WsY'[!seMf0DnXp0YJ-[B8_3D=P0KolC#oVq$je;OJdf2d87]GY8J9j3d`#Z_NQ/
%q/b_!-^R"F/[)@jq#Q4NN-G-YaLRqHDofhlE8UZ=(d$Chl,2-d4K^l]."D+8d(4%mjES5eah@W'C?:aVo2#R*$P2FW&Q=/VRB>j>
%[sRr5m=!DrQ_1RMX84qM4DTrc\>,t4Z_JlCKA'I&fo"OdYMZhOo(QIo2]mE_kKY!j1c$_Z5`BW0d\Gt533N+>h`,skp26Y//u$Ik
%f^?mHr:$JU)></\DX7+'RHtF@&V9$&qbO>udo@H$]6"GdoEtfALKo,l)gmLf@^j-0T?Js5G'!>DN2<WuR6<]KOuNC"Edd?NeH9qm
%#,W"2<-fJW#di12-g1:eCGTHR^O?QiTm%$b9mE\qo#=O6%<XnM;r9.[FW,Qd^!Loi.8bG^E=[9bZjn2P1QBU]O8-aL7/b_D=!(iU
%o41g7k:=0&-L'*V8,$I_Gl;f&K$>@srpUajCXZTRWb40K7K+n/eTYl:pot._1UmASl=\ImW<$5L&Ic)?EP9L"U24j$5'utePsQVA
%6!pruGPr\3)Y/:,_*NqTU]\/IYd/Ybel8l1Ke%=R/nipQp$-n5X5Btu:H)(W[E#;$/]m13?Y$0j16,HXLpOJo>3;K_e'9Q4r@A*V
%e7C"tH),A'Qq*Xbqp&:6FRD$XS)2!)D@>OgbC^gYVcV2ZNujF-s20E0&MoQ\XFa`@hj`jrCE=B4X2g]fH]Ju"L>S<o[1e>7h":Cp
%mDmfhC%Qe!kg7B9CXr?7C7od3HJ#q.@\OOjq<,be:&hh%0[Esqr('jD9$cYW/pr<WoB'cK_9/4RFb;%:PNl)%"K#+'G<_U9B"Y6H
%)s@(@/-T?3^YdDqeQT$8Pt*\ur*Vf2qYAI+ZnPi$bAkq_a`s^bkDG"%g&(#Ni?]@m%;kd>;f8lTNZ1fS-b6.t7q&3JRE,-&qhJ^@
%+6N1\kJZV?SYOVP2Wi?<1PT'81#OJH&fVi1A>cNrAe(0YBl2.fe@TsIZe2g<P4=jepL,F1>td`1WF!kRQ_fl:rnZ3#T)3!Wji5:&
%dXC)YDr+i.HY\)R]mdY<5<K8@rc0l'GdP#qqXkksU[Hl*bujgF,bb8&P19!S<T]rh+%INCjDj.rH>DKWrS6^?-DDKJ_["kqIKDDu
%9A':**h@E<e8F;LmbE!RY:Xn2<1N,9T59[[o]0Y6/RO_^)%*B?7X^+=[$58Vl#Z2U>(!dHhTp1f"AS%EL3m$;XDM6+r3i]:+Ji!+
%BZ2A^g!<]coqSW"T0Cb=D;*Ykpa;NCq8NZ&q<qZP(W\%Nbg+[XIHei<=`^]N&1_epFSV;)s4r("IX9iXjdab1rqeXL`[W]8,GAQ*
%rOsYkp03;cpi2<^gtPU%\&Xo3GOA<r56#[%`suNa4-#"T60@XVUp.#/<^p<RlDR;tQ0FQ^]QTNd;L)GN>Pe+US+2fQdH.,qQVH+$
%I79]_"d4&d-J;MS,.k@g?fE@+r$.#+`2<5$5,jJ2kLIFhj%&P%k)[(NVVe=gIf"*SNb$K,a$,Kt47Dl,s,b*0-i\mIAkq[Z4MT6L
%D/9uY"Zs?.YY]?*gM[mT_q8nL(>-kr-E_gmBlj*FGFl4&c"2S4.c6Q;1Io",'4a?*HsM!eN'-<LEkp8upjcdC:S+\[Y$=06IB@mE
%TWhYQ&\J(=K5,frJE&AN2rALXXI#5ogXV;D/i,aKhL9a3T7<F)1Ad]0)@CIo&bJU`<8aP*S#8cGFsJ<;Dq*0!_4GmSi^e8)9_maj
%"GX7FipiG%c,02s9:>X7Hi*X-o3VsnLbH;?pWbU,G#>uhag]gf]pAuLb(k2=KM=H[bsu5&.6:dLkHOt%BS8$ROPa2dn23KE($cgn
%5?Zds?1_h5/hYOp3biLIT>.2YhEAGrkeGmMr6RYmDUR<H,+tS-Q8uN)[P>u*HQM8M`\S*G>Vmg*`ZZ]ej!ps#LCCA-3o[`@bpegT
%m:s&H[l>;NPdlD@hmsAV7*#72rZnF)U<Ec%8#YI-_NcN9;@,/Pqrc0.?0sQ8NT*C5;(LfJJ(I,+a.?hl^<-3&/#CY^Es!'e"\._-
%ja)8\j=l2nqi,>:]J!h-JHqsSeL^V^U<a<Z<HS'p+'LWj+%iHKc=s?7c8Y%U"'j_TYXk-^7+9bQqQN*Td02<%>s/LKg>FJ$Q!!^I
%iABRrK"Hgs%%2Q\U7a@$g.:c91Au-,`+D)a5Pnb+$9m>,$_hp8H`#Kq]@":8Nk.3QY2DckgI>4?)?/UY1+L1"KA6I]oce6h)D\`/
%q?r>rqrj(hF;3U'0T6$:^YcV=j/-kZ[.3HC1+Z@?2GOYIS\ji9Gh:24`/2Xb.',CU`plcKXU-eh"5+j>ibUI:-,.F2?(scfS5mF!
%'A$H["8*#Vd#A]/[s-G`k2@IPPt&o_rX3hk=,2AF7&>r4c'&'+Z+?c3OpY@0#ehtW0C0Hf'1F5?XJ(OTNkR\Q)@DmPrN&Lo>`Ye+
%U)TT>=nt><@JubD<9Y#-$6K\oM[W1_AsiSL&:qu*DakJW(pGed>VQ_m3bh]1=QAF^r*F2;<AL!Oi[\i]6G%VedA`\f$^L"]gQqq1
%moj;b_P=8\iWD]5469#4%[c0)?J'(95C"(eh6kR`9qS;&F]BJK*K-7gQ?*peM`I.j=DBSlB#3IR;:pZk6G6?3-D*Y7j!3Itg7Qb]
%/R=6%Ose+@J[==f8nAMp/gj(T.k:G4og-0;(sA#C\3!F[1&-@6+?R(A[_T5jj\qml*oDqs*nQQ1)a?FDA$g73Pan*Vq,UqW&O#ce
%Y2r<QWKfYV&iPfY+DJm-`Nk_gA9emg`T[+LV.@CV8O]4*gd9Ul(;nQHE<7Fu#?6r+Y_'lP@qfYV\3@:,@+H/V\=+5J+)43E,Pm<M
%E3Q!$Go6P!<-Z?E$Z)k[Y`t%5rs>ij'+@BD/B#2!$IPs]3OL;3N:AXaU*c=nA#A7nBu5>:70o2/lq12g5qTP2\[%SLlFHDi0g:.Y
%O8h6A5BJQWb"q;knfeV)H?EX_2Keoc5%U@@$]R>$UPkG^U$9CZ:8%<<c-"S8!\#iYF:^+B1JeF@[T>oV:c1R?drG3UIAQjcib9AA
%XfW0R<Fc\Y8*)U_8PLAk.q-!(e^Q^4Ka"suL08iji21ThP\J&&h0("o()utq)_=ln/*qR`C(;mqi?I_tb3N*phh\`PFnnu\rcJ+'
%DKmUZ%k_Dq\o[`"^ZN"`A9dZ\(-?Z!>`ffcpF*hhm9FBP`Q_2g\VPcM-e/-$=S`V.4i+16r(c:-^]4.38,9okb$9W255qmdp3PSH
%eE&cR2JVQi7c2f?D$LTZq+b[-[raR2RpN*a@*>tA,L'9)4)qLhlY4VMFheLm;/(L49"VZ#1KS`s2Oc/DOrZAg7>`@YFPHK;Y,?V/
%";git1U=[#jd7dt:)D\?e#%$<oTV1=,!D3$E`m)a:W"dML2Wt!SX-#$"nu\R^6jUl)0ce@EehGUesc%_gpWc\.But46a/<8/>VYP
%ag&tX6L&:&0F`tNR;&-=/uWU`1qq9DD!G`dZ=q"O5i"ucG[`DkJUs8UG4B'^`(YTsnU2uL/*L#;F(phm6^WJXL7S$\,FXX`;IO%k
%AkIMJQmkS_n.Z%AfVVHFBeq=Lg*+0T\O)">BnLRbc-!nMK9!o9,>DCb!DlSHVQ7RkkeNq-G_,uh>NuPK:r[i^J8u!k#6dkS^r"it
%Z#2id;O+L98=8U+R;UYX74df5%i)$uf$3_;D0@/+=bb[*kSQE)$%O(6UDWNW1"*3lgsJQ)bCWj#orc:mG'-li&PSn)$4[=SlSBYh
%C]Xs7A$_.5.sOM=p(H=rkmY79GuiYgKS2$N&UD)D8?KaC9(Y?:P38Z!;F:lbd[lFG81i`7_kX@AA5%D1D7I/!CM[d^:.S*u\r?aP
%*1/)g30ApUY+=Qim=;0m`[9R-<TcWjWoFt+Sc_^>JD^DIO2H::[Xst9iQ4m/$V9+-Q<Z'HY5)eU3_fq)-DB*eLB,t$LTn%@>1fqa
%<9A-:lDE2FMPTSWRMaIF<VaPHX4.$(&=SXWjILNu>#5+q(L%`Q^]*>jjqgo;Nc33nJ]SOn.t=g-22S=e6Q@;4:J-EHX6$3ac,\,8
%9YAfR6iN09K'-AFVI9_Y?M]Aa4tS(#"<.hQ<<E:r"VO6q`MMF82>2k(]'$+7S"<=^5s4j&4pgdOBV%C7&^;.$Va9;A*i="c[)W,=
%/-?n#MV%,?M*k52%,Zl'`$'$gIE1]OM5([KBoWe#8IVQE7"pCQ;0n677@?V5P\A4]BHlQ'Gtg0_=>W+oERf&D>t.foml%Ur]F=2s
%mYJ[cG=VD#F_qZ8Ba7kaG$,?mHF>Y/"VuA1<gm,^"]lR8VR16]i3?F?UT)%:C;g3%mL5<XM:nr=:k,1EZ9hl!]21_qWc*[p^/Oi-
%5.i:KPuh!m(@%`2\Z%c=g@NgPFS0*+Y,lHk/#]oM[SoG6q_6C*?2mp'<_?XB.c28>p+-(C1&dFQ/I:s3-&Bu>_WgIaA>@PRQ^\56
%;PhiG=Y[NojK@&OJ[+]gSM]#^p4/G^bOL1?nl;-]_=;""hj(DagjJ7K%lLqT3Y4aO%nWN$hn<_\CPD'3cNJO)#.s:SNU&6NOVffq
%L>%IFMiSIW-GAQQK@]QpWE=HuCAf"SqR&$(UMriWhV0\?$anQ9?h`cD:isWuBdE(4GaENZ>a"0VD0/E@MgTZn2.OMNnoQWnnXR69
%*(++=3/6?Di>D6]:-'4C#*T]N%R=t[)fK(A%dNe"=0;"\Cm5=dcXc(3a[U<T85c]Ami[Kr$3)FYpX5)^l*-A2cpr&r"Ya?pCF339
%Suoe1,\^<50k?Y)CeC"cD09t=_;t+Fo+:749WPub<4[2E[-.7&I/![i3f'Z51ldYq]'Z=ZU7ahn,Fp(k)6u.j3,Cp?E2[o3/Xh=s
%_]"Ol$$6@Q2]ZciGoqbnJp[T\_Z;ssO9eIu)O&W^G`Eg5<X"@0L^k-'6dD_=oqh@SG.D%K>uQhMmQmC^e6'O<m'`5f2b[jS\&c$:
%]#^s>"*-@^Hu3/M&^DQ!DAo\29k?h=K``329T!15r2soP?ps)n3$:_mf77hF.4A/Ubr9AW+Vsb)9nJk2YpN7`p@*j'G'2^89`3g0
%#QjQO$lMIo6K8<ge8^*9Tb%B(BYSh,gZ3=SV1\Y=>tQ*BBJ^4.>3,J3*<1R0cnsl\Mn\cp'Bd'r3^1HO[&]<B^;1iJ.m;`)@1<h9
%O#j[sQTF4nA2j['AXCuqGIatE`&$)4K:jo@4smT)<jRkV*/PBQje*tERau:F(K3#iZt9T]07`L^3-D#%SS0Pa9cW:$KFPjrFd>M1
%e=jFDE=g8'Jkhl+NB?BP<+]ihBcAQjk+mdc/=W6![dcD$9j3qtm/+0\<oD[:@#H9Z;$KqSiZKG_bd>CK7)pL@M.mX?R'R6WU]R5$
%J[nk"8e\3&=:Y[T>$qOEl0,8p@(KeA@WXEYE/8bmLdkjRNc3"<)S-1o&D0^(2FhG&?]K($`([%:M63ak^'Y8/5SnYm!]pb!.`IG2
%Gtu"^,OP*r<[U/ta\cY"L8(O;"f_X+WeAgPHAhi[Po?eG,8=u@0m&B(&AXV#lWp<p4Zi&hI8csIgTu\cY,<me":NggoGW;`DQ.f1
%osAKWO;&18HA%*J9;Ncn'Z,Mn'/3&b(;(FP<RcZDX`C'u$p7JrraF=$p+].;5+!04DVWT\10s#tLW"c,aDL<JLguo4XV^r';Y_Yi
%$/S*I&KIo022Rqg*&->feFbAK7[$"piH\mSc#J?Vpe;o'91=+#+W$8,_!%1C.gKZ'cGpBq*R37b\Hai^U-J$QV@%Vm/2.LS5P<O'
%Zr:Zpi$;NKko%?GTqOfe[_8/!Y7hs#YT24r=HV6d5ct81kX!BoV?:m1asGL/d)H28o(\N1?#>eLehqPWe$ap[;.5Ic[3VSS"=D,9
%P5=a*@?>rPIZU(u72j!u@q3-HcSQ:'1i3jpL8PP(pU\k=-R?dD\Fid`/o>0^EM]/_]pQ6+^oFi#^l`$28-Lt"P:RDu(9%YaB.d7S
%.($J(A5jj':,W2#'R!lH+bo#;790L+.()TKi;hD<B.'RXYY[N-)X.U)I.6Wf8mseKZ]-SCeH`b9+3\6J5eo,6*KqK6>Uq]rfpTEg
%H!T.HZ4XnCbdb(_e?oFf+U)[)i0lAm3LUpM:25s]2DK).XZ]$D=/?.*GgCMBCDq_4\gi<3W_.h7"VM7Wl'Z3K0hiB;8k`/P4Jh\C
%E,%('0Co[_f<6b:j=r(l<ZE=(<L)Z*d)`r$WfZg]3&!K>rM-TVWiEl/R\n,)Q"AZ/"uB7ZKk!+Ul?Z?.FaYfL5Wbi[FQk812McE_
%G=T6e1<DKEF]VR.&UlH?AJ#-*T$l%E+obP:A\"TY>h_rPWNM4dUoGuoq<S8g0RHCg9.XdsfmZjWQ)0sHWg9Za88+/)JEJ.7<=C,e
%Q,#M6-IPiE2D-Q?2]lp69MOIOhI[i`R@:]F.EABbONN)M6'n0@^oEu`^kr.f@aqYl*YcHKZT?ogb(ffS3Ba6'S1VX=#uB;@156QC
%<.K8.fqkW`hG%msU9_o9o*npS'1=A[+4DSqHt1Fg<`FL_48luXQ3d],Y)YXX?%1B.E$F:bkp^.bl%[dN<<;AgAkZ"RXQTOAWEIEb
%PWs@a6Gh=0DEVRk+NCfu7YORrQLf3_2%;fjT.5N6>cJ&JGZ<WEMFSE,-`3dc7Z$B/Lo6IY'M])Al=F:qVZKp*+Y^?@@ete%#5)lQ
%oF"Rda>!0aV4k!!WaEQE)@HkJ.;;J:UHFZfZ&t4.6!AEq(Rhg'HGR##oR[OEgGWMeJc88f_2LH&iOiWG_'\-:JQ-A_Qq#.(;-XrK
%O1N`sTjif\3r-92a*C>X"#5'!J@+F$oQBgP:4`he*M6o5c9j7]],&3Rd\^W;84CO9f#Ukj_t-j?g\$Vf;@V5*^X=JK5WLhkY:D+B
%AR#ZB(u,i_/;2cZJIOhsa*"O[_R6:AJ<,!n9"'OF;Q%"o::Yfp*h`J<F"5@'&h#`jE63-nI4k,MK+2SJ=>J\Hg;>e(?/T=JXbSMO
%a["\TI4P*tl5cN5".Nj$H^ZUQ<[ccHq]HDn@OS48q]IqAlIXqj&]mRL,!6qpUe)b)7o4]`=WSIMRcTK?H&$Ks'gI'EV_!o#J!^;H
%amoNLWgE=W1*IEG15MA;Up1L[[`CbP&%^q>J<3;kTU=G83ij<aUqo>+M,`]li1MD.`M=nR.e;s:3L[!hMaLk_L8H;W2B1>0C?(k0
%@u"QD1'b(nl^`J0*Og#mW)jW`)\t10&-X>0#[A">bD(kpV?&*UN=O/^_h9cm8[IcIRa>?1*>$=)0Ml1HI'"WZM^)#oWFka6V]Nr3
%F'uXL+>R:Dbr*J\+k-N.0G9WLi3?HF4]I.G?sQe;c.EfR6H_R>EQ*bRThHl&Lar9m_)F'6!Uno6f[I>*quS[OnMLR;lI/dS9fY@g
%Efqrtg7n"0q6bhoNWer-H&+30KB]7+KQZ)mm2k#jm3]QD1s13UIF]QSbOl%iErDB<$J:H\Ka,g;&WcDn8+<`.b5)8q-84.0g:snY
%A@7Q9*q(e7WP#!Vah'9E0;\B@+]mQ]O"Ff"lYr.eb6XN7_]HIE;\60=e@TE;%c^0m7"`Y.WW84`mCP?a,=S,GD*Q+Uf4Ak]N,DD1
%ekB732^#HpM]2eLPPfFYKc"@OHBo9GD7B_k^_)[U-*FYM*b8cA)Ol+E5pP"'23@PK!TV[i^uUE:n`Zd5:5S)S$$,t]\H<[4f6uFR
%_GOIc<$u&!dW*bQFfE1+d8dD>Xp:700Uq*N^?ZmXd1A!8#[T,*LWk=B#aVM-3MnIsA>4(qEZN.9173:;qU3g%Nb4:?(D<2M#rb!H
%^'iN&j[4+;d:q$_==%6o8]07K`^7OWS@>2Ug2O9sG-GSgbT^p?`8ChT76J:<&8tA<]l#N6K\^_HhGNCooGMnhI&^I[Z:,3t7O<Q:
%5u:q?/XmNIBBqlD1W[TkPE6S;BqgS1_*6Q#@RhXoaVR:bcV9VF!=`Y!P^^DA>QV48X.]H/'is[q;#hE>K=PAl4`I-Xjmo7S&C/bO
%aQRf<plM:UI8>k@c;!=\*\fd1((^#16F<dk]3DcmW_t7RJcR=t/Sf@AEo3gn^T8BaeDuKe1t.a8Ks2&TB%o%b27W#6a&OKcf&/f<
%S@KBEL9!)<cTY#B::+LU<ejK<YdHdfh/Qk?kf=%Vfs1lk+H*([?LcR3k`s@_&(^fHn%nua?cnDK;.4K?7Cc>"\8/"td-[W+6KrZi
%O%5-\D?+F3N`_Y[`<r!.3![XJL;R^a&r\YN&PFp6&.5jL#imR.MUpAFY/ZbrZA>n^e>iobB#$PXE!n[B,,mB`2H73O*)u=,bVs@=
%i"^FhLBOV7nqSZ0_0TQ/Se,Kg$L8tu89uu%=h'28Y-#b&62POZcAaqig`:rWGPArn\j<1Ws48f2+5p3uh8#[`#j%WAGZ%6a@%@h.
%FCnG,d$SS[:=Y%Ld>;17miV`gM]k]/n3udWc;Fr!TJ+%g4#(T7Louc8!eZmIp(-()*[3"!bXsq8k+lDpWe=Vo_%%sM_6F'B56GP(
%Y3b"UP?DJk!*GK>c.4k^:i1"nT?Z`f<WU?'L`U#E>[:%B]1'[CU"GVj875;(&Pb<#*()aM[[.J5fCemtF`KJOZL-$\)H[Y#QjOZN
%qM(VOASq9+$"V1FFq`*?KIm@^GW[N];E&p'WJ_Dta,>'X_1L)1o+6ku,/dNla++b-4$GL+!pp&/Goi/k2/Yt=%:p@j>WhQWbW(:J
%2s+8%iCn:-6RI,40aqp5QlV/)JE$>n%7;,PhEm#RC34GVl5=5*O@Zbr'ZW1n'Dc*b-m*B2)`Va/rQ'lk'-$nIJlk(()<,&B1NgY/
%`,lH%$QIg@7Ekm4"K3MXco)BAM-%d9'[WG#Dd6!9G>/>%$uuQWE$QTgjj/V>8eCKa"(7CFoU3mJ5Q[l/<_Udbp^^;$!4^op#Vd4u
%QX*"d,^gmc2O#TRM`\[aqk5UobV@)X)B;<g6*\_RVD:#iE(5:VcmaNR.X9)q(`ha'+fR`SUJ;c_0QB?!ISO+#lsM*Qi"49m<JZ:#
%]J$*U!$tBZCcTBEaB@ZH[Es=`XneD,;6,K#2k9/cY`2(ESMD`a;?Y#F0S`&c95:6%!aQ[P-4#P?@M5Cr2BP4uS$Pa05_(oc%,'Q^
%"KXA?p'3&)kZc<P&[XpMTI3Qt-A'TRppqo$PJCb"d9DXhJ-]oZ+XPl5]$>N9Kr5<R?49R."-dX-;:S!g['r$.-g4NbRNpdbN5Nj&
%d5J;G!QsUbGg7N0a$C21VGIDgVG]+$`^gq5'f+F_Pjus7#^HnHeLFDjS$"1HVLWN"1uIVr,C*GQo=Nh3[,=J`'dH>**@moo@D'Wg
%E]C@TJcH0B,E_)&.QHEN[]ZRD3/lWLP"]oZL0tY*NZg/FDK:G%KG2bH'F]1i(oalY,Zd)H1]R^e0PHCIF%bAQ$QB>d`6(l`NGdJj
%kPIc\.*Vdj6R-AI(([\_&U%/6T0\p+bgMI.U:(9+I_eJCBgh=R(_AXk*-(p1Js2!<3UY'ab6Vo&3)`?sA,3Le"u<?HH%iK\)O3Q4
%"J\oN+L+>I1$l_2;7-ZQRrBJR'MO?F%D`V\eS]V^DD[SER"!O*.bX:KmHa)pq@0UZ68"X[F7].0D,cWR-DWW?F[$kl%IED^L%-NH
%r0'P[^+jSD!=?EJFVFX5+6e9*aGjHF%aoa8i'WR4G"F-MHl%rRjBDCGW[&J>aLLPjj)-q#a*5AA+1+F5_m"Wa=N-gO:H8&Qr6k,r
%SKEdVD``c6CM%N-bB-V[_O%NMcYuQ$BROkk!:LIH;^==7Rl;<%=H(QhKQD$ian`!O$>0OZp43tELQfK$;oB6b=WmClNXd@[as(KS
%6+X+lU:;uZopo<t1km5q=.JTNrb="hoMA^iPP:\#V>t($j@A\C3eHm=JIj0rXl@3cn&:_Ve@X\[]8U-<ll^dX660@#IS,YZcM[Um
%fFenR+.';B)htjjh0%bZ#%m\:VP/nb&utfmNkB;Q<T%+"WRGDB.bsT;Cg.EZ;hh6*b1t0CQ5g+WE;.9[mc-`D1'ZMV!JTKe#fWO(
%Sfr-G`%=j<&0Y="c=,WLL`0n9=+J-F-:6T6cP:*PK%?7HGV\[0Q'X!\nGrq9"N-VnS^9"=/6ipraXAnJ%I%rkQUP2AK5J6U')>1*
%s,qV1>cI>:]([5jbVaN_a?_Kb_$4lsg;[!V-6oIT.#Q$.Z>hBjR!&amicp=o<=M;tEJ1u;EE]aWFG(puGq!](AbDRbdsVK603C/=
%QEaHK6rmP$igju)@2:1i?a+IZ,$/t9f#]&=$NcB0's?k+X%*FSS7,u;Qe2@h>l)u]A??Y#D0+Ln&YVc,H1qf8Da]&A0(VC<Y):Au
%lO6j*%p?Ipb@+=NR`erIHR*lhCLQ10"2N=>#3BOSib=#4]""@YMI&V'RI]]u2M'tJ3Yg^EO99+<KA[;Yi:P):J_1DZ?-7&0[0r#4
%(NISd5,UB%TimPs6$a1k@VU:B'`s<aOAus_3J:Jq$+@k*.+D"Ren)+eXc0+WK;ik:&KGrbFAE]CcRN2_'/k-3+GU?hUs:OpEmK/i
%HDC=SHs,:4Fr#o_=4EDA+]BZ(\2]'U&IfP1,qMV^#?ScI;&@4u>65ejfeU,eo4ZLVo9"q<FASu<%o[Em**!r*Qp9,=33GSer=gN!
%nI7Le>We4"oJA0gUqfB171]0*o)fC:m@p\V8h.aNd\\ZiQDgT784NK^2G?@cEn0:=DhV.FTL(+3*[=Yn*g"O[I5b$K,U/Mi76^Yk
%>4mLY:HZ4k)PH2B&L7H^YX9s;0G_K!7o[5lJ.L82Wc:#$O1M2soYOmu(cR/eE?.o^'W*r6ej2,1VPV'r`YcuW76M4h^1k%F;;/hR
%7[2l'3&=PH<T#T"A+0Iqj:1C%NB'<>iFZ<^'EulJi2Y#BnMmFGklG@E?.Y#GV#obkK&#&[:,\g7MMU@g(M9L$2/j*NWm0Roc'8-X
%"$AXn*oshI;Sm[&AB?ClLDu_4!"8@PaP=%19atIZ_Ejg(WpC[ETIF2'.*?*-^aQ3l4&.9V.3AQ-),_gn!7c//gTZNJ;"EEN4fH$]
%8WTM`:*Ust=@3R`)&*5jf?G.G)P.(H%Lp(eKL;`9Y^X$W_p)f37CX#M[U"YeMc:ft:*I<(UR\+$l"!1#:Fm^=hK"T8klRO94[bHC
%i+3luq6n'I2,;dgol9UV$:LSZ3m@O3REoLB6J13[$#_J^1iV#?h+dR=UF7I2MoljV$AOB*`tSm&FA`&sVG7\P0Y=[u]J?BXR7+9H
%/d]=!W[%WNR`*/+7]nli.2"$F=-)TSo\'OtZbdI=#%S</Kg7go5`,'Z.YYrdf&YioTkT,%R(@O-+u2klTPBo`n@32,_?28R!Z?;X
%K._M\*\<24W`86c^0tSgJpEn.'ng[Ba*,'P:]ue-+;GkE"cMU5(bt\."K'qMI7Q2a,!G(3Zn*;7BjN`Q!.0$Q0bJtH(olKo6P#I"
%//=^e(W@',VGJu5Kq_4q(el")KqG+uJ1+G7NM=9(h5Z!D;mjJ-Poc#)52W,%6R@PY?*=#=.EcCbW`l6IkM)__IF->.2N?\6qGUdZ
%:0!s\8l[n\26&F=U/9B3L.rCn_Cg2_^<%orSm4+HiJCc8GiM;1p(4l1Y)VBH#6FN<-Y.jLUs4r%";WF8BIkO@_1H>][=I4Nqm6Z`
%G1G\7]E1tFD?M7sLEDc;/1uP@`s*kW>)"7,Noim5LT#5c`?eKu$JMMW[V[u<I]TNfeZZ'AqH%(ibS;hu/\[7>F;[r]QfuEYh1W,n
%%!1MK(ElCF@hqn7*Yu[c&Jrp#:m<SX.1V:E4CMgUQ3ng0;"osm.OYaSphE@?Nk/.SEa3u26!]S<4AU(^EO?tAjT)NaN_;"=l%p%U
%QloP!S4fZ7giEW.@MoEOVh1$%k4..U:o&ST[Yh4^WY;'rA_6ts7lP6$@1i,I6'P56ZWcT2BAo^9AJuYOgo*I]oq?`F3<J]='3rK?
%bloFOKKC$*+J<;%79?/#b="TCL"`$7.EKFo63IYn.Dl92:k;9&_S1gER^`Y0__g^T!<qNCgB`\7``t'"fU[f/2Fu/O`XP6+D)B'?
%Wh9rGf*C1eD087rl?7BDL!40;bi=fC,>U`Z]Zt^Q=i00\)\KTu.pn;_T^kYq)b3tS+HA_$W!K&HLb[$!@!r\S?/6hD<Q#Ue.!!C*
%+NW,iFUXd#OFe:FQ>PEbYi+o%+S=:o]hu1uib::eh,#PQN"XV)VMo)*JukqJ"r3=-(LNkp!`CE[5ul&Ud"!keo/11>"peF(Shb8L
%UJds"oO^g/$]0Qs'QlN5Zf3)0J?W<"/hH%gW!Hdm#J.S='>Q`#(kD3/&g81N9+H.WSpY!70"0;<opKg`%Bm:%Z?g[1?5@E=1I%q-
%L!UZS+Z.&rC^,YjO<a*_-IY_5]!1LSU.5ogiHjP3kJVW+F'IoP+XiiiHAnN4bjn8/N;PKL)!ac99o!#*H`N/?E.`gI.)n`nQ-;R7
%?Y,X`>,#8>1rBmCPe_'d]UQcmkQD.88p:jq(g$:BKH_ZD^H1Z*L,d2(75Slf@f?]](c@9!#eTEA\(;h<f`7:(-I"gd,?*72$YTkU
%:N:X#LLl99s%<[d5tHg4?)*"iL>WG8fD&::LrgNkn>WYt;%Xd*KG95-dh=8I6:nOD33lV31OV@slDqg+GRBJ$"q2Hq&(ghYD)fC`
%Ht5%A0EFT0HeZT?7+_pe&\,J*1.D*X5b2`p72ue<T@-e+[N=E8A,*M"?5/"b35._6@bS[b1eaPJC819k#noiWRNl0jX0UdM!+CcC
%%T<XB'.A[!6k)jq6UVnDlqRQbj0At*6HSY<;$pIjNjaT+Bsp'?!+HTiS6u=scj75KKC?%G7HN30qIr$8@XH,:n:uL1^4Cn2"u`Ld
%db!JT'CqV%Nt@+P&Ik^/W5_Sq_c(`n7+[KXM*=c.Lbh:*"H5P=&D(l1K7on*12O`r5WS:Af`Z^OUQ;(,&5DBEZZML<W2hD2JRFpM
%\8oNW`5^8qf,S'80tP8f'UZ@k%BbUuD-V(O$_SW9eOObnl](6,U\M[fibXXjf=/^69#9`tg5!<$RcA^H`kAeb7>X7LJr^/Z33Kb+
%L$TG=M^`&[fS8QrGD>OFbttueA8?Mr#<n4t-Z_c::s11Oc>On/#Tj/E,H(j/mb94IrG7W$(66U+-p[-p7GYpK4KeT?JE!./*-.l;
%)b6cKCg78rME(nT<#PsSaR8o_HTbNn3[=A%(ZP$RBdeYL$Imui5XTmGC'7asoW64Y;HbQ+&OTiQS3SM4Z/8^T7GXpc$sO/$63)+9
%&#d1hk&n:jPor)'0Ya8h$k(Hg&%:(8V`fp-d=NO\e._?['hU8JJ5oa%!g.16A!?s-B@$XYn6OD3$BjGh)3gd0;L6m]*#.7O@cL'W
%S3b\[&TZZ4++17`;/;usoFT4<i`eSV'mgW@k5!;+\<.*Wj.]7qa)deac&X`8+3B7)e=-dPGJ!tdG.c7ogrScjd>h;jVmHhn#^bmR
%p6tV1DbqmEZ(Q!^=r3-A1*EA1eG[\C:H=0.$3ibD0$P=m[)kj]>ZK(f6#qb#J\72shW0,eLQ)Fh3^9I7()&JeW*Y\O""hCU'0Te)
%7=_>`@)n&h'T.U#m8WlnnRp?*jPm,I#c,P&(f\QeV)p+Ae8Z`/U!-;H(SN1&lbW:`PTORY?D$fLOm*pZP^"SqkHT4MLMFmXLYYZ/
%3eQANGt)27Wuu,L)dG9lC$=Nk`f,&<Jp:Q"<eYS>MV9(gnU#Fq>R?SR"qqC``m>:Qp#:<mg5iPKPn?hp9d]hZTfUtMA]"BCOWC31
%!/a]3C)@R5l:qN91@[O<oj#sH.4Q="pp^qNVeF^:L5+op(Z4OUe/@@>W.uYbr@/l#!l_!7?b<I*i=,?+qNOka&*/i;l&%et)N$SF
%SpX$t_d.*(g+Z2tIn`F>JLH2HM$+[N=)i5Nh,Ig1#F8Ii<;VK?C+*E(q*2BBi#s7(Jt_\.NFMp82`QKES1$d8LE659PelNQ3J*ql
%&7:CgOT6;8k](jr<4e&RlF7GUe'g2VlMtXh97cZ&2BFS<&fc>9'fYXsSe4rhQM3_-Q#(M.$uRb\EoHKghJNuCK/C5ai.thq3"iT0
%Pp$D.nTN'oPp]]F#f`8K"6!cs]WJ(3E=6!:Y_\qpU5?6>cV"q:\.T-/cjjE^+gXu97)cA1`jDL4E\[%h9RUsPR4#/%P+eX2iqs;*
%%6R?a,uMG^EebZ1d"un^00a.+I1t9B<\X*Y(ER-%-R=EW`UCAf(o*f`?Vm:&L7#/giN5A_gDrJ0,g^/;%5RgNF:eP176THqnH1oL
%M/I^#Dqml9@s94%JPn,Q_GHpM4jHs;;aA1'`TqC*;:[Vq1i9CYL_4`>gg]mO0WqorAcTdWBZTgBJOoes9to3Fk\8)gh&(qMe]\j;
%'VuE&!NlLCo?S0`%YbNVK/S-7PlS`AbsP7*UHl"3lNWj#f.K:]UU1+>crEWXV*'_i$6m4(adF=!_kF32:*p:G5U-%n5_XRt:f8t3
%4s3HS$^GtDYrVOTa2Ap5mf)1WRXJ3scA"k'1IP67#g1-THj?K;I'1gF?mNL,.1!KHL:@R'_Y><#mmgRc=)Y4&[,L&BM_=GIfm(Dl
%D'0OKE()g*#i<CP0LZR+EQ-/Bfd;@I74_(8A,BC+(h]qXJJY<Tjp&Zk&0]n86pVnb(O&\5)jULTS:4iSL20`I?<Rcm#Ec`%U2KFm
%_IGf_O5kTmO1k-So-!ulldl=5n>+$`$?^#$fri^32*LJ57l:Lih-!nrcf+4^!0D[qefMgX&(FE@X?odf6(!?=$<7/N?:7NiW/Dho
%l.05J"VOK4*C`k#H52]&'WC2ON&,%(J/6:<!Y?VI0@>O2G.RAb]P!on$<3UT@k1W`8d'i.j,4Tk"cAItGWj8,nM[8iaTP.ZdifB5
%e=)[)!bjW"#Z7T58r1"@d5F!@aMe6]7Mcat0gWereFE#JJ[cSt5[A+4kMLuYLSYK@%patJa)Mh*c\Q\K`rZ)<3_YQ?gED8^C%AqY
%ISpn.?u0qPW7C#;W/F=4[+![+>BVQp[?pGm!8AJ&`Q_]1Y!0VqNV$<hQ[$X>p[KZ.n9.Wa&Pn[;&AVOD$5Tsijuj69]\kW9XB!@)
%'He0O5\W5l"+0eS`D8L8%&HHV+`9klia$/6LDM67P_T<'XS#j]R0Kk;6_/^p;<#A91W?7UdW$i>[35$gY%bl.A&sf[k$a@k2bfB=
%5ig8o<!b;)s5h`O%"c*sSABnm%j'9;#W+,?E"BKt?LY)<<e)T?0EdNnKu*1<&2>U\,V!16!:QEJ,KLq`:#\ha\<Vg7nqTVFF9P/S
%KtMdG;C3I5-BNjM&]Jj#2mRAe_M,e;9g7tuEqM%13h)pU?kupN"r&1B?@sn.&j0i>&]uOE-def.$4puFY("^;430II5t)mWDd=\0
%/m9JFi8a&j/GZU;j&DSh`,0"8'VU<6bJ^:ZeAG1Z8<^&?s#:J>,mVh?%6rXA*-7(3E]<T%NduA,<>/g`b@lcu1)OT:,;2K@+,>0@
%h8X/5.M2%qBrk$*\UjZIE\ih:@ggj8Xs$R'\"cV$U%4Yn77IKUm_cY*VNcX@:+fjPi)EdP#;(WY`4k2W6<dT]GY<s*HeL89@?WT%
%5IF3r,8.?87M,mh&6OaY$0YbmaZ#X'UDcAhjD[h%1h;`0^!E#nBtjaZi)^of_eW3jTG96MCnYSP*[)^l@L93(lE_TPK/7Uf<Vm`^
%G^*P0R;__"XCcE1f\q729Fb9+>Cp3RDDrWDip^j.jO.a=Q:Qb=it*=];?.m`b)k98p-AiB#Fihta-[c0>DeYDg-mGQ;dsa,>QB>#
%eH<J3S1!h6KdaGQP/H4nO*J/h,_lD_.NZ_Jj=j[IlO#Wd848ID8=8.&#_V[762PU,#MNTcg$WW['*d&/Km/RHYpTBb!'QmjFP&b9
%,#8>05uHjW37-ec>$)bM??\b-b!F9-"CoDfBF+^J*o^1C"M<@;Z;;>MW_>hhoCdS[N`HEbd>EGt=uMd#r(q]q(B,h%9IXW]TGPM(
%%,&#07IPk)ampUsj/W&J+?9u)('/FC-ZA#"F<VgY0&TAN8?"@l2rF^>lc'T6s)CJ*O'c)L_Ap^_,lfa@;foMa&N6pWq1;/i:C%8]
%.gh.i&9[E66Gnh*?e!C17gf=@6ukn.UL;Y]2a+YcH`@9orB.*kHKU@=Xt2o\QR,MJ:"1BtJ1/uc=@#)PZKb"CoRhi>=8V[#1TWq0
%[7cY;5]L&m<83J/*5K(aXV&5$KZcF=!2,3jGE4\@o(?#tV7JNh5df%K9k4eY'F@`?:WRLQ0+9!uB`;b]%W<2r>H[s=n/IluMY!nX
%=c<T(k)^_9q<;?cEX1/KS:I7Q7pL#dRDpqrA6+csf6`"#kpB"N_u,h>B/LAVi7COHE(9qlKXDu50aua&fLC9SlDHRBcU[WQc]puK
%j\+CuRr2l_T\:-?/7-AWkS1gSIPJeW'nq9OPM/S996'^5`n\[Bp)R#>,hDg\V+>Op?8us6\8[6ocF/bO:>@Bg.8EBXSm3_\$#].A
%dRA<Kk``oNFu>iH'KGhl-A-E(`sMScLbCk8Y8+ns!q1*M%$DWY(GGtn)=1a5=7+Ui;Wh9WdI;t#)T!!o-H^rQhpW:P!%UFNnpihg
%p@^jm<PFlS,U8MN62%NsfNq\5J?Pq'ZfgERAMoR'Lfb0?)k\Al-AT1b2IA_bM4;Vjfbg[:A14ZA,sq*]\DL$sM[F$YUQE54l]iGB
%I]4M0gdGBNhH2a1N+4%n6?a-.DU]R3O'#hg)kpk+T(b!n>HC)0F5Q%803n2bf,1_dEB1hrk=]Up`0YX!XJMmSA8/5-C3L7<(`2(!
%:g+KOJ/<BaS7BSR%_*K;"S!Ms@"M7n#`Z(#?@::m%Ej!M=S%7@m6HQ\'HdH[#2(35j8a5I((^3*T&9\RAR,f&TOt_e/(9Rdc7q-f
%7HSsYfGBtb/DE-r=QZ!PiJ:9D?Lfjs%hq01#i>o[*cW-iD*Cl3%5jA]@%fj^8DHXak@84XK1QP4bc82.`F1dH"tq^J2f]H:^uI1:
%:rC1-pi8*<_56X9;0=KYKUAmG3#<Q(5"HEFBVK#@lMK5"JD$6ed"5JFShBR?FBLdI<>H-.j%BpfhNAM:)fQ;qe;%k'F^OWE2Fj]_
%6c<%a\GQDRBT*erQ!'][a^CbqNXSAGP9rK.,,^@7K;``*626:*EE,#PL<P`QrnmQN0R/RFF*r6nc%Jh.oqh/@(uJ3t^cO8)0$)c9
%fDrq7?G:'mTutQ$#$]&?:0eQS'NK<]'Q`f_b0c4^%#HHA*m-Ka!hQ:BP4MfXMS+9k;+s-_S]/Rk*ENBf'bhiGic.LeL`M`oK6_0[
%@4V7u/Ij(hDjcbU`6!u>"qE,cbJ"&q1S)KN%PQD_`et-CiXL665]UNqZf5##p*aYl&$!ag!B?`!$)Tsj4d)<l\P<[PH]Bc93/3,p
%MO7c[MXVl]^XXBO7dGC,pKtE_O"4.`_f*@Y%a_]EOs4pN9GP-k9;EVL/n!4M;MM^YJiDcjIsLM6@nDhgkIqVfJ&iE-3Wc;uiKjiE
%i=jbk!=,R@,B4ubH6PsA"gXieDP<suK`:r?Djar`G4+_.FCoTM"8"t4b1M/eF)uE/AZ$Ru,.HRF#oM(Fb/bCR.2-.RJ4jCY6[1k@
%-b%os'ok9$O.cGsCnZa[&ZP#r6t%.ZX>O52K82?qODd*B<Ul;>c(VnAIm?56>9i)+oA'Sh!A*@Sj0MPf^oD[YKsE-<4ktaK-H@kQ
%%gVdSagNCf6Q%n3PVO2*U7.*IHmKj!Xa.9m]oJ,=5J>i3H`e@6GXG=PgrM*3@h384&W'Q,%!h-cj,Zb+/&i'8>s)A&?82""*KO[_
%l5Xo'YIH@o9N:Ub5*\G*9CF(89lf/=Hg+)\/.tK<U0[/C&i<*Don.IsKMS(rPNiB+ism7Z>^oq$W:f1u=j?I#4Z((2,,I.RAY<.9
%joQb?&tcIQ<Gh%.ZXM?D%OD;E75qQ(.&\.^"K^2gL&\$@-,l.XTM_bA*@Jo`4dn^H8dc1Q&-+h.SVV[$8*e`MX(/KC-[gC]p\NE9
%:q^/VZ9QAV2`6b,n#r)lc(qS&p0j.)H]q9OQbS3f$H+rsW&trY;<>C-ZgE9`!B0#6l;hthH?1SXZ;0)'9U)nKXo'M,AoZ1aDS27;
%H7`&m;u*A92A#GI!se5D%?_9Vb[A`q:?^)].*-2b^2$5Sl]CO$8ps_\FD:;4cV-OXrF)###4Le)5E9gOB<UU8I[V\A<,+U=V<%mG
%0Y<dZ2VV/E;gGk-\Z\U$I6o0[CNZm%6YK\HMtZ)"H0<oa=]YCRG/s)H&g?RaJRpn%_,']m';i(;@'.&Vqf\.3]`d5CX`0+ncDT&j
%\Ui<&D6`SY3nDPTpqKu4mY&2q\)D/';L%FO7>PbcjB^4J>TpUlUfqM7";2c<_a`;^jM'BoqkB7=%$KstF<PK@KG1tX_h;TEcEJ.[
%W_QZKc5Z!8d0<$Afs@_Ca<TA?)gXlrd<Oh^5?t[(p.Zcn0MS\U\;@"pdD3m\Q'L3p9@$As_n.G#4@OF+oe?3@6L;.d"`G.O:e<.T
%],b3!:r62%KN]<c"WV]@WUI(T.2H`mAq4[o7V3cE!:In5@_%@32VOrn(S##Qm$"g7[WRHB0In%dj-hfta89BAZX-=4mY1EC%-P'T
%jkA4kin2_q[r'_2HV:h+@,'_OfLSUS4f+U\['[$3*&+Pb_5aXsL"rZUmK^MP)u\(,ZY$=0]J"VBpPq7P(Q4Xh+6i,"D*Ni>&55oX
%h"5k`WT&lQ&-HL2a"V4tadh`=N6=kDP'K?1ET]NRUrQcPe'<9PmVD8d4F8P?3US!&4,9?@E<pK8H!#:[3V!^f+C[)djC%;u$d55*
%D\pR>\&nNJ>p`4LB5%ld0jl<o,cn0)BX(^3;9fKde&'Uo%+C9*C$)<j!Fk5g^kIcZp%&@)Th$lA0+ocUb(?gF@/B\4k5'%>Aek*J
%hiFBuK(UQejI%OJlYSR?I1AmnSDX^s4Zs`7-s6n>JP/*.P2Z,Y+$BNCIGr2TQ8)tr35WZ@[O5AKGd;j@NJYRUc-fZ(bbR&02c&aj
%COaOA=>/S#\>(<HD7SBqZ<^UcCRFL.+r2c=aS1<'X*/sT)uOpG:PpM\d7Wf"iI[7L@I"d:06ehK%aDi9XS0jeg!#urjP"%&irdf"
%_jdlJ_;cG6nJUf9V%B+NbKW/M]7@S3<q=*t?Tra:hk<duB2WE+1'J[V!/e4A4bnon1p-erA;LC)s$_;tV,amWRl<JghL'stiNB3m
%%bD]81rkrGr`2&E?2>dM?W'?2qU9SR>o*Grp[2Q2o4ZX01d.#\[+p1N$s;6U$Z>og@99*`E`e`5%h&!FYg[g$K:u[8Q-#G1oV(uK
%3<ASV-/;1'0:phCTp*?6h5AD9;U.pt$QHLC+J3Vq\/:B*F;5[iL@(>]#H",sL<`S#LLuZmqYi7UplDmVcRX>].)>=GQ:Hk*O%dsV
%+-YgB$G<$,nN_>R`QA?^Y)p;SjdW%,"6W71Y^e6K(f/^m?g@ei:iCetWIDhCgRs6b_JQ3\$J(f6Q;6O_gdoh0/Zfn]MW@7`'P2Xb
%5%WTQ/f;u,,A_FqetEn'R_5O#TbV*r8Ss>FB`PlZ_X3/q-s>q2gp5e[Ghi[.[$2H:8a"QTRN;=SNT,A7]ZEZGcXX"X#EC.`omFS'
%mm*t8<TnT_-+$qBn'GQ/l$H@lLT[P]]ViGm6!IN2gDIkNe=LDu/!uO,a7XrEkb)n>I&P:2Uj]5?T6GP-F#:.gX&qF88rX@a#nn93
%FtG^[^MQVhf7U%UeUa&6G^QrD($g2>F;2Ib--!)p7C.[II#Cdr)."/R#NpDIL2rNa,ta]UN,Z4GUoQ>aJ52PYr3`=</:TNAO_2,s
%"]M0LdL6SfeoI$f2^6tof`do:m$3h?JcJJAEIuBM:2mTORZ;_>\2_!X\G[ne%Z&%T!-!@6?lbBUYUamJ?>t17$CXuYPXhd'0=Y%]
%a+qC,UV&\%Io4$nD(AC-(DJ@T3FqMqP")>9]Li59HElGu-"Bu\:)^5m>X_^k>ZSN5\6?hF06L]i(-$QIG*V=gF_;9bj9:ld_3P)a
%._*cIoi9B1NSrgLY,!#Qe^Tt0N@J#GjZtQ0*<&Q^9,Hj>'bB1Nr'+q@,.K>.78%R("P8Vi2SjM:IjMo7!W=(Q](=_m?4o`R.=8R\
%,+_QT\E@),Kjiraqc.M;RHgqd%`lhp"\oB1MOT32ea+R4C?,6;ol(]@[+?r[Y^4dD>CdLp"Hn8&gXtSs47!Mc,2`M`ET-F:>$S=*
%#.ZWs"BNSNQb3&Qj)AWhUK+At05^4RD"&q*Fm[I6I(daM/h5o5nZ]!=9/PpVXCE"Saj&$,EBErX!:^`3gTWpU5BQ$t\:fbBZCJf`
%G]81gZJ?>ubeRV``Dpsp:..-Jr3H\3+<kp7F^V>IHM#,j"2j7t8R=W=T"q:sOp3f`qU'r/41";,j/8[FpiA)VT.P]qo#XZ\l-O>]
%X1S#eJ,B6BhgbRnj57QMm_a*7*<h'Hc7dLS>6"*j:EP&`LQO(#i[g&oe'EI@htu$qi@f]XrD-3QqX+%7rq,UTO8o$:mskAtqsT"Q
%]H)M#5Q:/ia$9QFgE$%+^]38RhuCFhiTjG!a8VRqRBQYE`j;!>R<P.iqk*lTLN!4WT1@qrkl$8YI^i>R`ucB&kJ)EALC[bHanW8.
%grBs*mY;n!HiNX3T@j5C_V2k.bXM;q(4ON(O5DeIf7)6;?MAsAhnK'f:]L>MD>L8mm$Ea.cg&UHc!NWekl9oGO70j\__ZeV(CO/<
%gFR`"b&sH+mBlroob]bt8\e52/g0l;=MurU5T]k=LG[/\LOtBpc!>%3>GEX-YR%)(!&km5Z$h*Y^55R(e*Odn2"=8*1hBn94A.pj
%E@<dEiLi]ucAB9q,f,*c33XJXS#I&'Kh(1-LD$YSE;5NqD]XZKC^)VdXt/u/G465/"2:ASTNr&Qc1:Ac[mr0N)9%MM8lD5:SuGcV
%$/)7GDs,N##FOEW?tc/JqsINW(''mq->i<5e%[\r%q/T^hU4q1Q?XNJU(ret'$iI8>tRA!c4^al%HO7circ'P$q3`L,3KKC9MNPW
%H31d/Q.3(d:>68e:n,1M=/L6o:P`tD[KoN):0KdqSYVE(WLV<8[LjC-(-HICj?sh,*H9>rY*]OfWqb,_GRfB6AJW0/[S,qdWroA;
%1h_?f><GQhG3Wd0n_L[9'(MERXo<u^i\]M`^!/g*@ikA9,8j/]C(UiT:*De83L=9%LQ]q,G_AU,$\r%r+trckd[;kQR@=WGWrqFR
%d>P9`D\(VNJl4utZl`irY?Z7Wg5iS76X'AVi%mi`!F#A-h'3"W,YP$c$cSf`^]j:.%<Y>Vj2n1b\!B$W-]7Hp%YWg('jHuqq:Ps>
%C@XefACS[2#C*sW$1dald]T7F]]pF9^Da5C+,u$$@\.]1je)BUqjjq+[9$qaGIrS0X;%h,VCfBT8=$Mpg<DLt_1-?kKt'i5_,o>I
%Lb.SLE#iWOZ??2WCn$T,o@@6RD0+P,Cn'b!n(Zu)G=X_G^#im]9Q2V"Z$Dk;>P_&bAd&J:*HJsAPPdn%78/YsZ`&`U*AYF@Zq!]/
%nW3PE%N2C;+,u$$@\.]1hqei/5;adQ[D$nS&,TU=[R2Ma)d-*K4/?IJD3VH>mgt8U*O<K4fcbJ[8`+n+gAN=QRtIQ[rD1kJmuY^6
%f+,@XnR#^[_"B"%d;=u%NC@.?h)DKjcNQWQqY^>k,g=qb[uDlO1=6ids6Z+fLW5LKAW0&BCN;LH[V('=><GQhmFBBAloe@9?@/Ru
%j=H5P(H,*"qA5(H!V&hhBQrnbQ3cS28+DEVG]m;'`J(!uk44V7&mR7F\.,M0GI8`%lsGFY62+FW^YA2`$Z1O2pWpf4eS\fjZj$(O
%.:Q\iaZj[-+!%57>`udZE^r>a`T,i#r6CABMr*GWO%/<?+/d2'YfgTpIu>bgkI*OQ,"gRRA0f^9ZjYkGZ88(pRUdQucIgt3a(VNh
%+["PMGt--uQp`t,#tfe&&"nPb?cT,6!r?Bj!jfh47s`FU6kM_.q?LSVQ&1*gd*T]a,XS&8gk#o5&*drrga#"B*).Rh,SN\rB46Qa
%@$$%#_VRh^5Q:]MmR[P1G0$FIH51"tR%JA_n7"3])ZLkD4^'aJ@F4h5IWQ?hjWNh<)o/5F)-2s`8#+>8R+mWaI;aGbJ;;uT11F^E
%l:K8,!D.EC3?F7_[,-s71gAa>@51%"RDgi#O0j'T+iY&!>Wp&h^LR?0=ghjc")GqO+D>I)6F[AOG-`M^aWXS_9t`DYAPq$bg"t(n
%.bMU=>oi,PD?9XZr!<!mHbjHp5%0`Zn1>V^`#Fn^&Yk^R2R`e`Mdk[p*LYJ*"O^O]k2P-tQn^B_(+n+F*L=*BIXHtXTHd*Vi4Xo%
%8b*,iZm076_T#\1W!u]h/\KQ+>WH3JIp'UR=HEDtf6&@S053U*d)@"gbAnPd+r:SI!lJW6l>6f:mg$Kd$YaBmmoeH_BYAZ`\DY:k
%OuGi$_5ngOmfK297Q3t4#&Xk0E2)f<5JeV5Cd:$L#Ol\o<*p`UUH_8F1)Qi^A5p])-[9%!cK*CoAW\U:]Sro:JLCYMZu(7MgHUUB
%d`m8gpEh0^W<CIp"VP@<blqtO,T$]Lo%WQ-dS<s:A!oDm6%115oQ><ia&hPTX0*P.kfN9=!lMK8B[>I*2^74j8dVtn?<8QuO89nM
%gLc"HTkCZs=mS]:$khN'pZ7sX-ASJnL!*e#`d)k#cGCpff'ia];I=!pmBGkt]4Ns<IPk=o97#%.Is[XhJt%#GS&KR3Sr`fTCQ<RV
%EFPDCEu]Hf>`E%L+Lc,+qDu5XM(Z,[qmg!22^5<Fc)snN0@@#L?$"j$a&O>]9"Th&ha@*C[qca=(-;A&B@:rE]7Fd)iTM_<k-cF;
%k6^sLgGYk2b^S.P^i,ZmNKq3b)S9EXkk<58f_fPDIMVUPO2$Dqi`0!g$L<GT:qON\#gc:h'?-FP1KYsn<*rM^U>HKDddKV`b7g*$
%Lr=@,=1(6JYi4,*M$k5%bCVQIaI=EX]<49o/HZ:a>h'LO/SVY6I6'Hr8po?.ImLq2\Q_a;KRG"HdUj"3jQR/36jMSK"FTMN*&@K_
%Q92=lL*OY*eS'gi)GT(I33?ZKC4gRWlW&]a]H)[;Q!I2Ir&PKL/I/8Q0SPfY'Zi^ae!O;TTh^O>-*0=E<`KllBhKYPk5sQn[4(3?
%6kSRTp77Ug%qW9',;KCe^AAY,W`PStoTuZsb?);^[@<)W"3bc,7M*k?aa"#YqF%P/YEi9Bd_HJ3TlS$=&<)_=Cje;6GQDY_6OdP`
%*f=,"j;hj=FdM(:hA_bN`\6P(p71,5b`J%=7!N*P/[oO5@[(cZeHBFKZSFZ\LNZlIE2gl.7^e*!c(#._$fp??"SEaQmtV(B7NU''
%@lYaV6eLMm1#[<m3%-6/VE#tZLmV_UnDmIl#=90e@iN*Lidq)2M$_#^"*N3Mp4p'sh]Bld(@+aVBBC5r.q)d+6tYk&%%hm[/gSuO
%^mbIbl=lQ=6Kl[koq+!E?2YWn-l7_Ric-s:_&KSiFr<.P=MtjL'dL^EfP@"0Z&4k<dKff/"+%0U]'bYoUt!&gZ^[k*`Yc>6hF+Y-
%5gEAADlPA$%Qc6IaeP]Q(pN\qGjPke>Usq5PAH_<QlKt631++HFqIPSNGVbd'N`0\X`)sFAGiAIP:t9PGh[66'X(CHG-)rO2JST9
%l[kTK4-'KIelcOb`W#4=T@fp@rSGm-q[ST0n+HV_S\D4KQ2r/g0beHcOK6ER"X]2C:t9(J%MrKg#^sO&h.]'h%T_:,`k`DC3`jEA
%j(fahUSYo/3aX4;\@ts9,qqs`R&g,dO*7Z=B6We9r(fI2"kT>hMqDse(9uObrGiWW"R.>DU_?rIN_eb[>@Pcc:2DrcFi5%Ks'%\8
%D0I0B=1T,NKfhA+(j0lb<XL(\DPZc`>H]NLTOLU'QFq`gn.\\Qcm;+P9rUL/[<Unijon^-b@$/C!EEOd/NPXgOUcFV_S]<@X<O"\
%=g_T>e8"4De9,F?H)L*a.%mYa.J[g1B9T3aMM5ra:!%5G3S@-h`kPnV7Q>XM'3F6/40E`STLq:J_jR^#*`=nW99B_U[<m-Te.ju*
%FJnSWl6<57T=;5bDJ=,4k?MpO'Ic`%A>f*^:f'.DPWV;uH"b;ILVAdn;OY"Vj/mR+EY2T*l/J[_r@-hPSo1@+`7%`?rYjdQ.p*SC
%p-h)hGfULM^;h+DQT:<9$tZcZLaQG4jF$8Xh09dk0B1)`:-a&Ka:_S8PW>mi0:lE9f;Gc=ZcG4VImNU8Xg@P<ii1pg;!]A\@%:=/
%9:7V\r<6C,_S\a,p`bL;n[1IKUjRXG<Il?hhe=VNX%8$Ag-%P:lAD)P]$pE*MNdq&,(Cd&X\*7sN,4(^P6f6/`-)&e]_Ag47Z.(f
%Zbpl0pZ05`Wq&,BX,!Ia>d:*S]KLu<JocM^rtF"_09>m&1%tpTCM/k<\<c!@@S)@gR1,jY=6L'!LFf$E%dU<71*4?SK<[t\=g7S]
%L%AF%M#g*21RlN=(C'Eb6Eu)S+s=rd.H^g<6>:a5_[$p4p:T08ocqV[W*VXsGqu)<+t#8uf<6QJi`/alpF6`D?<]t7l2g.YZ]XRk
%fp>^oP>;/4HZ*UKUqY*>LWqKr9R*o!,;7e&/*2;_(h9%H1/RE#nCu/qI[`@mQ*qPMan>!7#Hg#?eg$OZ/gJ,OecfsYZE)3R?$;>J
%A!amoG/CMcb!>7$dmD[?LWR5/A"=NbU`I4@&cT),ZC+n6j\s6-PtBL@3AJ:>(-:(I.WFg=<OL^ZX-)_cfp>^oP>;,sgeLT6+pDVm
%=b'"[fBDYMm^<eQ\c$6Jn"r"[%1u=pgeA:M]?.mm[%!]rcLpl2cK(\.j2LC41*@:MUT`Kq,9!qYY+jlVfhLP8aj<C^G1/e0dQc[;
%fSs6IC_=1=9@5Hjh:*,m6G:fY2o4u`b'r#<'>*V.M9b4t$CmSr<UG"ZC?551p15!5Ush!sY5,[*?\Vri/#D(G[_n7N3OGn[Pi.U(
%Y`dXsFTs^PB;C#]8VblM'5.8H(8Rpc)W\QXO'Q:MJ<%<l:+k?P?#<WJ+DZoCSD\)T]8gK:;L.E)S_eXD:ljQYqU'qkTdk)iLL?V4
%2rq)57g#DJ8+MP8],7LO7s72ea6(D'=/Y_OM\ZmE[2]ZJ$.A;!huOn'bQJ\:De6G3(>]P[grrWPW3GLENnK0t+uG,FMoG(kUU""m
%l9d583saGV1;T%`4`o5UE^aiik7*U(?9?HO]M$*P>9S4:i[&@aNE;c"LO+@OJ\m;jFDJo/,E.H<\J@C$L!Z_3pXrAoQbh9V`Eqfe
%cUuM:=%*Dk<>)AuT"8dJjZ?<TiulrtW0C<e4MXt:UL-pAataH.jRIaA=#V,!'$4]$PV[[c>TUK2kpon5DiGdh"!q)<.3j?'4?qFP
%?\pBEI:l<:":JX7gI`h,%kT5plI!Yg(k!H]j?1:,1K;@@0ok;ca1f[D-B\%XPMD@m3et\"if..Pb?=Fn3Y>pXI/XSYOqiT4L]a9i
%IKRH8?a!<g0A2trF-l?#/YCor4H;4'nj<f^*Spji1UM]aH#97&I[+/t82]Ob2BUK+ej!q`6W72u3qgn''/p!2O<<3#],%Y'T/3dW
%Co1>+f4Yc2Pfa<Y]lLKfhKF#!ESMn?RT#+GV'9Q/ZJYjGali7D%[!t:gO4StiFC$,2[<#jfO46MD2:OKG9Y*q*@_<Tdq$?U816ga
%C]"U7TZ.r2S/6sU*A@RMq9jB1]gVl<Xo_%M3i<T"M7`_(9DcA>1qD,M6F<,ahMcLtoBWQ#9Go#\Ctda_3f_=^I25A9Poa&J@QIHM
%)rsgr$9kgH':904*g6Mbr)E9o9VTRuUgrWA3lGq`j-qF\f'^M:]q1BS>1K2^PuafsLGq!d'R<rU3)qb?Un,^HA5A6=E9OGO>9A0%
%;4N%%QSidsT[TEME=l*J,IU']8ekt!e?KBuF$jmjb-d^EPf3_0#$`$*N"c2Iin?JZnqDuW,^K9;`&O[PSd.*4L/qRJ)Uo8aUneQ7
%kpmpn&>DZmYRlioC[rgqXb`U5=D:R,*'&+:7)lIug1Pglhjb%hC0JJ5rRY$`Vl*i\be-:e=/G9tpF!O>;J`_:g;p.jWU`HMM0*Dk
%SCM"32o<p?>Jm[5c^!pl%E?sjd0*[J+P%kGSQ&P@;RXd\#useB.agu+g1p!j-[]fhj\CI97#$Ib#b>,&RX-75p-_$$*7IZZMTKS$
%b">L*8>J2'>tqQt[#Knn`!t`ma@b5YkM(LB/eXJ#lX5Se:`DDl=<?t=OP=k)%GFjUdH>]#Au/7<=ZW4"+lVJoCY/GYp;S&!gB0VU
%&mYMEoVPoUgJi<q5,A(TV!Amk$Z<\j+s08+T*ZTTqjj4@>\0i<#J^93!'tR>*nR(f]D9aP3RZJ';n+*rX/gZhfq`^[G^:BYg.<@<
%Y>.e;,Yke=fYo7:S.i1@*"s66oG"HFDGa=/2/n?D4'#!,*9msZqr=uA&mME7/%BU4I_J\hg=FO.Gs66'is=T5V!b[q@5i"dkHUiD
%a<k15%.-R72Pn@PXL;H""McKOPnn[I[b=M>E(S5;lfY<P$#`Y:MT$ItfZe>2D\u#:lUo:1*@O^YEX@q=Tf)M#dCn2!e:O0qHAM9%
%7@q(HLJ$PU@FVGR^25[oRs@64>kbtn[eqX=MmT0o9Cb&Y@ih.OG-RERKjdOH`^"]$-&C[$+HT<1]Ze&&)FnFE3T]h.Unaa&.WJml
%Er5Za2fe&&j[,@Q8V`Sj[;HsGA*LJD^rq$f/Ve:)m<kP>3Dg7,.H3%/l.RufT22sK^nugP9?/jQVp=?R+4*a&f9`NsX2K_&b("WG
%&R"A@>CES'dB#.c8Ul5&(+u5Om,U!oq*&:'rp7dTD$O&sB5L7;Cboi@YR<Y(d-gWHgf'*;&cu_6.FkSp]3JAap=ShiH.t!E-ApUE
%V9"A8g.dWr0WK'LqS.pKfEgM@Cm>OP%].Rsp#52s.dq)l?gp@.ZqVFQ&!CmlAQ=kG%c%G=X\i66j"YX]@eeL*G3n8]@-TVHBOr/I
%`!uC4/)@(egt8AFb4(K7;?p8S6s8-&;-q_*hM2!a?-OY:OtBcncSfeZD.HLL>ldQ%=VDDf2X3Jk-%:9!0rcYrG/[RdosM"sb86\F
%URVjq6oU'##Q4*J/dT3iBWg@,bf>>iB?PrrW+;<6/TL5&X\FAH`I*.Fj^KHBJ*6YZ^B%#Wqg!fC"CS^3r<5,cD26!pL#[75N]PAf
%eb99+V?Ip=4.CL.TuNng.(q^bT\P9u/bGK%G;0&&0GJtGR.7D'kLC6.k],8-nB'o7YWI>YL"k#d9ppAoIua1=:/%?0>$$8ad:3Np
%jZqPnbGS&>auo`H(?r&#4$RrY7Ng\^\F1u3jMj9<_d)RBj6*J:lVlE/=lc-fs4_nDCBlQ8e\]Q<--EOXWSqI,AZiRT5Q$8"h+C6Z
%f7pnFCVtGmFZ(4/Pbskfg[8ksa\(%LL9#QXe]WER&Kf_F=7J$=gT-)"64d>F,M?ob&!("X'>tidqV@="]ujRph8[V)``/4WfmQJ!
%[*sE2B9<[F9A@?o(Ut[PDK3)]NTD(i5'7m77Gd;+;gm\[=[9(1-8REtH86\+*Er!m@34(p@Sn*aRJt@3nE/3@@+,=pD.a!.gkgfm
%>U^V%"/!SI::h>t[f(fW_o9X=_3&!DWBU)$q(o5!^@KdQ3E>rk-T2b<npQ#+\?aH6$6IZ4TuV;bnaS%:87u:YkRdR&@(u.@7QnUm
%^_aONoBF&[1;^YBb-g"u8\5SDRu+9+!Fq`->7H$R%Vu3_!j:+=kcoE6`D6dUPoRDOG+TD.\R'Q+9SkEC9Sot.9o3fOQkJ;K1![N!
%DFt374j?uCI2_'N2&0duM8t#(*B^4;(V*$,l+l&<?nU1b-IGTq(;SRteHXgC@M;6r-!1?2E58#C@Q(_qrKL]jdm;uj`+,rO*Ze8>
%M]>[T.sFqOgGu.LpLfGkn%+u$N.nNA-4^9gW?9g>LrXnt*B[rPPrQhTcEKP4M0n@]`T@Y>!ms[8^NXu-f9L)g.T<P/RT;p8:tI3M
%f[;94r&T/Cd1hD"b3cT)C^$^c[8*oU*A(D0QDn!AW_"TS2epdETib\ZDKjP-7^;IPciVq_^F*/ig&f^&L9l,`$.qdlChM!l/BENc
%Pk1VO36Wlg%N\f(.roA4Y'.!N\;%.^?&*$SGP_:gr^*f86!f-o_L3N4OZkAL1=R8rLPOV)>$61Ei+)b]6qJ3cHm3`K2QD@[Bk#0n
%<A'oL?b*.R`m$MOhAE[G?#&r_BG@9qG]r%7rDKdOgNHLY3>.:DX4fo_)]0qAM`cdr9uKB2Z&jXp*#/"e=Mobchlj::W_%m:o6->#
%dAQnc[u@>_%[-j\2I;UEB0JKVcGOKF1mPuVWsIU^)RkQP]V'5D'8ZG2=`*b]2ffEe'g$Y1LHgbH*2?Om%<:Q>O&n4imG8@!!_H$+
%mel"RO\!V&B%\b-b0tNgZ'LNbnN8r3cAWt+Zn-8'ejOk4,'r1Sd;7:Bi<$2a+H,77@'/HlON<UsN;76s#TPulSsN7;4As#T.jiIb
%HjE4412>g\,G2Sde"\Llcr14]*lp!]ZOEH9rn[KF>[o^2Wu^&9,i(M2eeR'&E/%$=@8J`&5#D,HnsG@c0O%XseH(.VGWTr[Pb8=<
%J*C+`'iUSCa';dTajG`bT1\h%Zhi(UQa`5*Sa/@Ig<595H&jX4oLU4XEm!N_MPCbb*]sL7khNYcGp<Y[LEZ:@*P7)D:1'GqPXk8m
%_?DRJ_8SjHHe+`ic"7jPD<[:5d%7O8,H7M3khV(m"7ED1L,j+d(Td&;HIrTD<L(0`>IeV(QXC$NJ[S<(SO@76fg\`QN>,6C!iMgO
%,agbAXo2o_ON^JcdrZG-N%]3\ZZ:N.cmI/7cEC@n6BG<U<V&KNj_WrSCisZ^osDamptjEQV64n9*9QOOi$U]&ml"VB2XM9Z&SW&Y
%de`>bCYX2o>L5VA*8S,GMuk0Uaa"=eE"Kd$qgK?XbkgfC[7p,03QT`4;:iZfT'OLh:4I]QhCG$^;'caX3,Nn4^k8>u&jL.7IO.9H
%l"?i[nZDD0>CM?A#mWRigg]#_P)+Mce:H9E,mlD.*Zk75rQt*X/f]SQi6I!SmuG<I[Zqg0"oWaepTI.oMnH+0mf)MAdF+Aa3TI<0
%T8l@pY=FY%lo72E:h(5MU7QT3M7-K'jA;\h*`oT(_:@?q4H:?k6)g)Bd`03&m@V?f3OedbZu#qJ+>3h?[uZS'P5"F*'^mO]h,!C_
%D\NZuM=k=_\$I*pFfuj!NGU6BCfESm6C2(pV%fMrDSln3`:/Dn4lN\mA,\!?co!MG&$5pOmN#BN)D:eTi;l.1H7<CF=^mk%2V#g&
%8(s/FR0lFAD*>>bojgj`Rn($*J%,EQH`MN"]4[kYdq1Z"`u@.XFcmi2DnDf_J0LI-FO#D@m[)f@5&(ignP7ct+$71_UDfPSfT^6h
%fB0?cZH"u=L6%pR;A%Z?@d6Y'9cn-SUsf.$AmuHun/nRbbZtp8B%>R*Xq4^[`).L;q"o;_n4n<2dEC;4YXrlFB)-]IK^&8cme55p
%411=e&&HqufRpcD1;c9*WGH(Z+n]mE'[5/FD!*`ekSJ&@HM)L62K<u]"_5K/\=*#cn.+X$96fn8\`S?5B8h-ka$Fg&U\,0a`WS.b
%d,H-:$919,OCt7#rJb8L381%qE&`l[$LdT*NW\CkL&n:`Y/0F6f<nWFST/oA[j#V]Baa8Yeh&s'(&rN'>R*NubiKEiIM6-"<3pqQ
%OiQu?4EQ7d@adn.^_jZ>L&p#T.9buu@m%_F-NfmX3q1Q%LT^oo@TV1LN5M9^;V+ZuNTBW<ehKN$0ioU^gHJYh9=%TTS^&&[_'ol8
%Sol%m=m^Te"YZKDC3FGXZ](8!8msqi-4#%f[WP$YTs2mWFV@.EY?7sGT^#pa*1e3dF4N7=7=J%:'c;nAF*D;Z\QY"XUCIh-`_bS]
%8%W-X4@d-O9ZE&N8&V]O#rrttU@-T;3,j'/F@6mWocVD!:`MlE6i6l84;sZGFcrkP(:J`j-bio"'A`'4h*,(t&YkJXluBECLu5At
%bn!klAoUWDl3.k>ejIT8H&uoG-lE?n31r'UF7;SNht/u[`"&GfdM^[-2"[/s8^1H(AXP.>5U!pYs.,iT(LXo61B@KK#BH`6joq6b
%[e>k!p=ilsbE:>d*S/E6iP8.?UpUtWgIu<;dVhHiE)A:DVTSDFMZe9d;,co;LB?tFH$[rVh.@&>UTOKL<,%0o.5VQ$E7?(L%R#WU
%?-oBAB`"YBo3(1lB%3A[+5+(4Jq\3C%N#iOoRtO1WS0"%C[&AU>8%+P0)hL5Lhd>dgM<aTVoW7U%rfA6<RDHHStO+R74f;1?Ld1?
%DOhL>NnPW]_5_UFd6XUG<V^[W'7Z]M&FAR-i]4b?H-.@BgNR1l^N1G:0tXbmJV$qPNrZj(J\'CCJNs,:kX;A)Yq.P)IJ>[U>;0k;
%c,_ua@eoGD*^o\]kmE!4+sI:-C,_5tBuFp@B*[*iK,C]J5NFtX438sg,,8$b7ft$FV!<gnbDMCqiiBX?*K[!=7cWWTWs>u<Vd4^B
%=']TD[9aouYcd+_A/&U0*[n\i.9b@ocai0\CK]7I-H\2\,<=p:Y4[\4h,W2A%0o[*B6'W43ApT;(??uOk\T')D>)q&B>7c`q/mb7
%"#$2Js'Bke#eK!PLnOgN`Hcba'F5L+Em5\8BL,r5H1Z6t:t%Z"Iaa>u[N6<.]bK02BYtPg35j0DS8'Z0dW>bhf9A8r@Q=h7E\b\/
%6VIVbl*aR)/?-_s$*HUmM"(?eFP>s.'WRK\$h@b>Ti4jjiheh@ofBYD)E:RFND\K%rk>2dZ'Lq>Jd4C9*\NqJ+AUV+f@F8iQN7Jb
%_I=6=,g*.<$(aa5\0EOYCs#c?MHYh:Ee1Q2X/O^&V`k!BQTFJ1EDU#<:*B[Ci@\I%OE5Z93Wh\R;6qbYD@2p@?%e5*?Ua08"W6-m
%HIIqr$YZ"-0WENC=d%Sg-ZuT?PDQmYcX0-+1q>&RMQ>60k`e,@X"5_CF9n(LKMF2gV,"hcGK/HgR.MTkV2g2`mW[k/'<AVl9NJi5
%lDt38%p(]%EDQIY]j.Q#j!ls=o'@cDB:se`KcQ:cD`Yu.iJ#Rj^5<m#?rahW"rBG.S?B%LY/!`hMHZ+FF.op[Z`r,8Vd97uO2N]7
%]`5_g_A==2I8)%HV(6Oe<U!'WjOW.!gYOOgkGuq(f=S19"!TQY@i`'7msF]%7rQOP2*u"D=q9@(PkoHFkXU\_lHX6uY2/KiPKAd"
%EArA@%gTaM\G'(q;jt&G7ZM:[(fM`5a!@lsPUQFj;p%\j>,9&*m8AiYHoBBm>4P,1OGql/eNPZ-E3#Z7p)P&?hWt'b]cR175Q!b7
%rp+M&k2A60s/u=XDu\rAF5Hres*FI@LO]'M^YQAKCqjY5]f?F@+a^LMgf4X8;mL9/@,*,e*U4+eB7id=I#uBA%Y=jF^GCpg+!0a[
%qA,CmOof++P^l?SP3gG>(,T4efPR6$mEP[A=6_jl[!cD:q>jN1:]"pqK@4"YL\\roN0Z?gF)+SE'=C>X/`]2f$`"00?KI9SPn$M`
%q9j/Ynu7>:XNa3T\jHmH<4cVFnp=!1^2^lkk4?-P^K<&pTu*"*NT$_SNi]pWOtu[G3Us$D_Bp<Wf#4_n<F26mHc"1[SN`D^cBa%h
%/4>DeJj'Yt9/LI)dQ$U@'^o#G)qoeqhptkk*p^6.T0##"20(.OXh;@3AXD+4p1TGX%3;'Iqe8LUl2-eRZ'7J`8ar&t;bZo0ktp#Z
%[duec`2L\l%S0IL=!c/\KK\%D:\i,!4g!!XcpPM/a!iQ#W\d2Z3;ifG<ck=N@uo4-fu=M/4/`5Lo_Akb218'u\;>k&V:r2'"7JPM
%\@!(^V175Qb@Y-@Mq3A=<oP\$MQ-<=7GHa@?C'rW43+2_%c&\gn_pl/P]itR?T>4Y;r^LHm'o1j"s+gI(K^0@J]i+iPBC7pZcAlh
%nFX1s^P'$N`G:;?F0a^2gW"@^NrAA2G+uc2F+/H"AM<RfcbFF<_oj&AOn\Bfft6.t^gi^$>T/P0GRB(Xjg6*NHScs6>sb98HJjJg
%Y!kCq8WG<;U;Id-A;@@:ac9"]kGOYqp*-.&r<k"4=iKsT-c2tm05%Gl#mIfbVXSP?d`\&dHInL!OfoBNfG$,C\=A",%,p.pG#H=;
%EIN/sM$eU`jY%VRB@YQd+9)G[U+fh!Nm16h(NdP0%VX$1#O':Q9ipRBe.qp"\E(@\7oi]_LK*fRqbORaYi<iYW/oRO=7^q`Xjt+A
%lU0Ql?J^keJ(a&+:T<`a#5j2$rFST?7Ne8%C[[k^\__IF5W;'q^[*2Qb$0tXHQ>tT+E%H`\!citeD$\_J?BE2hstnP=05gbS=dBO
%/.[VXRs(Y/&')?m:&0).e3!=fHR3sgbB>lK'].6t=Kh6O>5:Es[<W;qlb)VN[3PklM2YPf&4`ZA"5Y5qHasb+;sOV)j.KB+)\1/T
%Li+jdred>H-,T8eWE]G4On<;@bg@G/_p7;W.gI7io31l>JS4;kd8m&1?njM0MZ^(#T?+5/!qu2%[s0G>$"6cOerG@h>i=i-8M]@K
%1"tu5ds'\jB?4duTe2SRVaN[IF.Ajk3c*<K2t7'h\/lg$>XdXnSj\dQC7j.R]q+kO:=sc('R?nN0DT-kXaB7Y(nBQs92$f]H!!h\
%oc2POMKb0[Vu*YJfj>IHZ6*p?Mks2rdk;$.Ftr]ZKF/qOK>Z3H:1*9o>)*F"(O8KnBtGk8Xg-<4DoC-`RMci/[#$8OF@XABH<B"k
%JEk+cWgrLXM@S!S7KfGsiW\q5G489#8t:N7JSl0oN;)A)U+`C'Xa-$"DJ4%"34FPN+7e$k8=-a&@/qO9e>M8I+3pJb'>&al,oe;G
%b0fXTrq4U*WseZLjbAW7EaUVD*j&u$#aX%[U5)im/I24YVskXGV^Kc"'"0+"L/&$+.Ku]tb),,VeV(u?!7^[_=JS_.o;Z=eUG\;"
%d,+>;L.9QfEcoJdPs.Lo@<""C--VtiH"?:bOuRK=a\>:(9s`u8Hc&ul:((g8OOs^KpBT)P`/!%nXfY1+,*G=I]c^"04iD`A=HE4I
%:l1hVpMbYGiB559f34#!HQt2fc01_?[TF%#+ps8=dt4cVI'b:QOuuY\,*FG;25OI\e$:L?9kt`**"1Z3\cRnC4<?>%WuZUgC`^^p
%R^&;F>.XGNJmZOY,VQg#"1Y`nDX^nX7!TdL00MAZ+s?$YL.q5.?$P\<$VFc)-!5P^6P5HYhO$Em@EC\bm@m(H[)S<sc^Gdhni6O)
%5Y;F2Y%ck@hpsF2=8<?3G,VnWau+Je&Mc-``[\p<c'(VQFf&4+B[Xm;4.g?\:&7:Z$8Z4l$#3ZURooT?EP$]U#K)niI4/+ne<O2f
%Ur/Mo[j5Qg$!u>3YFc4/r3F6OV-V`rC"oV(?DuSCDE*`_Q[JnPq>Q4C^GPNa))o$<I<+Aki<Z"RB9)GI-@_scN+P$/>K,<&pWji:
%0?sJm%o-#3qu-:J<N'UWQ<iT.`qPh_IsBX3)+Z6;F@^lL(7Nj=_!YG8m@MsVfBro-\-1p#9ighHKXu.?//0*p$_f!A+F[tUBHneC
%<GAD>5tFr2q;418;_T(a898!#Q)mJQ.g[DLo)>rFETWYp^JlO*<A?\lbM+fnTd0&P")[V0(KBcBZ4d*Rcb;]&;P,%#AH#%oR(R0S
%+Cq=i<[?sE\h;$"CSa(h*%,T"8=jrXT'b`Ug2C1J?+,&MOq*e-/`HM6gGKSNrs`n%S!s7sHG4Yk"8f.h^6Z4HG>_8N+l9@gRIm&H
%KGUikS(7tSo/'FB2KEZQ\39-BbLdrk7I&Q*Sb__AWLQX0(tbf1RMSaP:X$Y+7Fq25\#D/47hImLM>7Fg=lp"U5oWJlnO9&?#5YTa
%\.T#epqrPLi_\s]X8C3Z:3],"ckZ.L]'LL]H*5lH<:]MmeZ`=/7t]0"8-Z^L1mT.GBpSH\Rf_,P<smk6c9\4/HG<:`8`!uYEKTI`
%8/ghtmt@W`2K4((HSJ0?db2YWTnn#3,1k9:r/o+PS:Y4(p$,g"@-)NcF<tGmDb!>?*`?!U`)<N.8Mo6lo4Ob"4P@bL)_cG.7a:XU
%rdBZfT/]bm#2)LU*.`7E@YQ4e_H>4<%gTu:SW\.7/;-`u=\(XP@lB+2$+:MWm5QoP3KW#,jLH>nj)gI*Pd9!t+hcgVAf;]d&YBMQ
%D^5Qs`Q4OP_'-K8'IOGL1U3=(=8ITipOss/aa:sqEns3da$;Ycg9Mi)V.j@9G=ar@e3aff>sfVDL5a^A8g[7++ZrZu3.,ERRaoP+
%[SY*n;o1(<D@mW!<BCcBg0;&#>5amY4mB!6H&NIufe(O0_*hA*\RT'-Fa\n;L.!3:5tKA1a)q-=1sFb.?#]tX%"^i:b@bh$Ha?m?
%#d\gBZdlBbes"DQ;'6nMJc9^.Ko)sET0#uWqp(=45h_5?"GNm'^HQgoD7(ZG8t41=&0*_L5)YoD)n#MsR#P<WXaZ8(Sp&YR7-E]n
%apB$[,W9l0"Q+?BM0=u;.fg..^#U5U4Ad:CRs$qYkD?jecZT&2Tf8Sko'JuP-[<+Z-%uTHU<)GQg?0%h^SjPYR05>1]JNpT@(8lZ
%6Bk_CG)S)jJj4G.0qd%g,glgL&.^Gn2\>md"Qu]o22nk0H'<ti>asGpWf.4%b0NsbfRJGTCF"FF2gL3c6Q/_q8!NM\0.,A)#6DA>
%1'NU]#G9kK?nt%/MG1uV4/pKN0RVD4MDX6@p;0TR'i.*NHX')7FtG[p)BH'rMeJX][>+@,LGi2:'%'fGE2n*n:Oh3ld@o-Pf7-.2
%b2KEW-)/XqHRN36+nd&k,"0!e?I,*Me*]-hSST[_P2/DZH)!hSO5aXhod2GPF3pl[d@?=\$Id'k$G]X]P76i6X*6f9r1+:e+0KL?
%ipQI5l*JLT?DMphPP+p*oW>l+Bo=Wda,4OZ<f(fC<QIM.[3e<Y8mHSP[61tI?r,(\OfrL)oP!427E4EaSIn=m?eU*:[1;TK>D8%h
%h!+.JGi:lb9>6uireCD%/K&!32&als)e+T>&X.k)!FohFq@;@JgW@OVD<T::OA`:TgL\`kOk^?^j[epmMC`ulT*oD/9i>5S^?HKr
%_8MfWbqskgAa)<_"j4Q7d:+q#L"1?7`d#sG?I*qhl@o6*nd"raa>*=X7k<i&NM6%I6H0+Q!mb'^RR4H[M#U!uaKcAG"?ActqnPHS
%@QR%'#EEMsY(d<`qO<%'B<0oM-<6XY/U):Y4WU7,c#D@e+`[8HUX8%,`h2oK#Y2+,\DOrM?7Nb!3RKd4DG,'2fZ5>XP]P3'P,1::
%m0cp'`u(nrKr3-9YpsGsZPad#l+l=oFdSgo,GdZT;p4rM-k^%(quubJW4[sjUO.P"V0<HFL;T(fPO\N12j2M%kPXG*T>(@!2o#1c
%&!&rgs8JWSIW3%,J+r@1rp[OLIfI/Hr8oqfqu6KMJ,JfrhnB'X_fJ8s$HZFa(RDi6q[`-[5$X$Fc#:>lnGQ-)If,!#o8H'sE4l"W
%YQ&tL\pa8+msfZSd;Qf"p8;idJ,IWBI/j'chgb[TE;TLts7(jd55t)Mg[;Qnrr!@Wr;QHX&-(bkd(+#CdT#M?fUcg(%mPOCiQ&]_
%s8-a7pkRc)-MF'Jc[>]C2OsVu1h0bED>1gCgCN3@dm&nj\'"`g%mSjKr8S<Ks79U3rPODom:-"I+7A0EJ+pjAhnB'br6K2,IUR*P
%b@`#H9`m%)rp191e2)Od?l7/7[I(_Wqtm#bq.j1+<Sc<BI(70lrp%T@s%i*5I/i"ET)%t@-a_LPqVI%^Ah..aBG]^HoS3VA/=t'O
%iD$qqVKb:cN[!=cMfA1#QKeDY*`#45n0iu+C\FX`"XVV%_4JbD8CYXQe3;ZCEo+TC=%3eWF#G>$*lu_b#]Tc:cqa#hKl;00@7]eB
%`LY9JJZD9hj1loU;AonO3b@GN63=jjD";U-X;g4NE=egck)J=blUQBjgYJ@A_dbdn,BTU#Pa?r02Cj[]i[M(PQNjWdo.$l><")/u
%^]?YD@@lesZC0n%.Vp6&9)Wd\4NuOj7p3Lo(CQ#*.L2X(NL%hm7cS,I[lo*VHiME!4^S"Ci!hmK9#$ORA3?7?^n)biNh/oqQbscT
%9=(b?j6\2a+BIe\(F7)_"&JDk3g-r3J>QM:rJ0jQ@U9RNlNXGJYXiF;<j;enAYi"%[0N(C%TPRDBks?jeTrB<T8XIY:"Ut#@`#Q$
%hEZHePind+p@^W9Q/E,>ZC;IEUk387,)J6H5?-X]hiLmEh&J+<P/YE^n(LOnjo7b&N4j[LQ][X`NIt9q\GTZ5*ROi+CT0JS\uRq,
%C0=guW@,jJ)dT(B<!&"O$OdmGd`sG7>Y<mZiQU+NQWUPM"?e[7r0-a*mf8d1_o+B$>AMMe0;$*<\0JF`M$k5E5CSaTG5,$]o,E'L
%a[`ENd[oWY@sJt>WZqb0jlfPOeOoCl2`TIXU;L:KaT@B3QLQBoDB**f`=e_o;/Z"uGU3]"S0=Xb';@mba0s6f5POGaB5F0#&GblQ
%YDH(q).,iFb2u&RJ<s^"Taq`Jru+Burp8lcNoP`h3',QKj$_KYY$0CAXp/0$dYOZ#JmUO&qm56&s6e-uDS$^)\aFK^=M%53#DtGW
%fqR0=RnTeo<ru;U$IB`6j0;X'oDG4L8IJPfZk[s`akK3iG1A2/Iqcm:WcGXY&_:BFTdE2i$_'>AMbYmPb@3CO_)cXZA*Ku18FE`<
%W1IqhA2&S/Qq!;='=<DZV5];^a4WB(Y^In[#[ZRq8MBecpP#QZH7t6OQDf`OVcNZ!lQsV\"b2e@qd,br41np%`sdC4i0tFeZ&C_C
%3eCpnJbW@]7&Z.mC=)d[=1NlFFp"3n=oG76bHE+\)!I5lV1\]$F3ckuM[\YP:,Vn%-Y=a^B^#;7p1KZc[,\oUo(hRR>^JB+&g\50
%Odh'[3&83K<1KK<6ODi2[@AGnqJh7JqB$7,\W\3_>hOTtSiJ*$W_Hhk"MHl&db!oN]tc2-[JJfR'1Zq%MI!UlHG'(YQN/<eYKZbX
%k%r%EW5qB\qZ`tl8DNCMRs)b5?f?JtS(p.YX@3>1N3Dp`%XRQ4'%F-o2u@HFfW%4?6tG)GE'c^65@Y5pq0CZA<qc@B?FHJ0CTm\/
%;BfG[8p/]tNH)X^ouKg(i8o?qe31k*KUnU?!AWVRZRK%iqf!dQVI#/Ocr_h/h!bVA&$@be%,.i4=$%Q'G.)=;\9]lf]Bu_M4EMl>
%nj%=F8CpT5%6fl`R>^@(?1T1u&!ppad[&q%M*>RiVLJ/GD:_+n05i&=j'GDuGd51nOWpRX%1CX:`EF?9T:SXs@elsA:F-,*_H\0'
%(f/Y@poqoA4(5[:)nE*]LnSZ@e3)42LWBLj3G)t5EV$^png<i%.&BYKnd_r>'L>qdohhV<HutE5:HR$r3fEP2\f(>"AYqpaYOf6p
%r:VT,J1.h6$9pTri%n,dccB5a.i\sW8I%Cjm[G3M9/_iM?IY6mNZ2Frj2KQ/XKJiq-j;q*XfqNh=WRY"]lo^T`s@mq'^Hg[.<p>^
%XfNMu$2rSK&s'KPA6`,YU0UhmBFEA3"4S>B&0*0B;fXq1'1i&e0sZ5J/m]O!m\JH8bOClP\L4U[[..Sp(CNFf.uX.K`b6NBE]`'A
%Ks=U981#nm7R+,q-Hh]65L%,C.0su1l*4*tNq3GCap?O@r[a4KAOW',XF*A*j<)X:W:.tZmp=%AgVq&KCeb"*Z8YLqPbs&-ZK8G5
%E$>+F>d53%da?V^&Sc?##E*O.m1r*O]9?cXRqb6X,.uj[ROn+Q:1S4*Hd)08_jQT8c3m]!XGS`;.W84-k:N4H>rtiYf4Zu-qEpd+
%U=rYo4/An27GdTs%[>nk/_Wd=n>o>s*9J4.?t)!4KCC24TtE2HIu7+0I=t=jCq.2Zo>)eWX6*m;>4B,@]:F`EUQF@(;fKC1m[j`*
%g2.UHmMeJ@>ZCdUCA-gMGqU'>S?:'dn&cnnS'E1&&.ZGYF!M*jAJ*g>;Tut)lln`P&!jb#C4!#e$@;7[#)\Wsm=U1:4,c<A9U<G'
%\\^"gF5b'KZH&G0[WP1,nBo?flT*&-Q\d2+S`DYVLIV;7kAIsY2k#B_jLOY@qq?Y(2a+EI,#s=:7ihN-8K$TiW`,N$g-*sRn@E",
%@#UgA>kNjUDIi*`OEJI3Sa8XO@-Sg?j-&D.f;EIWDG#>dMKILL>sFscK)_iKREZp!kfK_,I+CJ9/YUkEp$(bg.e6?l?]o`O=soM]
%c5=<B[\EqE',RYO8GfZ78Fb+;6Tin0(AVuSVTp2#GT?t+@TIN?m'o^1JB6"bf]a4%qpgI5U*8/E>K'%f5`ZJ(`GC0_\ac.Rs"i9H
%VG7f.XYu3B7!Uo8rP<W&@TGE8NZ=JLVsnD;=`P]+Ft.h)de!jT"5OGN=/6eVgCaJ^A)pWin?I"p\^UGa>>hUEqE#e3]>C?LlDa/u
%+l';rH1KcA]AH2PW>2[:`1M@Te\Rl\olYr;B-'nChnT3O<!n-.Phg0:PN*eJA@um#S1%17=09gQ2YFE4>MF<-@aSlck!JP<jV?kr
%Id"RjDWpoGJJ!cc8fQlu$el-V@5VO;gufjOi3du]L5e6:c=8A>+h^?o35Gl);qkKVW7@ZtNggRK_D0AW8mMX3J?)U=js><IL]Vb[
%F[,rQX]u+l'F@la"+i>R=^C>SE#F]+dHp!HB-O+^b@hm,RhRe"X#mf(^)`1_Dq/eIN<-1'2<F4UoYr'MmEQZsAMaDA.<upC*o;Jq
%CR1#?6+_KRAp!)h*qQ_kdok0eHB"6lTsa.;h12RJh0/^.5f?B%9ZYE^:N1JL!@`I"EBXPJ#!X.iZo2ELE?J>XrESA+N_=&<<\"C6
%a('NU3kC2P8?^F%#E<REj]LR%3cs-Fg[RhqJ#W<f49i;VeP=1X?=J[4E_F+V#iK]Ul[TOJPVlaAHlN70WOSBOONW0ucXosc;%jg)
%?3V[35MhC?lHjC_Do[K8_n0(7<dP(]qEu\%E*4p_IS9[CbA_u#,A1s<"PfHJ;7rh4X4to5\I?OVD"_oc[?+_TAN4?S3J(=0X$aAp
%^)`9We]6lK<eCW:4-`?HddEhN_$QrC#=Mt-]:K+ejDM`J)&IQqSZS98+-6*JkiaR3!PLZ]*4.R9+1m8;p#id<2oCd3*_jbHh,\k-
%\@P(_prdrHj=_55FZ?*N-"#bJJrV%1jMiFQ!s$NqC;rLkj"Wcf4e5"nUt9i/&6au(I20/9FPH??!J-)AX&jR-_:>NTDiPfnr:[7!
%"ff@W]06pKiR\<PO7BM>#'(TBq:Y,u-traX^<:KVC^,_rdd#.q[r7%sE$NP-F_lZ19>o/@bDLk4K](%sDueI.<QC9T6%W%U'(j`L
%_RX9#j>%eJZe<f1e3\J@QN86=p(j/Zk'D.(E>t!hs'MD3iI!M+I>N1dSQbE!@cJUFV3G`Pf]d7kj*cLfoa[B^`mYL=-PFZl[(3hL
%>i!#l\%g0l;s<ed]d3cgc#5\`)mU,o*^%="oQcH=G-J*Le3E7f,mHTG)Y^[(;sg&=&cNI_Gd`'8dGg.K0*iU(m<X*W@Cp?`K6.j3
%fe16$@3MeM$_/4U--\W7qCY-&1f[cMD?Q$0-O(;Eb.!T)ZgiIIZaeeMXf3&RI$2HAFQBY3mHB'_"Wsui1`ND;Mga&"YLZnfHToZ4
%J&726MqqAa%t!<Q]eAU*JtRTGV/$J;QhN3.dkBKj0Af.YnR[gpikFT<%#EN`K&U#%<=dELm3&)(rkh.b'9/LN%?7JK4KqqDDL/A+
%b`taajC6P<(NHp_\@D'/;R)q2V63/&bS]h]6Ld-GS)'p5U#p>+[o3K(C<"p/L%-SIYY1R]p3#HLN6R)qcZ\YPMIr/G-PO2-07]\2
%0s[_8^1)5W0rq)Q\+%[;Q[hB0+HF[A,ZYCPm=^'eL0R]?8@i=5[J,Jt64/Jrp5lU"TJ<N25QDY$Cf7jXJnu4*%%G5X!/G)VkKLf^
%2W?d5F8>pV"Y#L8CMiggG@;Y^=cT(MG(:,tANZD]'Hs-F8n_tqBbfd$C`t&Wll6FbirE7c?=r+:-"XaW_h;_jh`CUha`H3_'$<*@
%3Jic"T%887\#\"DO>B.m_J.W_p-TscGVb>OEBg-l,Z!&Y:nf!KYc_H04EtI><b2OS-_d">nEM+`Zb@2+j&fIm#/\,sFJ]=J<A[!u
%M<;[MR@G+8H#b(3]=De'78,K((mmN'qPe:Cka=SErM1Yc:Q8T)7&`I7Q-(Kd3Pmt[R-S-0$YN=Kaonnj.*:=N^9Q2L39O$&S`L[4
%@B5\0l%&/OeE$*k.S'E9!,G/HCOE'DkOf$XYf7\an4\X#G)UYqA`!gQ,!k77,BXpkPF[kR-XSi]_s"E=R6i8sg(U1r;4D1/_$_^F
%K9Y\(UYH?P6S_Qr@R5(!;mndk42#$"b7XH%BJib!>$IUJ(s(,IS8a65S$2Bd(m1sQg9q;B[);O/N)8n@C7ANI!2*C^>j2ODHGMtP
%cO[9Y3+oK;Jl4`:H^A081Y2j[96OlHb_4PJF$FnrC?`!CfKk/l&\:@;b_ur(!;rFY(^Ds`1_`=>D=)T=ekm5D)IasKU([rR8nuDk
%]Zh26*+<.OP$a>\;16W04(]C640K-_ELULo7jGRb(oDlu:McTV6FFWl+NGd<6F=657N<mJ>pp3fa.eHRNK@5GP31h"Us!4l#M)t4
%%*1_C?euY^2O>V2aFQ#d<XQ)Ta>hB5D@FZ6"ko@N%rT._]N-#SbBb.gQGJ4j84EpZg<A7saop-SUj@]aSGf+Xkga,-\I'1U-t,eC
%d9.OQf&CYl,V'iRE#snogcHtb'[CW'1bsM*%(fL9OXk@nAUuUlOa;gdNL=9.i1_&`c2AD/,q.s*;$E,ePn=h+02kT:j[1C9h?Ih4
%Zs*X5^_j:2)tqW#:M?i('$$R)_&.&m:H7`\Z80R82'O[<fjd8?g?PY@S0sokm$"jsG)*T`1dUh?gSh`Q]N[k,A1fjk=CDGCo5_69
%6]4et@]A0Z"qF^0#_M6M6mm"'-7dgLd!fFH:7Ukd.ICY=3m?>UQR$aC,/%bcMksh/d]sr]E!;pQ19<n:N)us"/ho:td7Zi\8L.'J
%!Qr%,1'k7]p0qKF01+<e@A](;CGh!>"2EW1E,"$ha`hFRGl>ag7F4P\K(p@MG9$R+<72\0WCjX8DnGkWMa3hjAIj$mb]-X4/4B=\
%ZgE[K>dFNnmR6su/l4!oR=fb<Z-IY$\9*NQK4b[.Su$)E6$FSR8uo"-<nbB9CqD$t5SQm&:ItXNO[Dp'!TeI2`OP$$P,-2.'/jh)
%d'87&\+[dL7j.u<5QYdEdG%V51Z[K&fTVk>mtCSUhq0i@?>=4*8ll3MFGpTd&l!5$F&\cbp0mV/UH`P#RXISiC`YK+`7W@HZVMrg
%Y-8.M/Oj``3mbKfU<O-g26$k6:P8nG\nblKD+h4nRg.WMZ0eo,-?ltfoXg"GBZ]+)\Sc%JNG&rp@HcSN\89P!Ou/:Pd41"6n*%+S
%99b#BD7Xpa;kR/_e&Q$dL_O#6])&N#QuoNNob<sGk;1_B07Ai.=/m.mGI/7;opn21(f+1(aHh6XUY_59l2L&pV@r>^],oTF#6p_N
%*=L9o4=mVZ"<!kA`FQ?5_F+*,;DIf&1.%ejTk64NNCZYU\l+1&g+(?B'?"p,o:\iS>.]S<c@*mtAB@;"GTgq4m@gL"n0Ul=e<bPN
%GXRPe:/IXIiK>UEH-&Y$AfuPD%WG,4/8;8>=eB%RZW2'HdIPc[<aU+L:I%Kpb>W_(;KA2>Ls_>XM<A(+N%!KFIQPoFA0S-oR\1q^
%ea9Elh=p]&:@>lB\`4Va:%:f$$NoFD];RYCZuoUB<FCs4%.-@T@?\*(G1'[?)^G,tioonLZ&5K;>,8t_jsK<,SF+#ur[A^E1+A0E
%/FsQm6_$s?MQFPnB!fn*dY`'Afc(!6o%q]gIZ_shB]3RLZZj:-Q:^SSM3!\;XqQJh1>;mo_Cf7kW[!%G--h8+2N(R*U7IaXpQ6Pk
%C;2%+FR[2V[3OJKjLO-UG/.`N)fKmg09qitb&P%(HR'XK^S.LkUtS1Bi&_$`;(P?<&0KDoNLueqdKP`0>4C+]7CI<cRb:kW[d,Os
%62?V#;R%/qFM+"lk:WHYlnKmdX?/]W\mD"jk%*n[b$/ouK:!_6ESLc(?dn=YH>)GE??SC99,!X&)%%nD2-oZT#n:=0Vm$_]Ll"7B
%TD=m'\BQRDTEOC(cG[CgKdK-HNFg'8QPG'Q+.@"$-FdH?6=N<X)I*43/_9nghE[60\=lGU2U9Iphu$>g%a;#MeQ(2#@,VlVh:SaI
%ZbVIT`$ou[:CVZ$YL+Lfb$%[sLUD,QI@QH1Edc'&d'Pu:BY%O/o]nY>C7o#_Kq6-G^dJS)KMJMK/L,SOmlLC*E\k&jYphQ<bXU?Q
%(f(pTV!LP]:Q9=EkYPEbH`SA(&U5<_;8Outbu_9ZSIh,Xef;<k<8/p44ng7T]ab3O4Rdo]aNONZ/>_XW>!n<Oc87:ufIKOJ>+=[U
%,).TMR,L[igdjBh!C29*f->Mt>3(!!EQ7j/)GoC%Db:u^"21O:/2;@Q=69DjX6,O<[EI@REBqnr56<V#K#l;,d2obsY`Qql2Oi;"
%OWdRdN2FR7:HaT2"*Y+eggQ916:@tr]'!S@bOE1!o/eg=eOQYOjTPjobqt]E7RBu]DGB]9bBhIo)L,XX@,JlP<hkNImBeZ0/'8RN
%NOq;)`@X+FRjB#[ShXL"hQ6Vql#<8g6sp?hK<>G0(WHG!CR$*k-D0[h@?/>EE3dTG?#D40oQ/ln%^**-0HL-dk"9W$6eP:iO]3TL
%3FoYLcie%BgVt?g$A0X=;g)u"r",],%L*7Tk,W#fj\/edacMseFV5s'oE<Bm3fn@qHtVH3BsVC\hRGN+>)`]FGs&JaYpC.qj+0bX
%-#Om(qi"3XZKWVdqB>qj!_*mE,FL821[hWJZl3Mk7T@DkB<A=r$d_4NN\f.i"6"%W'Og(0#g$?S\PD:iS1l)uB"$l*A(.REGe;oJ
%8tgkM)^%K[G9IP;nLeZilZuah8S4K&^S$h?`MO>*Y0k=#o=8).E>8.'fj0ZD3Hhsblo[r2=WuOXG2oR"/3%90GGI7bd>n>1'=a=F
%rJ@'h'-W+N+c*G9j=2s@h6XQ:chNA(Qu,;j/duP$C@U.tG:*Se$%D[FPn*"3*XcLudqj4Wes4_h#MB]5m[LkkZ+IAhOd[s;m%)h;
%26Mf&h'CMTH1&M.%Z2P%*tU>Vn.[,5!UfZZ`JQSDo<rfYY-WPR[CSkb</_ri>?FYjr`'SjSic_'S?H1INDl+g$G5.o^Csq;Kda9l
%j`kki`sjCB+]25\C_2D5gFkidTq&!GVj<&e"G9o==W=b5gR:H%Wp'*B#Rm5s>Xq^N?R:\G[9uL@)1e@$)47t>#N`YOMiKRa0uWX$
%P)CQu9!(pEgbt>+NJQE"VU"p(2>m#l_<8LQJ!%K)k"I=1);gdbaYO$cF#MOdhCT-oi'^Tr_D2g,E#6C%`:>+3$LU0nr*T5<qb)YD
%Mfung2ET=nl6GAg^3:7_/Y>8B$i6LqC\G%#fo=a8_NV*(=s,TPSNO;b>#$F(1Yfr%A!-GA;k="%P&8;Kj>?"dnR"W"FR[S!(VE^2
%RXQ'CrV>%c?OV^qoT!M^S]@14Wk@6:`<,@(;^h'dBI?:TkKiUKQ)C(Wf[!.7dDYrgcjq'H=XQs>GJVI%n,Pb)h0j6ZjsN<A_27)b
%^+Tl8(X365Z$*7md,]noe)`&;`;4d$APdlI8tL#+nWUpEQ8#7kXId,a>iW?.J=L*<E*[pR;G!,."Z-Z?bVm/Hf2*DPR=<(9QcNuq
%o3"1sBDpYN39hYi^eCtQ0I2h9Q-FN/(eU;U=o7_7c)CaYnIKOfA5Z$q/=3r&8u4BmYN)k&b!:i.Q'S.5k/2"j*,%Bq=H3,*-QP.W
%ft_fUS,MI2R?ud*,(7DM1dQS5)MtoN4>kr*@.-5?B9)SUMu8"MrHdW.I0]:@5$Dt;F2.WS'PKs6K69@LVqVGR&3$2&0(b])0?[Np
%QmLMmY?MI^R,bgsnY[u6<uqur^k:J*(D$U\40IOk`[C!INWXqYoC%9tY-4;^URW@8o+nJ5gda@fl>^%FIItLEhIhfG09:I0Zh#G-
%<#PL=R^=f`Vd6c7*n</R6`TA*3#M=+L/09BGKQ:MFj8W3pTp>/jSl'T)dWZ,$'&7hJolVJ_Q6j]7h=`8p8D^4:<XK@OVJps?O-,2
%8fYUrirU5jT4L5-BKJn_\E6e[\[!5XL9jmLG-fWX5tcOl(?(sB8'BZ2'9jQ0GELIMO^XU9ICc>&D;10%E-c^B&MBp?bH#7nR1>LX
%]gDLgkBJ`uFom.+O;n9?Q5POYKO_-r+!r<.<3jLB9uRtANHd::^*jB=io<KTCW(W8YG(C6lqk74F_]o=ls9,Oqq8(6;;ADbh+T>^
%gKr7>@jEns9!E"$aqGqI"F0S#e7XtU,?pI^%4YPqPI[o@s+F95'TWjhl+iDIQ-SZRZ5D0$Tgb@uf@deJN@iI40G$qMSO_?U[>3JK
%+Z5#0-#QQ30D#D!;,)2MMSbWCn:78kEU[FSXq65H[ofpt?2Kn/".qG^!lEq9GN4N!&6l>"ep'$dc+CL4p^*6ebgX*N><Shcgk%*N
%H/pHjl@OMBnh)Gt1-TWs*pm6#D#^k%Neb;O48gUl[-+sbZ!]B1&bqD(FA*#:'X`b"0%HOf\iYFCHe]+;njc?6\LD0+d\C/H+sREP
%>jHt_483QUDqb%!#E;^LYouQ@;p+BEfJCKT/g5.P'<6BYbd'=8c"(!5\&Yj)VhZfe4T,iNQb%Qq^c'aUa*>I6&YL:/%Wb>n8]a1N
%M9(GaB>u1iC4l'dffO3#W!)p>feX,;m6/>G4-D2;Z!/S:p2H4u]D4)I9)M,N^_Y-+Y#H_HC4#-^#D0*!k=F*bG[&\M.;]t@_;T4g
%&?SAMi?Dn/BJ(4^0LN%2H8?mq7FU"ilX:/;9!$`Zlm#D=kW*r5+75\V6QF[K6aDa:C?rm09QEuSfK%IaZ=Qr#8S`aaMl3b*T!Wdn
%>":cKk#6>c0K)@(:RMfW,MnPVO@QSddYB(9SWG\44QpU_Aakg_UBh5F@\[oSD7CbS9j3dkpb&14Ha%=@ium@K)J:,h>H;<3+i<Tp
%c'O'E'_XTL:n6m8ANt`*=b6j?(r`q3HXrT`lnca]j7*FJhZ*HJ7HI;ZF\f"4gp5CqQMjJopb16]g6!#S?;,r"Gp@g!"VGkG%Bf1s
%..I?][uc;[R/Y=+H%Ok-'jf?qe6:t/`p7Lbbp&SBh/;0(C"%MPKh^c/ksB%CAoXjV:HJ>@$gVW7i"L/Y9>p*9XC>956ip$0k#</l
%7bUhI1ZDAKF+UpIFS9A)Skbqpp+XA,YPf"60T4<'<N-B\QC@\Fm"#[ccIC[<V1HH$$"6Qe28:0+76Ha2*oD10fO\^D%sNVuGaN=W
%:/KH1]L:_j9Y+J?`Z3'2$7<7r,KNiDU7u6$%<Bt>bKL.kqP+Y]WaTp(L=C1L*GoXp*lZu'FJG">s-Z>B1c?`Zg1-Z6ga!Mn0q>>%
%1A$Y_lDCoPZT^0-bXF6Hc#ke'7l+W8S:^dBNAm_N'dX>f:>OV?@3"pB]N@[F;jBfXG9N*Np:)$"nd8HXX:@-WVb9[)0[:]Y+e2$+
%=Em9==0cN6Q;'Yi6":gngr],4%QlXrUtQ?SVF-7jp-b-@D35-1p<l3on:X0L.LqYNe`>#%=ZrVJ?/6D.e1036qj)@,SY8O5;sXCI
%;O3A0AD7>Y/%_/p8n5>rrYXV;%N4lB2U[tn[Fq/<aY2KHjV(kuhg`B(Dl'!XG"/mV5'>f^JlA\7reb>2e:k)0HMiZK5D-`Af'VlA
%+2J\%D8GAR7?\".mi4m.jOq6(?j&[79Q:)Q2O8j5!(CRX@SIDFKXe(R'L["MDaM8NS[_Sq_@>6nUP327EF$H,,L;=&O<pgr#qliG
%07-a$ZQ#c\_C^T8W/(0>P71#W3$kVef2(6HReE,;fFatBJL-RUO8i##GXF<I0Zfs((^-l,.TiY\S0eT^,N]:A59[2RC?UfPCdOl:
%cHM-K'#&8j[lBm4+_-e60I?OYH:7;kp&r)p,1(S<'lu.EW/3#>ROV%a+o"d-QJCg2_Dpj9,W3-1QZBU(%taZ?jAt[c[@N6iq<$NP
%GdmUY@2UV@c80?K'Gd$LPDU%#1<@U,SE/e_>"g&U]43Yt_,tCYDiXe4k_qul62N-,&IIT'rK-po7q?pcJ%m+nqL`)O*/HE]<F(=:
%Qdqijn5_(n,WnQT9l#FH<A*e\(3S$DAIXGX+Yn^QR(:d/+36BY'INVCcHt4J/NELCe_bY6I#b&q@2lQ36,Jd>ktI2QKjDI45ZmqV
%jmp'L*fNNk_:,KnRHpVKpo_)'>e?YlS-UXJ4%:k7$QkCS.LNa"&i+B.D88rAn>=mAK"J!u1b@l33\)2Fm1&uo;E!Y<O]/PBG0GDV
%1qp5T.gg!Bn*Z1iHBst>YFXp^hk!L!I-3aUOA;:9"[^3DgVRZ\CkdlRJs*(D9l*20RA$+/@(7`mlm`d2ZP#"$,rs*bmt\uLpNAhj
%Y:9q.Dm?O$l\@.qP=^qsMLpYn]b<$!g)f,uYJ[kSlgUJX?Y9Zr@er>%%N9co7_e>h(XB.K_ebq=dHbI?'P3YU<+?Xh`Y6@N"*I^V
%Wd3?8i@3&soXTf]#*H"DPn&sjC?O94+?qAoNn8gRgS>\b_gb5L9rl'e_oJY!#jHASg*,;"&aPsbUg5'uWiSlK`ip$)MbVUB'=j''
%#Hn5N]<na,:V;Mj$W&%XdV72[*[RiY38n.2O3L_gFso%AoZt01&kJ6\Zet:YJDHVL,&pfT]E.2TNj=k#i\g7_`/N"3;WA$t%!\gm
%Sn1%-%_)[d)(A?%<UG$]Z4CkT1,gJ=^XU_FU[K6l&Km$Vbiq48Vb1ft/?&:3:qO8SfpI"(ME<OgZmr6<9ug\6+neaG'fhBGj6H&C
%3tJMPG/f6[_7X!jWg9U#S.=k'XgecLaG)2(%D2KJZ)jeIhgkILNf-EhM$-ggha6M<,_-b.q1S:*khTOQ]VK1P?/:/^hA(bVKj&r#
%?YWktEl;2MGg6#D/b1od7dT-l`&59D[h:F*o5(r,'#LVIa#^)9h=I=e;s]fg=,oAYr4Y$@`Q#8P[LVf_0%#0)<O@SA".CMq":0<L
%=c^CsH!rgYT%"2EGf#af6njJp?W$uO8D&fT$K3CFhY(WPFF4CRG*R-122&iEC/(&B<BKmi-URNa<aWjbI4$9-7asQs6;n,s$F!n/
%FH<Od*5/gln\tN).b\335q"`^7h2_#7,756`F'-ca2Bf\90juAm'`buC=\6lB$P?\`_##QOdm>`YPO([UjA\sUZ_F6S5,O?6>R+H
%:9K3*gYAoh9)XJg.HX.!<n@X$nq:9>odGBC@+Q0$+0pM);A;>0&_B+riQ>pKeX!NHT$'D$Na,#^&80n7,:5T,]i%CP@jVe$G+)s[
%k;*plnfI\fhJopU_K0ChQ<mAsN.``::a]"m46EbdkS:Wmfo9"9a0,;M;:)b:>U)%bDs<sl2ofJp[Kp!(+o)YF8YH\E?1sCsX"!pL
%e,ADrBW%-YCuHWQc,(+OJ^[q"Gp;JpY=CkiAIKrI]/CO:C\$[NO'W<c=i,UZ7MVO1j,(B<DCrS3]`0og#@&`:Y>[?-8W5q&.'D7B
%d(&Pb%=0H(?g@87H>WL,iI^'aX,oX[GS0oDma>E^)5)Fact`r_a7mto#Ds=XP"_A#G`pQA*LP4#Ym1'mJiZ'-XYNFbF*\>h6c'dX
%PjW]2]el8m2BlFu6/;u[[Hp)W].@lNmk-c;O1HD0JO4ej9ncM\(-$CSmb<G2m*]SZo:,Z`]M=*XQP)&rR`'oJBB5o<+MM^h]M=Zr
%K'a&Gdj3"I#aART%;dSghWQdQhsM[eVa2dQ=C7CiZQQI#/9L/6'R.VWJ*JkIMdb:VF;k")SC-XZ3d%_TGc3)QY$`ZgkVPkF=+^J?
%ljmr+VkKsSWZ&'%%@YJ>45nP#P$B*/dqNp(7qA1BBg@:dK\'PkXG7XA%NRS>lX2r8dqQ%u']*+J3XpM$e()fYP+lBkf4Z!93CR10
%)CAfr.IKRPXU_8VE"CddpZj[Tm]1o/S4fVcK$KOl7^F5@d5Z5]1_^`4(7Q4:&m+;%?Si[i-T_("dE":8VVe5tBXtE6]gBWp<BTr@
%6GmWIUXCYL%"HS"NC&7fm85dFd#`$#YZmtg1D-h99Q4`&PSHMgg.W\pV;)<h2T*o.o&cLs9Hm06Bamg1JZ^]dEH"cf[+-nh\.@'8
%h536NmQU+M\u7EH4Wa*a/9N<0l<p4<6_=B'\Zo(GJ.@f#YIDRQ-bIiUFD<V=:S\t'Rn</Ui%jc/)'i9LGYW+1<D7A`dS\SoG\)X&
%TsSP%6`:`EL0i"rJr>0o&Jo"J2Gira/7iE#m]"AlOmb6/%&$-<;)FUA^nKckaB2@qhl[WCW4:F5rH\NUU3;A!>=UrE>6ps:*W\[e
%*i31=J1QiuC$t!a:ro>XGioC+:gds+/gimog^s)A:4O<d]/gYG$*YP%!\AGb!#Zu88DNPo!HOEGeb&nb82;$#iA^gnH`l++SR<hX
%R.nXZr)][JJc>(!V45TK*<6EIL.qSe!%?:]PUWp\!*MC,pU=<MK.BOG0.-a5dGaD&4Z+TXOe+q\#sdG>M#i#F!El\R'#s>FTR5\I
%=bd!.FGJOHLMUU6PcEN2!Q:/1KAlI[@441cm`p=kn[fJCIg0HU"1`X%1OqKC;=,<8^k2J%i6ZHJW&XUQp*5)k.jOJCJ;g:S11qU.
%3@Q'o\g'K!\kkn'c2^<e]*!RKE2`;mr6I>ORD%+lrs["C%,&aPepoLmXTMrsrWH?e49AV^-Xi1u#[lV^]NAO$J1RO.&+0^2U/(iF
%QXj/W]l*KA#fsUQZG"kFCnIY-MfAl1"o+p54T[BL0*/Dq49G([Yjj)b"D"7fl?PAlZ4bUIHklC/)P9'9n"]Ic+9M?eEHd0<U!d(5
%0RjA465."6o+8tM`(9=ql3>8#!m!lY0NfJ1jba4_SH=W%/a8kd:''GHY#g:%$7tF)O+F3<rpaWR*\OTZ?f[*IZt%n`n162Rn9nr1
%;_a*LV1\4V88."&>/oZ]M+884pV=tuRJoP:p0Ed5f^*@`RWK?f5PHPc`\E+h3W&p4@@SSQFm[pB,^=SM2,[,+"P^E8=m)r$eh&[/
%[)nO(<fSbg2d=tmaeC'7*X+C>rc2u?*_B(N1?#[aeX%GQ^^WCV)pj1E8uRABDkaK#S[+WH4h1p:%ojs%U><.<j+p/ca)>Cn'\s93
%>;R1s^!h@G'<s]H?tieEPZuHTA%+3B!"$r3_QGPl,2d^X)n-VE]_]$oY(k-_5$f2t)Q1&1Z/W1c<iOM8`EDkUZ68cJoC@('cJp`f
%M?\t8$pHf`W^`ng/4T:dj?1AV8@k26LUe.%=/rfGlH-+nO9s$k&d!j,Wru]pFi(UC_Y9tJ/C^kkj0X$m)jD_ibsHd;-AG"8OGL6C
%P/:pY@$?h1/M,5[OdTnj$BIpR7=M^t%^D/TTgV?[#A%AE6@UDOkQ)o0gj<f`ats#d(ZD6q"<nGMC)TW65'&5\VnFI]g8#RD_bGSY
%_-V>MojMaF[R[!aX_C)Ygte+\V:tmuPW7F#34]b60gOK/E1Edd6+(HkIl1q$#[^O%2poKCR!8-Eap_lO&`Z@)Z+hI9IUNV^h*\D`
%DZ.q)BH&k$lE.Rla:.8KU/eg`eKK_ao9c9g::XnTib\NLM^9`(q;imFJ1dVZ"l7YT](apiis@?h:Q]>/DWg*.-K<*/:pU@iH7Ia,
%5`<eno`iD'-cRhfOS)/q\piM/71LC'VM$03KB<nsdU'[R7,]*H&B5AO*Y3M>b/15+Yi9f>i</fl6Qt:3k7.9`e9`Eso6V7dm:`[)
%\Mm@hgl0oS0B4`Z\<$J!/r!2L%Ed:[UBj0'c0tnmkJS'cjPBNd[TV5tGZ8Ig6*DSr>HU/J?CO.%odE[6-$AdVSX`%80'teuHIE=L
%/Re;H55OV2kql$l1BaUjWOJpSU=Uka$2;j1.b<^gjI7#ZU7p7YAdHYbEoXmX:spOIDe<[Wf+PI#Sjb;,?fbTjBMQp:0/KuhlXsn*
%f+LQ6n"\2<'JrBUE@ErV:+RZ&Wk_/XKYac*?S\V!9fsKVb1PWqPu/`^-8fgX(mc*]/TU4+WS2b7-DB_(QUR5d7P@Qb$qj_]GrIsP
%Hc0eAcq0RJ&etQ6$u*o`mY/DU//B-:aKu$[(%DUX,(;3[3!e[q\>aV;)/+\W$U<Ej(DLUOAIkT",BS7dZ6-b3Gc/C@F.@5Q5&*.&
%`An1Z5G8<+U/%,1Z5OtfB0<1!A>9Ai%=ZCa_dg/%+dRI7>OC!>V#%Q9;<Rmm;aeE"[0)D^_ek_J.gI4-!C@99e0r>koT?4?XDAkV
%(t6u_Ln1f>5DN9LnM2n"&l0bh;,f?SjG?N8'M[$4m/RtL#hn7Y4N)<d>qU!E8?!9#JC_]2Z@ct!oYcdX6f,:@&#tlb\sDA4ZYc!Y
%/#IX:95_+>@hh=*T>P8gF@NfN2QQprYhu%#BEgL6be"8*JSCtl,"'?4QVV*o<GPJDFX1m'di*i<Jmruo@C3(S,u5+W/ORSCp;VW[
%rC4Y3I40"Cl-JFhPpIaNi5VFS)KDBrEl0CN-m@.o4!QZ-?p*gRb?LY\$MJ/5-ngD6oI2_`.)):0=,Zeubl8QFFNon8]XrueqreSR
%mln]-nAur6rr:mSLHkgF^\I-Pk(!;ihuE]3qu?9Ha#@oTn/),hrBG`*00d2Np>^oMs8:4Bkn!7_pP4Ouhg\F*`t/3NrTW:5If/\j
%T76S*_o!Sqq1jG#iCEJEJ+4?Tnc/R&s8:4B5J_[]5Q~>
%AI9_PrivateDataEnd
